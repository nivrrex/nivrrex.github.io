<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Nivrrex&#39;s blog</title>
    <link>http://nivrrex.github.io/tags/golang/</link>
    <description>Recent content in golang on Nivrrex&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright right infomation.</copyright>
    <lastBuildDate>Fri, 15 Nov 2019 23:29:00 +0800</lastBuildDate>
    
	<atom:link href="http://nivrrex.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>crosscompiling-for-openwrt-with-golang</title>
      <link>http://nivrrex.github.io/post/crosscompiling-for-openwrt-with-golang/</link>
      <pubDate>Fri, 15 Nov 2019 23:29:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/crosscompiling-for-openwrt-with-golang/</guid>
      <description>缘来 实验了下nim语言(nimlang)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。
Golang支持的交叉编译平台 amd64 (also known as x86-64) A mature implementation. 386 (x86 or x86-32) Comparable to the amd64 port. arm (ARM) Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports. arm64 (AArch64) Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports. ppc64, ppc64le (64-bit PowerPC big- and little-endian) Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</description>
    </item>
    
    <item>
      <title>some problems for golang excel update</title>
      <link>http://nivrrex.github.io/post/some-problems-for-golang-excel-update/</link>
      <pubDate>Sun, 15 Jun 2014 17:24:30 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/some-problems-for-golang-excel-update/</guid>
      <description>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见这里 由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。 首字母大小写导致无法外部调用 Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。
GOPATH设置 golang有几个关键环境变量，需要进行设置
 GOROOT : Golang的安装目录，默认为C:\Go GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录 GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows） GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）  我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^
mkdir C:\Go\import mkdir C:\Go\import\src mkdir C:\Go\import\pkg set GOPATH=C:\go\import  Go build无法生成文件 这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^
小结 归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。 Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。 日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</description>
    </item>
    
  </channel>
</rss>
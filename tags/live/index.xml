<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>live on Nivrrex&#39;s blog</title>
    <link>http://nivrrex.github.io/tags/live/</link>
    <description>Recent content in live on Nivrrex&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 30 Dec 2022 09:55:00 +0800</lastBuildDate><atom:link href="http://nivrrex.github.io/tags/live/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022 summary</title>
      <link>http://nivrrex.github.io/posts/2022-summary/</link>
      <pubDate>Fri, 30 Dec 2022 09:55:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/2022-summary/</guid>
      <description>平淡的一年
GFW 这一年里， 买了几家新的 VPS ，试用了后，或多或少有点问题，决定明年就续约那两家固定的。科学上网技术也实验了几个新的 hysteria / tuic / gost / glider / mieru / pingtunnel ，目前稳定的在使用 naiveproxy。速度不重要，稳定才重要。
路由器 这一年里，基本上没怎么在折腾路由器了，家里买了几个 WiFi6 路由器，Ruijie / H3C / TP-Link / GL-iNet 各种品牌，放在不同的地方使用，都挺稳定的。有特殊需求的，加个 Pi 盒子作为旁路由，就解决了。
编程 这一年里，程序基本上没有怎么折腾。
结 一年很快，工作很忙，平淡的过去，未必不是一种幸福~</description>
    </item>
    
    <item>
      <title>2021 summary</title>
      <link>http://nivrrex.github.io/posts/2021-summary/</link>
      <pubDate>Fri, 10 Dec 2021 10:15:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/2021-summary/</guid>
      <description>折腾的一年，回归平淡
GFW 这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。
后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。
路由器 这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。
后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。
编程 这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。
关注的 nim / zig / dlang / golang 都没有太折腾。
结 发现这几年来折腾来折腾去，实际意义却不大。
有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。
不过所有能折腾的都有了了解，后边也没太大折腾的想法了。
回归平淡，不再为了折腾而折腾~</description>
    </item>
    
    <item>
      <title>change hexo to hugo</title>
      <link>http://nivrrex.github.io/posts/change-hexo-to-hugo/</link>
      <pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/change-hexo-to-hugo/</guid>
      <description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
A fast and modern static website engine Language:Go License:APL 2.0 目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename 主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio hermit主题
Hugo Themes Site hugoThemes: All Themes Hugo 安装比较简单：
cd themes git clone https://github.com/Track3/hermit.git themes/hermit 生成页面 hugo new posts/about.md 然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor
本地测试 hugo server --buildDrafts --watch --theme themename 运行后可以在 http://localhost:1313/ 查看具体效果</description>
    </item>
    
    <item>
      <title>Hello GitHub</title>
      <link>http://nivrrex.github.io/posts/hello-github/</link>
      <pubDate>Thu, 12 Jun 2014 19:37:32 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/hello-github/</guid>
      <description>欢迎来到我的GitHub blog！
这是我用Hexo编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。
Git的一些基本命令 git config --global user.name &amp;#34;nivrrex&amp;#34; git config --global user.email nivrrex@gmail.com ssh-keygen -t rsa -C &amp;#34;nivrrex@gmail.com&amp;#34; ssh -T git@github.com -i ./.ssh/id_rsa 更多命令可以到git - 简明指南去查看
Hexo的一些基本命令 npm install hexo-cli -g npm install hexo --save npm install hexo-generator-index --save npm install hexo-generator-archive --save npm install hexo-generator-category --save npm install hexo-generator-tag --save npm install hexo-generator-sitemap --save npm install hexo-generator-feed --save npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save npm install hexo-server --save npm install hexo-deployer-git --save hexo init hexo new [post] &amp;#34;My New Post&amp;#34; hexo server hexo generate hexo deploy 更多文档可以到Hexo docs上查看</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nivrrex&#39;s blog</title>
    <link>http://nivrrex.github.io/</link>
    <description>Recent content on Nivrrex&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 30 Dec 2022 09:55:00 +0800</lastBuildDate><atom:link href="http://nivrrex.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022 summary</title>
      <link>http://nivrrex.github.io/posts/2022-summary/</link>
      <pubDate>Fri, 30 Dec 2022 09:55:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/2022-summary/</guid>
      <description>平淡的一年
GFW 这一年里， 买了几家新的 VPS ，试用了后，或多或少有点问题，决定明年就续约那两家固定的。科学上网技术也实验了几个新的 hysteria / tuic / gost / glider / mieru / pingtunnel ，目前稳定的在使用 naiveproxy。速度不重要，稳定才重要。
路由器 这一年里，基本上没怎么在折腾路由器了，家里买了几个 WiFi6 路由器，Ruijie / H3C / TP-Link / GL-iNet 各种品牌，放在不同的地方使用，都挺稳定的。有特殊需求的，加个 Pi 盒子作为旁路由，就解决了。
编程 这一年里，程序基本上没有怎么折腾。
结 一年很快，工作很忙，平淡的过去，未必不是一种幸福~</description>
    </item>
    
    <item>
      <title>2021 summary</title>
      <link>http://nivrrex.github.io/posts/2021-summary/</link>
      <pubDate>Fri, 10 Dec 2021 10:15:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/2021-summary/</guid>
      <description>折腾的一年，回归平淡
GFW 这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。
后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。
路由器 这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。
后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。
编程 这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。
关注的 nim / zig / dlang / golang 都没有太折腾。
结 发现这几年来折腾来折腾去，实际意义却不大。
有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。
不过所有能折腾的都有了了解，后边也没太大折腾的想法了。
回归平淡，不再为了折腾而折腾~</description>
    </item>
    
    <item>
      <title>dlang with ldc in mipsel</title>
      <link>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</link>
      <pubDate>Sun, 30 Aug 2020 09:19:10 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</guid>
      <description>简介 突然想用dlang语言玩玩，然后又希望能在路由器上使用(openwrt mipsel)，就实验了一下Cross-compiling with LDC，现在将具体过程记录一下。
mipsel gcc 首先需要到openwrt下载路由器对应的gcc的Cross-Compiler，我用的是mt7621的路由器，并将其下载到了 /root/mipsel/ 目录下
cd /root/ wget https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz tar xvf openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz rm openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz mkdir mipsel mv openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/* mipsel/ rm -r openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64 设置环境变量
cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrc export PATH=/root/mipsel/staging_dir/toolchain-mipsel_24kc_gcc-7.5.0_musl/bin/:$PATH export STAGING_DIR=/root/mipsel/staging_dir/:STAGING_DIR alias strip-mipsel=&amp;#39;mipsel-openwrt-linux-strip -s&amp;#39; EOF source /etc/bash.bashrc 如上，mipsel的gcc交叉编译环境就配置好了
ldc 下载 到ldc官网下载最新版本的ldc，将其下载设置到 /root/ldc2/ 目录下，并设置path环境变量
wget https://github.com/ldc-developers/ldc/releases/download/v1.23.0/ldc2-1.23.0-linux-x86_64.tar.xz tar xvf ldc2-1.23.0-linux-x86_64.tar.xz rm ldc2-1.23.0-linux-x86_64.tar.xz mv ldc2-1.23.0-linux-x86_64 ldc2 cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrc export PATH=$PATH:/root/ldc2/bin EOF source /etc/bash.bashrc 编译mipsel的runtime 需要下载 cmake ninja-build 等工具支持编译，并将编译好的 .</description>
    </item>
    
    <item>
      <title>compile nim with tcc</title>
      <link>http://nivrrex.github.io/posts/compile-nim-with-tcc/</link>
      <pubDate>Sun, 17 Nov 2019 09:09:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/compile-nim-with-tcc/</guid>
      <description>缘来 Nim语言可以转换成C、C++、Objective-C、JavaScript等语言，其中C语言默认是转换成GCC进行编译的，相较于Go语言来说，编译速度还是有点慢的。于是兴起了用Tcc编译器编译Nim语言的想法。
 配置 其实配置很简单，打开nim\config\nim.cfg文件
cc = gcc 修改为 cc = tcc 结 就这样，保存文件配置完成后，就可以用Tcc编译Nim语言啦~</description>
    </item>
    
    <item>
      <title>crosscompiling for openwrt with golang</title>
      <link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</link>
      <pubDate>Fri, 15 Nov 2019 23:29:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</guid>
      <description>缘来 实验了下nim语言(nimlang)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。
 Golang支持的交叉编译平台 amd64 (also known as x86-64) A mature implementation. 386 (x86 or x86-32) Comparable to the amd64 port. arm (ARM) Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports. arm64 (AArch64) Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports. ppc64, ppc64le (64-bit PowerPC big- and little-endian) Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</description>
    </item>
    
    <item>
      <title>crosscompiling for openwrt with nim</title>
      <link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</link>
      <pubDate>Fri, 15 Nov 2019 23:21:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</guid>
      <description>缘来 nim语言(nimlang)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。
 Debian系统下下载nim语言 sh -c &amp;#39;printf &amp;#34;deb http://ftp.cn.debian.org/debian/ sid main&amp;#34; &amp;gt; /etc/apt/sources.list.d/sid.list&amp;#39; apt update apt -t sid install nim -y Debian系统下安装gcc等编译环境 apt-get install build-essential 下载对应架构的OpenWRT编译工具链toolchain wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz rm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz 设置环境并进行编译 export PATH=/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:$PATH nim -d:release --opt=size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim 结 就这样，就可以生成对应路由器下的可执行文件啦~</description>
    </item>
    
    <item>
      <title>ubnt er-x use openwrt</title>
      <link>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</link>
      <pubDate>Mon, 09 Jul 2018 20:12:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</guid>
      <description>给UBNT的ER-X刷OpenWrt固件
缘 UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。
于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 https://cokebar.info/archives/664 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。
安装 前期问题 刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。
于是到 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=15243 帖子中和国外的一个帖子中提到的 http://s000.tinyupload.com/index.php?file_id=07741512272586742124 ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：
Request timed out而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。
恢复官方固件 后来在 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=19800 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：
##这一部分不是帖子的内容，是前期准备工作#在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tartar -xf ER-e50.</description>
    </item>
    
    <item>
      <title>use cmder</title>
      <link>http://nivrrex.github.io/posts/use-cmder/</link>
      <pubDate>Mon, 04 Jun 2018 14:24:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/use-cmder/</guid>
      <description>缘来 Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了cmder这个很方便的替代windows自带命令行的好工具，记录一下。
 介绍 cmder由3部分组成：
ConEmu ConEmu 是一套 Windows 控制台模拟器 (console emulator)
Clink Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力
msysgit 提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &amp;hellip; 等
安装 安裝 cmder
先到 cmder 官网 http://cmder.net/ 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。
外部链接 具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：
  介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 ) https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx
  Win下必备神器之Cmder https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/
  cmder 一个比cmd强n倍的神器 https://www.jianshu.com/p/7a706c0a3411
  配置 注册Cmder，文档的右键菜单添加Cmder here Cmder.</description>
    </item>
    
    <item>
      <title>change hexo to hugo</title>
      <link>http://nivrrex.github.io/posts/change-hexo-to-hugo/</link>
      <pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/change-hexo-to-hugo/</guid>
      <description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
 A fast and modern static website engine Language:Go License:APL 2.0  目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename 主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio hermit主题
 Hugo Themes Site hugoThemes: All Themes Hugo  安装比较简单：
cd themes git clone https://github.com/Track3/hermit.git themes/hermit 生成页面 hugo new posts/about.md 然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor</description>
    </item>
    
    <item>
      <title>start to use python</title>
      <link>http://nivrrex.github.io/posts/start-to-use-python/</link>
      <pubDate>Mon, 04 Apr 2016 09:05:37 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/start-to-use-python/</guid>
      <description>缘来 最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。
 开始 整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。
整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。
Python3 vs Python2 这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。
但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。
print无法输出中文 这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：
import io, sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&amp;#39;utf8&amp;#39;) 相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。
Python VS Ruby 这个题目比较大，只能简单的就第一感觉来说：
Python的好处就是编码样式比较统一，第三方类库超多。 可以关注自己需要解决的问题，不用费心思在语法细节上。 Ruby的优势是处理文本效率很高，语法糖很多，用起来很省心。 但是第三方类库和Python相比差距还是比较大。 结 其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。
最终还是选择了Python，而且可能近期都会使用它。</description>
    </item>
    
  </channel>
</rss>

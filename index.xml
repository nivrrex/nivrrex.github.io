<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nivrrex&#39;s blog</title>
    <link>http://nivrrex.github.io/</link>
    <description>Recent content on Nivrrex&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright right infomation.</copyright>
    <lastBuildDate>Mon, 09 Jul 2018 20:12:00 +0800</lastBuildDate>
    
	<atom:link href="http://nivrrex.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ubnt er-x use openwrt</title>
      <link>http://nivrrex.github.io/post/ubnt-erx-use-openwrt/</link>
      <pubDate>Mon, 09 Jul 2018 20:12:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/ubnt-erx-use-openwrt/</guid>
      <description>给UBNT的ER-X刷OpenWrt固件
缘 UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。
于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 https://cokebar.info/archives/664 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。
安装 前期问题 刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。
于是到 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=15243 帖子中和国外的一个帖子中提到的 http://s000.tinyupload.com/index.php?file_id=07741512272586742124 ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：
Request timed out  而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。
恢复官方固件 后来在 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=19800 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：
##这一部分不是帖子的内容，是前期准备工作 #在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下 wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tar tar -xf ER-e50.</description>
    </item>
    
    <item>
      <title>use koolproxy for adblock</title>
      <link>http://nivrrex.github.io/post/use-koolproxy-for-adblock/</link>
      <pubDate>Tue, 05 Jun 2018 10:22:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/use-koolproxy-for-adblock/</guid>
      <description>KoolProxy 路由器上的广告过滤插件
介绍 KoolProxy 是一个免费的广告过滤软件，可以通过自己安装证书的方式支持https的广告过滤。看见后，想自己试用一下，用来过滤自己的机顶盒广告。
安装 在官网http://firmware.koolshare.cn/binary/KoolProxy/ 根据自己路由器对应的版本，分别安装luci和koolproxy
安装luci 在 https://firmware.koolshare.cn/binary/KoolProxy/luci/ 按指导说明安装ipk ；注意要提前安装dnsmasq-full , ipset
opkg update opkg install openssl-util ipset dnsmasq-full diffutils iptables-mod-nat-extra opkg install wget ca-bundle ca-certificates libustream-openssl  opkg install --force-depends http://firmware.koolshare.cn/binary/KoolProxy/luci/luci-app-koolproxy_2.0-1_all.ipk opkg install --force-depends http://firmware.koolshare.cn/binary/KoolProxy/luci/luci-i18n-koolproxy-zh-cn_2.0-1_all.ipk  安装koolproxy主程序 我的路由器是netgear的wntr4300，所以就是 ar71xx 的 koolproxy_3.7.2-20180127_mips_24kc.ipk 这个ipk
opkg install --force-depends http://firmware.koolshare.cn/binary/KoolProxy/ar71xx/koolproxy_3.7.2-20180127_mips_24kc.ipk  如果没有对应的ipk，需要自己手动安装
mkdir /usr/share/koolproxy cd /usr/share/koolproxy wget https://koolproxy.com/downloads/XXX mv XXX koolproxy chmod 777 koolproxy mkdir data cd data mkdir rules cd rules wget https://kprule.</description>
    </item>
    
    <item>
      <title>use cmder</title>
      <link>http://nivrrex.github.io/post/use-cmder/</link>
      <pubDate>Mon, 04 Jun 2018 14:24:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/use-cmder/</guid>
      <description>缘来 Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了cmder这个很方便的替代windows自带命令行的好工具，记录一下。
介绍 cmder由3部分组成：
ConEmu ConEmu 是一套 Windows 控制台模拟器 (console emulator)
Clink Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力
msysgit 提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &amp;hellip; 等
安装 安裝 cmder
先到 cmder 官网 http://cmder.net/ 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。
外部链接 具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：
 介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 ) https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx
 Win下必备神器之Cmder https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/
 cmder 一个比cmd强n倍的神器 https://www.jianshu.com/p/7a706c0a3411
  配置 注册Cmder，文档的右键菜单添加Cmder here Cmder.</description>
    </item>
    
    <item>
      <title>change hexo to hugo</title>
      <link>http://nivrrex.github.io/post/change-hexo-to-hugo/</link>
      <pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/change-hexo-to-hugo/</guid>
      <description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
 A fast and modern static website engine Language:Go License:APL 2.0  目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename  主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio
 Hugo Themes Site hugoThemes: All Themes Hugo  安装比较简单：
cd themes git clone https://github.com/leonhe/hugo_eiio  生成页面 hugo new post/about.md  然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor</description>
    </item>
    
    <item>
      <title>start to use python</title>
      <link>http://nivrrex.github.io/post/start-to-use-python/</link>
      <pubDate>Mon, 04 Apr 2016 09:05:37 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/start-to-use-python/</guid>
      <description>缘来 最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。
开始 整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。
整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。
Python3 vs Python2 这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。
但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。
print无法输出中文 这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：
import io, sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&#39;utf8&#39;)  相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。
Python VS Ruby 这个题目比较大，只能简单的就第一感觉来说：
Python的好处就是编码样式比较统一，第三方类库超多。 可以关注自己需要解决的问题，不用费心思在语法细节上。  Ruby的优势是处理文本效率很高，语法糖很多，用起来很省心。 但是第三方类库和Python相比差距还是比较大。  结 其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。
最终还是选择了Python，而且可能近期都会使用它。</description>
    </item>
    
    <item>
      <title>change editer with sublime text</title>
      <link>http://nivrrex.github.io/post/change-editer-with-sublime-text/</link>
      <pubDate>Sat, 01 Aug 2015 15:41:45 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/change-editer-with-sublime-text/</guid>
      <description>来由 本来一直使用的编译器是SciTE，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。 最近看了Golang中国的教学视频，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇Sublime Text 全程指南，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。
Sublime Text安装 首先到Sublime Text的官网下载最新的版本，我下载的是3.3083的portable version版 然后是最重要的事情了，安装Package Control,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。 打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：
import urllib.request,os,hashlib; h = &#39;6f4c264a24d933ce70df5dedcf1dcaee&#39; + &#39;ebe013ee18cced0ef93d5f746d80ef60&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.</description>
    </item>
    
    <item>
      <title>update debian linux image with backports</title>
      <link>http://nivrrex.github.io/post/update-debian-linux-image-with-backports/</link>
      <pubDate>Mon, 27 Jul 2015 22:36:17 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/update-debian-linux-image-with-backports/</guid>
      <description>来由 因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。
如何查看Linux版本 共有5种方式，具体如下
cat /etc/*-release lsb_release -a cat /proc/version uname -a #uname -mrs cat /etc/issue  我的Debian更新过，显示是
Debian GNU/Linux 8.1 (jessie)  但是，内核为什么还是
Linux 2.6.32-042stab093.4 i686  好吧，更新，更新！
使用Backports源 对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目
其官方Wiki上面说
Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。
开始更新 更新软件源 首先在apt的sources.list文件中添加Backports源
vi /etc/apt/sources.list  添加如下内容
deb http://ftp.debian.org/debian/ jessie-backports main deb-src http://ftp.debian.org/debian/ jessie-backports main  更新数据
sudo apt-get update #sudo apt-get -t jessie-backports upgrade  搜索并安装linux-image文件 安装aptitude，以便搜索最新的linux-image文件
apt-get install aptitude aptitude search kernel-image  根据搜索出来的内核文件，进行安装，我的是</description>
    </item>
    
    <item>
      <title>fanqiang with dnsmasq</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-dnsmasq/</link>
      <pubDate>Sun, 26 Jul 2015 17:51:59 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-dnsmasq/</guid>
      <description>来由 本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~ DNSmasq安装 我的系统是Debian，直接运行以下命令
sudo apt-get update sudo apt-get install dnsmasq  DNSmasq配置 编辑/etc/dnsmasq.conf文件
vi /etc/dnsmasq.conf  修改以下参数
resolv-file=/etc/resolv.conf strict-order listen-address=xxx.xxx.xxx.xxx,127.0.0.1 port=443 cache-size=1024 log-queries  编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器
nameserver 8.8.8.8 nameserver 208.67.222.222  将服务重启即可
/etc/init.d/dnsmasq restart  将DNSmasq加入启动项
sudo vi /etc/rc.local  将以下命令添加进去即可
/etc/init.d/dnsmasq start  DNS污染解决方案 OpenWrt-dist上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。 其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，地址
结 这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</description>
    </item>
    
    <item>
      <title>fanqiang with chinadns</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-chinadns/</link>
      <pubDate>Sun, 26 Jul 2015 12:54:59 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-chinadns/</guid>
      <description>来由 用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。
Old解决方案 - FreeRouterV2 以前的解决方案是借用FreeRouterV2的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，如下
安装 首先需要在OpenWRT上安装如下包：
opkg update opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32  配置 然后配置iptables的防火墙策略
vi /etc/firewall.user  添加如下命令
iptables -t mangle -I PREROUTING -p udp --sport 53 -m u32 --u32 &amp;quot;0&amp;amp;0x0F000000=0x05000000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@8&amp;amp;0x810F=0x8000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@12&amp;amp;0xFFFF=0x0000&amp;quot; -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|042442B2|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|0807C62D|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|1759053C|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|253D369E|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|2E52AE44|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|31027B38|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|364C8701|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|3B1803AD|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|402158A1|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4021632F|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4042A3FB|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4168CAFC|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|41A0DB71|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|422DFCED|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|480ECD63|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|480ECD68|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4A7D2766|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4A7D2771|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4A7D7F66|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4A7D9B66|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4D04075C|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|4E10310F|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|5D2E0859|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|76053106|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|80797E8B|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|9F6A794B|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|A9840D67|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|BC050460|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|BDA31105|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|C043C606|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|C504040C|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|CA6A0102|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|CAB50755|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|CB620741|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|CBA1E6AB|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|CF0C5862|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D0381F2B|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D1244921|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D155E58A|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D1913632|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D1DC1EAE|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D35E4293|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D5A9FB23|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D8DDBCB6|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|D8EAB30D|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|F3B9BB27|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|F9812E30|&amp;quot; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;quot;|FD9D0EA5|&amp;quot; --from 60 --to 180 -j DROP  重启防火墙即可</description>
    </item>
    
    <item>
      <title>fanqiang with shadowsocks</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-shadowsocks/</link>
      <pubDate>Fri, 24 Jul 2015 12:57:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-shadowsocks/</guid>
      <description>来由 已经一年多没有更新这个blog了，现在来写点什么吧。 这一年来，没怎么做这方面的东西，fanqiang也主要是用VPS架设的PPTP VPN，速度一般，但是可以上很多网站啦。前一阵子，把RamNode上的VPS重新续费，然后购入了NETGEAR的WNDR4300路由器，刷了最新版本的14.07的OpenWRT在用。中间没有怎么折腾，基本够用。
最近突然想折腾了下，发现用Shadowsocks进行fanqiang比较快，下边就把经过写写吧：
VPS架设Shadowsocks 选择Shadowsocks版本 Showsocks有好几种版本，Python, Golang, Nodejs, libev等，具体可以去官网看一下 因为说libev版本的占用内存较小，方便在我的VPS上部署，所以我选择了shadowsocks-libev
编译Shadowsocks 我是直接通过git在官网上下载最新的包在Debian的VPS上进行编译的，具体如下：
git clone https://github.com/shadowsocks/shadowsocks-libev.git cd shadowsocks-libev sudo apt-get install build-essential autoconf libtool libssl-dev ./configure &amp;amp;&amp;amp; make make install  配置Shadowsocks服务器端 vi /etc/shadowsocks-libev/config.json  具体格式如下：
{ &amp;quot;server&amp;quot;:&amp;quot;my_server_ip&amp;quot;, &amp;quot;server_port&amp;quot;:8388, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;barfoo!&amp;quot;, &amp;quot;timeout&amp;quot;:600, &amp;quot;method&amp;quot;:&amp;quot;table&amp;quot; }   server: 你的Shadowsocks服务器的IP地址 (IPv4/IPv6). server_port: 你的Shadowsocks服务器端口. local_port: 本地端口. password: 你的Shadowsocks服务器的账号密码. method: 你的Shadowsocks服务器采用的加密方式, &amp;ldquo;bf-cfb&amp;rdquo; , &amp;ldquo;aes-256-cfb&amp;rdquo; , &amp;ldquo;des-cfb&amp;rdquo; ,&amp;ldquo;rc4&amp;rdquo; , &amp;ldquo;table&amp;rdquo; 等等，建议使用&amp;rdquo;aes-256-cfb&amp;rdquo;  vi /etc/rc.</description>
    </item>
    
    <item>
      <title>build openwrt with image builder</title>
      <link>http://nivrrex.github.io/post/build-openwrt-with-image-builder/</link>
      <pubDate>Thu, 17 Jul 2014 22:17:11 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/build-openwrt-with-image-builder/</guid>
      <description>来由 这几天在折腾OpenWrt，前文fanqiang with openwrt+vps里说过， 我用的是PandoraBox最新编译的版本，但是其内置的packages里面很多软件没有编译，如Python等。而直接换用官方的packages，会提示兼容性问题，无法直接使用。 从网络Google了一下，可以两个同时使用。 src/gz attitude_adjustment http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages src/gz pandorabox http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages dest root / dest ram /tmp lists_dir ext /var/opkg-lists option overlay_root /overlay arch all 100 arch ralink 200 arch ramips 300 arch ramips_24kec 400  这样就解决了软件兼容性的问题，但是前文fanqiang with openwrt+vps里面提到的&amp;rdquo;input/output error&amp;rdquo;问题仍然没有解决。遂升起了自己编译的念头。
源代码编译 要从源代码编译OpenWrt，需要有Linux环境，主要好像是因为Windows下大小写不区分，可能导致异常问题。 于是选了Debian系统，主要是玩OpenWrt时，又淘了一个树莓派（Raspberry Pi）玩，而它的默认系统就是基于Debian，同时最早玩的Ubuntu也是基于Debian的，买的VPS也是基于Debian系统的，so&amp;hellip; 于是到达官网选择i386架构、xfce界面的debian-7.6.0-i386-xfce-CD-1.iso。 通过UltraISO写入到U盘，然后安装到硬盘上，OK。
编译源代码 这个痛苦的过程不想说了 主要是下载Debian上的编译支撑工具，然后通过以下说明进行编译
 OpenWrt Buildroot - 安装 OpenWrt Buildroot - 使用说明 最终结果是，我从下午编译到晚上，还没有编译完成，于是让其继续。第二天起来后，发现网络断了，编译失败。  Image Builder编译 从头开始的自行编译实在hold不住，于是就考虑其它方式，由于OpenWrt的编译选项中，可以将结果进行打包给其它人使用，官网上也有相应的打包的tar.gz2文件可以下载，也就是Image Builder的形式。考虑用它实现，说明如下：
*Image Generator (Image Builder) 下载、解压缩，然后看需要的包，我是将PandoraBox里面所有的包都包含了，然后加上了Python、DNS工具包等。 命令如下：</description>
    </item>
    
    <item>
      <title>fanqiang with openwrt&#43;vps</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-openwrt&#43;vps/</link>
      <pubDate>Tue, 08 Jul 2014 21:27:40 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-openwrt&#43;vps/</guid>
      <description>来由 在上一篇《fanqiang with vpn+chnroutes》中，通过免费的vpn和chnroutes，已经可以成功的翻墙了，后来觉得免费VPN不稳定，又买了一个月的付费vpn；再后来，觉得付费vpn不是共享，服务器上的多了，就又要换服务器，不爽；于是就决定，找个国外的vps主机，自己独享fq带宽！ 找合适的VPS 由于一个人用，不需要太好的，稳定，延时一般就OK，最好比较实惠。 开始时选择了年付$3.99的搬瓦工bandwagonhost（太便宜了啊），但是ping包时，发现丢包不是一般的多，遂放弃 又找到了RamNode，有个年付$12的套餐，而且，然后用5.8折的优惠码，一年不到100￥，还是可以接受的，遂成交。 它最大的好处就是，丢包低于1%，而且有西雅图这种西海岸的机房，对于大陆来说，延时200ms左右，感觉还不错。 由于RamNode只支持PayPal，所以最终也了解了PayPal支持信用卡或者62开头的银联卡（开通网上银行），即可以支付了~
使用VPS架设VPN 这个就不赘述了，网上一搜一大堆，我选择的操作系统是Debian：
 乔大海的《BuyVM OpenVZ VPS Debian安装PPTP VPN》 郭高兴的《VPS上安装PPTP（Xen+OpenVZ）完整教程》 howtogeek的《How to Setup a VPN (PPTP) Server on Debian Linux》 波斯马的《Linux（VPS+Debian）搭建配置VPN（PPTP）服务》 在设置完VPN后，要注意MTU值的问题，否则部分网页打开的很慢或有问题：
 永远的UNIX的《Fedora core 2下建立Poptop服务器以及常见问题》
  路由器+VPN 淘OpenWrt路由器 可以独享VPN上网后，还是不满足啊，因为家里2台电脑，手机还想无线上网，一台一台指定好费事啊 上一篇《fanqiang with vpn+chnroutes》，最后提到，可以用开源的路由器固件，搞定路由器上VPN的问题。 Google了很长时间，锁定了OpenWrt，路由器选择淘宝上别人刷好的Huawei HG255d，基本在￥40-￥60之间。CPU为Ralink RT3052，FLASH容量为16MB，内存容量为32MB DDR。我淘的是硬改内存64MB+散热片，刷了不死uboot的，毕竟没那么多精力折腾。
刷新最新OpenWrt固件 买回来后，淘宝店主刷新的是比较老的OpenWrt-DreamBox 20120828版本，对应的OpenWrt-DreamBox的源软件包地址已经改变，没法下载新软件，就开始折腾，找了半天，由于DreamBox版本比较老，所以换成了比较新的PandoraBox版本，可以到http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/ 下载编译的最新固件，我选择的是最新的20140505版。 不得不说，有了uboot，可以一键刷机，还是比较放心的进行折腾的。在找到目前的固件前，刷新了不少版本，但都没啥问题。
设置路由器+VPN+chnroutes静态路由 这个根据各人情况都不相同，总而言之，最终搞定。
存在问题 一个是VPN拨号后，需要手动添加一下静态路由，不过是自己的VPS架设的VPN，想待多久就待多久，除了掉线，一般也不会下线滴。 另一个是，可能淘的Huawei HG255d有问题，路由器在对文件进行操作时，折腾一段时间后，会出现&amp;rdquo;input/output error&amp;rdquo;问题，怀疑是硬改导致的？ 解决方案就是路由器关电重启解决，不过除了装软件，折腾东东，一般不影响使用，所以也不准备找淘宝店主问这个问题了。
总之，可以开始开心快乐的自由、随意的访问Internet了，so happy~</description>
    </item>
    
    <item>
      <title>fanqiang with vpn&#43;chnroutes</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-vpn&#43;chnroutes/</link>
      <pubDate>Sat, 28 Jun 2014 10:48:47 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-vpn&#43;chnroutes/</guid>
      <description>来由 用goagent这个FQ方案，终于可以上google了，但是因为gfw这个家伙封锁的太厉害的缘故，会出现可用IP为0的现象，结果又断网了。 翻来覆去的太麻烦。只好换招了。 VPN 这两天主要做的就是先找到一些免费的VPN，然后通过VPN直接翻墙。不用再去设置goagent的代理了。缺点是所有流量通过VPN走，国内网站访问慢，但是可以通过路由表调整，下面会介绍。 随便搜索了下，免费的VPN还是很多的，但是免费的午餐，延时、流量等需要能忍受啊。幸好需要访问的国外网站不是很多~
VPN推荐网站:
 免费VPN推荐网 免费VPN资源网  网友推荐:
 rsouls《国内最给力五大免费VPN商家》 oovpn的《十大免费翻墙VPN代理软件推荐》 zq530885040的《八个提供免费VPN账号的网站》  chnroutes 但是VPN的最大缺点是，所有流量全部从VPN走了，这样访问国内网站也从国外绕一圈，自找不自在啊。 幸好，网上的大拿们，开发了一个针对国内IP地址段的路由更新表，通过批处理配置路由表等方式，将国内IP指向本机网关，避免VPN绕行，具体项目在：
 chnroutes 每日更新路由下载  网上其他人的使用  MacTalk的《VPN – 长城内外，惟余莽莽》 markzhang的《Chnroutes的使用（Mac OS X Mavericks）》 ratazzi的《优化 VPN 和 chnroutes》  路由器自动配置 为了避免家里每台电脑都要设置，又有人考虑，直接设置路由器，然后自动fq。 只能说，人的懒惰是天生的啊。 主要思想是将路由器固件更新为开源固件
 DD-WRT OpenWrt Tomato  然后通过
 autoddvpn 进行自动的VPN的FQ方案实施。  具体参考的有：
 北落师门的《在wr841n上刷openwrt并使用openvpn自动VPN》 错乱の年轮的《DD-WRT+Autoddvpn+OpenVPN=智能翻墙路由》 hauy的《配置DD-WRT通过autoddvpn的graceMode自动翻墙(PPTP)》 ntcn的《DD-WRT搭配autoddvpn全自动FQ配置精简教程》 因为我的路由器不匹配，所以没有实验。  通过VPN+chnroutes，目前已经可以轻松的上Goolge、Twitter、Facebook等网站了，挺好的~</description>
    </item>
    
    <item>
      <title>fanqiang with goagent</title>
      <link>http://nivrrex.github.io/post/fanqiang-with-goagent/</link>
      <pubDate>Wed, 25 Jun 2014 21:45:26 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/fanqiang-with-goagent/</guid>
      <description>来由 最近Google被屏蔽的很厉害，想查个东西都要翻来覆去的，灰常麻烦。 刚开始以为一段时间就OK了，就用了临时性的解决方案。 比如：
 使用Bing代替。 搜索效果相比Google还有差距 使用StartPage代替。 相比原版，存在部分结果搜索不到的问题 直接用Google IP进行搜索。 可以使用的IP被飞快的封锁 使用网上的免翻墙镜像网站greatfire。 是个不错的解决方案，但是怕被封锁后还要重新设置 使用网上的免费VPN免费VPN资源。 免费的要么限制流量，要么限制时间，而且免费的基本上速度比较慢 使用google的GAE平台的goagent。 强烈推荐  goagent设置 这个网上教程很多，随便搜索都有好几个，如：
 猫理会的goagent教程详细版 软矿的GoAgent图文设置教程 海盗船博客的2014最新翻墙方法之goagent翻墙教程  软件设置 在搭建好goagent后，就是如何使用它配合浏览器上网了 我常用的浏览器有IE、猎豹、Opera 为统一解决，我的方法是：
 1、猎豹浏览器中安装插件SwitchySharp。然后建立规则，默认直接连接，然后设置需要翻墙的网站清单。设置成功后，导出PAC文件。 2、IE中设置代理服务器，勾选代理服务器，“127.0.0.1 8087”。将“使用自动配置脚本”勾选，然后按格式填入“file://C:\GoAgent\SwitchyPac.pac”。如果有代理后出问题的网站，选“高级”，将对应网站填入“例外”区域内。 3、Opera浏览器：Tools -&amp;gt; Preferences -&amp;gt; Advanced -&amp;gt; Network -&amp;gt; Proxy Servers -&amp;gt; &amp;ldquo;Use automatic proxy configuration&amp;rdquo;，填写“file://C:\GoAgent\SwitchyPac.pac”。 4、IE和Opera都需要安装goagent的证书，否则访问时会出错。 5、可以在这里订阅部分数据。  结 堵不如疏，闭关锁国只能让自己更落伍。 人民总有办法得到自己想知道的东西的，而且通过这种方式得到的信息，反而会倾向于相信。 大多数人使用Google只是想查找自己想要的知识。</description>
    </item>
    
    <item>
      <title>some problems for golang excel update</title>
      <link>http://nivrrex.github.io/post/some-problems-for-golang-excel-update/</link>
      <pubDate>Sun, 15 Jun 2014 17:24:30 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/some-problems-for-golang-excel-update/</guid>
      <description>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见这里 由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。 首字母大小写导致无法外部调用 Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。
GOPATH设置 golang有几个关键环境变量，需要进行设置
 GOROOT : Golang的安装目录，默认为C:\Go GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录 GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows） GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）  我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^
mkdir C:\Go\import mkdir C:\Go\import\src mkdir C:\Go\import\pkg set GOPATH=C:\go\import  Go build无法生成文件 这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^
小结 归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。 Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。 日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</description>
    </item>
    
    <item>
      <title>commonly used software</title>
      <link>http://nivrrex.github.io/post/commonly-used-software/</link>
      <pubDate>Thu, 12 Jun 2014 22:32:51 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/commonly-used-software/</guid>
      <description> 开发工具 Ruby  Ruby Lang Ruby官方网站 RubyInstaller for Windows Ruby的Windows安装打包  Golang  Golang Downloads Golang官方网站 Go Language Resources 非官方的Golang资源收集  GCC MinGW  MinGW Distro TDM-GCC Equation Solution MinGW-builds mingw-w64  GTK+  The GTK+ Project GTK的官方网站 tarnyko GTK 日本人做的GTK静态编译  Tcc  Tiny C Compiler 极简的c语言编译器  经典软件 系统强化  Total Commander Windows下的资源管理工具 Listary Windows下的文件搜索和程序启动工具 Everthing 基于NTFS格式的快速搜索工具 ImDisk 虚拟磁盘工具 SoftPerfect RAM Disk 虚拟磁盘工具  系统美化  MacType Windows下的字体美化工具 Fences Windows下的图标分区优化工具  输入法  rimeime - 中州韻輸入法引擎 很好用的输入法工具，可配置功能较多  编辑器  SciTE 轻量级的程序编辑器 Sublime Text 跨平台、可扩展的程序编辑器 Notepad2 Mod Notepad的替代编辑器  网络  goagent 基于GAE的fan qiang工具 shadowsocks-libev shadowsocks的c语言实现的服务器端,可布置在vps上使用 shadowsocks-windows shadowsocks的windows客户端，可自动更新GFWlist的PAC文件  </description>
    </item>
    
    <item>
      <title>Hello GitHub</title>
      <link>http://nivrrex.github.io/post/hello-github/</link>
      <pubDate>Thu, 12 Jun 2014 19:37:32 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/hello-github/</guid>
      <description>欢迎来到我的GitHub blog！
这是我用Hexo编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。
Git的一些基本命令 git config --global user.name &amp;quot;nivrrex&amp;quot; git config --global user.email nivrrex@gmail.com ssh-keygen -t rsa -C &amp;quot;nivrrex@gmail.com&amp;quot; ssh -T git@github.com -i ./.ssh/id_rsa  更多命令可以到git - 简明指南去查看
Hexo的一些基本命令 npm install hexo-cli -g npm install hexo --save npm install hexo-generator-index --save npm install hexo-generator-archive --save npm install hexo-generator-category --save npm install hexo-generator-tag --save npm install hexo-generator-sitemap --save npm install hexo-generator-feed --save npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save npm install hexo-server --save npm install hexo-deployer-git --save hexo init hexo new [post] &amp;quot;My New Post&amp;quot; hexo server hexo generate hexo deploy  更多文档可以到Hexo docs上查看</description>
    </item>
    
    <item>
      <title>About this blog</title>
      <link>http://nivrrex.github.io/post/about-me/</link>
      <pubDate>Tue, 10 Jun 2014 13:55:26 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/post/about-me/</guid>
      <description>欢迎来到Nivrrex的GitHub blog！
本blog将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。</description>
    </item>
    
  </channel>
</rss>
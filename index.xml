<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nivrrex&#39;s blog</title>
    <link>http://nivrrex.github.io/</link>
    <description>Recent content on Nivrrex&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 15 Nov 2019 23:29:00 +0800</lastBuildDate>
    
	<atom:link href="http://nivrrex.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>crosscompiling for openwrt with golang</title>
      <link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</link>
      <pubDate>Fri, 15 Nov 2019 23:29:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</guid>
      <description>缘来 实验了下nim语言(nimlang)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。
Golang支持的交叉编译平台 amd64 (also known as x86-64) A mature implementation. 386 (x86 or x86-32) Comparable to the amd64 port. arm (ARM) Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports. arm64 (AArch64) Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports. ppc64, ppc64le (64-bit PowerPC big- and little-endian) Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</description>
    </item>
    
    <item>
      <title>crosscompiling for openwrt with nim</title>
      <link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</link>
      <pubDate>Fri, 15 Nov 2019 23:21:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</guid>
      <description>缘来 nim语言(nimlang)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。
Debian系统下下载nim语言 sh -c &amp;#39;printf &amp;#34;deb http://ftp.cn.debian.org/debian/ sid main&amp;#34; &amp;gt; /etc/apt/sources.list.d/sid.list&amp;#39; apt update apt -t sid install nim -y Debian系统下安装gcc等编译环境 apt-get install build-essential 下载对应架构的OpenWRT编译工具链toolchain wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz rm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz 设置环境并进行编译 export PATH=/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:$PATH nim -d:release --opt=size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim 结 就这样，就可以生成对应路由器下的可执行文件啦~</description>
    </item>
    
    <item>
      <title>ubnt er-x use openwrt</title>
      <link>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</link>
      <pubDate>Mon, 09 Jul 2018 20:12:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</guid>
      <description>给UBNT的ER-X刷OpenWrt固件
缘 UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。
于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 https://cokebar.info/archives/664 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。
安装 前期问题 刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。
于是到 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=15243 帖子中和国外的一个帖子中提到的 http://s000.tinyupload.com/index.php?file_id=07741512272586742124 ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：
Request timed out  而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。
恢复官方固件 后来在 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=19800 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：
##这一部分不是帖子的内容，是前期准备工作 #在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下 wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tar tar -xf ER-e50.</description>
    </item>
    
    <item>
      <title>use cmder</title>
      <link>http://nivrrex.github.io/posts/use-cmder/</link>
      <pubDate>Mon, 04 Jun 2018 14:24:00 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/use-cmder/</guid>
      <description>缘来 Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了cmder这个很方便的替代windows自带命令行的好工具，记录一下。
介绍 cmder由3部分组成：
ConEmu ConEmu 是一套 Windows 控制台模拟器 (console emulator)
Clink Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力
msysgit 提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &amp;hellip; 等
安装 安裝 cmder
先到 cmder 官网 http://cmder.net/ 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。
外部链接 具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：
 介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 ) https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx
 Win下必备神器之Cmder https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/
 cmder 一个比cmd强n倍的神器 https://www.jianshu.com/p/7a706c0a3411
  配置 注册Cmder，文档的右键菜单添加Cmder here Cmder.</description>
    </item>
    
    <item>
      <title>change hexo to hugo</title>
      <link>http://nivrrex.github.io/posts/change-hexo-to-hugo/</link>
      <pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/change-hexo-to-hugo/</guid>
      <description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
 A fast and modern static website engine Language:Go License:APL 2.0  目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename 主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio hermit主题
 Hugo Themes Site hugoThemes: All Themes Hugo  安装比较简单：
cd themes git clone https://github.com/Track3/hermit.git themes/hermit 生成页面 hugo new posts/about.md 然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor</description>
    </item>
    
    <item>
      <title>start to use python</title>
      <link>http://nivrrex.github.io/posts/start-to-use-python/</link>
      <pubDate>Mon, 04 Apr 2016 09:05:37 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/start-to-use-python/</guid>
      <description>缘来 最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。
开始 整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。
整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。
Python3 vs Python2 这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。
但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。
print无法输出中文 这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：
import io, sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&amp;#39;utf8&amp;#39;) 相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。
Python VS Ruby 这个题目比较大，只能简单的就第一感觉来说：
Python的好处就是编码样式比较统一，第三方类库超多。 可以关注自己需要解决的问题，不用费心思在语法细节上。Ruby的优势是处理文本效率很高，语法糖很多，用起来很省心。 但是第三方类库和Python相比差距还是比较大。 结 其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。
最终还是选择了Python，而且可能近期都会使用它。</description>
    </item>
    
    <item>
      <title>change editer with sublime text</title>
      <link>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</link>
      <pubDate>Sat, 01 Aug 2015 15:41:45 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</guid>
      <description>来由 本来一直使用的编译器是SciTE，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。 最近看了Golang中国的教学视频，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇Sublime Text 全程指南，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。
Sublime Text安装 首先到Sublime Text的官网下载最新的版本，我下载的是3.3083的portable version版 然后是最重要的事情了，安装Package Control,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。 打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：
import urllib.request,os,hashlib; h = &amp;#39;6f4c264a24d933ce70df5dedcf1dcaee&amp;#39; + &amp;#39;ebe013ee18cced0ef93d5f746d80ef60&amp;#39;; pf = &amp;#39;Package Control.sublime-package&amp;#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &amp;#39;http://packagecontrol.io/&amp;#39; + pf.replace(&amp;#39; &amp;#39;, &amp;#39;%20&amp;#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&amp;#39;Error validating download (got %sinstead of %s), please try manual install&amp;#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &amp;#39;wb&amp;#39; ).</description>
    </item>
    
    <item>
      <title>update debian linux image with backports</title>
      <link>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</link>
      <pubDate>Mon, 27 Jul 2015 22:36:17 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</guid>
      <description>来由 因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。
如何查看Linux版本 共有5种方式，具体如下
cat /etc/*-release lsb_release -a cat /proc/version uname -a #uname -mrs cat /etc/issue 我的Debian更新过，显示是
Debian GNU/Linux 8.1 (jessie) 但是，内核为什么还是
Linux 2.6.32-042stab093.4 i686 好吧，更新，更新！
使用Backports源 对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目
其官方Wiki上面说
Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。
开始更新 更新软件源 首先在apt的sources.list文件中添加Backports源
vi /etc/apt/sources.list 添加如下内容
deb http://ftp.debian.org/debian/ jessie-backports main deb-src http://ftp.debian.org/debian/ jessie-backports main 更新数据
sudo apt-get update #sudo apt-get -t jessie-backports upgrade 搜索并安装linux-image文件 安装aptitude，以便搜索最新的linux-image文件
apt-get install aptitude aptitude search kernel-image 根据搜索出来的内核文件，进行安装，我的是
sudo apt-get -t jessie-backports install linux-image-3.</description>
    </item>
    
    <item>
      <title>fanqiang with dnsmasq</title>
      <link>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</link>
      <pubDate>Sun, 26 Jul 2015 17:51:59 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</guid>
      <description>来由 本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~ DNSmasq安装 我的系统是Debian，直接运行以下命令
sudo apt-get update sudo apt-get install dnsmasq DNSmasq配置 编辑/etc/dnsmasq.conf文件
vi /etc/dnsmasq.conf 修改以下参数
resolv-file=/etc/resolv.conf strict-order listen-address=xxx.xxx.xxx.xxx,127.0.0.1 port=443 cache-size=1024 log-queries 编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器
nameserver 8.8.8.8 nameserver 208.67.222.222 将服务重启即可
/etc/init.d/dnsmasq restart 将DNSmasq加入启动项
sudo vi /etc/rc.local 将以下命令添加进去即可
/etc/init.d/dnsmasq start DNS污染解决方案 OpenWrt-dist上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。 其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，地址
结 这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</description>
    </item>
    
    <item>
      <title>fanqiang with chinadns</title>
      <link>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</link>
      <pubDate>Sun, 26 Jul 2015 12:54:59 +0800</pubDate>
      
      <guid>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</guid>
      <description>来由 用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。
Old解决方案 - FreeRouterV2 以前的解决方案是借用FreeRouterV2的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，如下
安装 首先需要在OpenWRT上安装如下包：
opkg update opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32 配置 然后配置iptables的防火墙策略
vi /etc/firewall.user 添加如下命令
iptables -t mangle -I PREROUTING -p udp --sport 53 -m u32 --u32 &amp;#34;0&amp;amp;0x0F000000=0x05000000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@8&amp;amp;0x810F=0x8000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@12&amp;amp;0xFFFF=0x0000&amp;#34; -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|042442B2|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|0807C62D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|1759053C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|253D369E|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|2E52AE44|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|31027B38|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|364C8701|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|3B1803AD|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|402158A1|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4021632F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4042A3FB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4168CAFC|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|41A0DB71|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|422DFCED|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD63|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD68|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2766|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2771|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D7F66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D9B66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4D04075C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4E10310F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|5D2E0859|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|76053106|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|80797E8B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|9F6A794B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|A9840D67|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BC050460|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BDA31105|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C043C606|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C504040C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CA6A0102|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CAB50755|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CB620741|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CBA1E6AB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CF0C5862|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D0381F2B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1244921|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D155E58A|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1913632|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1DC1EAE|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D35E4293|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D5A9FB23|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8DDBCB6|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8EAB30D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F3B9BB27|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F9812E30|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|FD9D0EA5|&amp;#34; --from 60 --to 180 -j DROP 重启防火墙即可</description>
    </item>
    
  </channel>
</rss>
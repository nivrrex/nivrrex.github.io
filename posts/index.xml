<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Nivrrex&#39;s blog</title>
		<link>http://nivrrex.github.io/posts/</link>
		<description>Recent content in Posts on Nivrrex&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 29 Jan 2023 09:10:00 +0800</lastBuildDate>
		<atom:link href="http://nivrrex.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>use Windows API to set IE proxy</title>
			<link>http://nivrrex.github.io/posts/use-api-to-set-ie-proxy/</link>
			<pubDate>Sun, 29 Jan 2023 09:10:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/use-api-to-set-ie-proxy/</guid>
			<description>使用 Windows API 设置 IE 代理服务器
缘 最近折腾各种代理框架，需要设置 IE 代理服务器。了解有两种方式，注册表和API方式。
注册表方式使用时，偶尔会出现设置异常，无法成功的情况，所以想实验一下API的方式。
通过Google，查到了在 SysTutorials 上，ERIC MA 的一篇文章有相关实现。
因为原先的源代码是C++写的，编译后程序有点大，在原作者基础上用C语言稍微修改了下，控制下二进制大小。代码如下：
源代码 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;windows.h&amp;gt;#include &amp;quot;wininet.h&amp;quot;BOOL SetConnectionOptions(LPCTSTR conn_name,LPCTSTR proxy_full_addr);BOOL DisableConnectionProxy(LPCTSTR conn_name);int main(int argc, char* argv[]){int nRetCode = 0;//set proxyif (argc&amp;lt;2) { printf(&amp;quot;SetProxy Usage:\n\n&amp;quot;);printf(&amp;quot;Examples:\n&amp;quot;);printf(&amp;quot;SetProxy.exe 10.1.1.1:8080 -- set proxy to 10.1.1.1:8080.\n&amp;quot; );printf(&amp;quot;SetProxy.exe \&amp;quot;\&amp;quot; -- disable proxy, set proxy to null.\n&amp;quot; );printf(&amp;quot;\n&amp;quot;);printf(&amp;quot;Version 1.0.0\n&amp;quot;);printf(&amp;quot;Author: Eric Ma &amp;lt;mazq.</description>
			<content type="html"><![CDATA[<p>使用 Windows API 设置 IE 代理服务器</p>
<h3 id="缘">缘</h3>
<p>最近折腾各种代理框架，需要设置 IE 代理服务器。了解有两种方式，注册表和API方式。</p>
<p>注册表方式使用时，偶尔会出现设置异常，无法成功的情况，所以想实验一下API的方式。</p>
<p>通过Google，查到了在 <a href="www.systutorials.com">SysTutorials</a> 上，ERIC MA 的一篇<a href="https://www.systutorials.com/setproxy-%E4%B8%80%E4%B8%AA%E8%AE%BE%E7%BD%AEie%E4%BB%A3%E7%90%86%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/">文章</a>有相关实现。</p>
<p>因为原先的源代码是C++写的，编译后程序有点大，在原作者基础上用C语言稍微修改了下，控制下二进制大小。代码如下：</p>
<h3 id="源代码">源代码</h3>
<pre tabindex="0"><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &quot;wininet.h&quot;

BOOL SetConnectionOptions(LPCTSTR conn_name,LPCTSTR proxy_full_addr);
BOOL DisableConnectionProxy(LPCTSTR conn_name);

int main(int argc, char* argv[])
{
	int nRetCode = 0;
	
	//set proxy
	if (argc&lt;2) { 
		printf(&quot;SetProxy Usage:\n\n&quot;);
		printf(&quot;Examples:\n&quot;);
		printf(&quot;SetProxy.exe 10.1.1.1:8080       -- set proxy to 10.1.1.1:8080.\n&quot; );
		printf(&quot;SetProxy.exe \&quot;\&quot;                  -- disable proxy, set proxy to null.\n&quot; );
		printf(&quot;\n&quot;);
		printf(&quot;Version 1.0.0\n&quot;);
		printf(&quot;Author: Eric Ma &lt;mazq.eric@gmail.com&gt;.\n\n&quot;);
		printf(&quot;Version 1.0.1\n&quot;);
		printf(&quot;Editor: Nivrrex &lt;nivrrex@gmail.com&gt;.&quot;);
		return 1;
	}
	
	const char *connection_name=&quot;&quot;;
	char* proxy_addr=argv[1];
	
	if (SetConnectionOptions(connection_name,proxy_addr)) {
		char msg[100]=&quot;Proxy &quot;;
		if (strlen(proxy_addr)!=0) {
			strcat(msg,&quot;set to &quot;);
			strcat(msg,proxy_addr);
		}
		else {
			DisableConnectionProxy(connection_name);
			strcat(msg,&quot;disabled&quot;);
		}
		printf(&quot;%s\n&quot;,msg);
	}
	return nRetCode;
}

BOOL SetConnectionOptions(LPCTSTR conn_name,LPCTSTR proxy_full_addr)
{
    //conn_name: active connection name. 
    //proxy_full_addr : eg &quot;210.78.22.87:8000&quot;
    INTERNET_PER_CONN_OPTION_LIST list;
    BOOL    bReturn;
    DWORD   dwBufSize = sizeof(list);
    // Fill out list struct.
    list.dwSize = sizeof(list);
    // NULL == LAN, otherwise connectoid name.
    list.pszConnection = conn_name;
    // Set three options.
    list.dwOptionCount = 2;//3;
    list.pOptions = (INTERNET_PER_CONN_OPTION*) malloc (sizeof(INTERNET_PER_CONN_OPTION) * 2/*3*/);
    // Make sure the memory was allocated.
    if(NULL == list.pOptions)
    {
        // Return FALSE if the memory wasn't allocated.
        OutputDebugString(&quot;failed to allocat memory in SetConnectionOptions()&quot;);
        return FALSE;
    }
    // Set flags.
    list.pOptions[0].dwOption = INTERNET_PER_CONN_FLAGS;
    list.pOptions[0].Value.dwValue = PROXY_TYPE_DIRECT |
        PROXY_TYPE_PROXY;
	
    // Set proxy name.
    list.pOptions[1].dwOption = INTERNET_PER_CONN_PROXY_SERVER;
    list.pOptions[1].Value.pszValue = proxy_full_addr;//&quot;http://proxy:80&quot;;
	
	/*
    // Set proxy override.
    list.pOptions[2].dwOption = INTERNET_PER_CONN_PROXY_BYPASS;
    list.pOptions[2].Value.pszValue = &quot;local&quot;;
	*/
	
    // Set the options on the connection.
    bReturn = InternetSetOption(NULL,
        INTERNET_OPTION_PER_CONNECTION_OPTION, &amp;list, dwBufSize);
	
    // Free the allocated memory.
    free(list.pOptions);
	
    InternetSetOption(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
    InternetSetOption(NULL, INTERNET_OPTION_REFRESH , NULL, 0);
    return bReturn;
}


BOOL DisableConnectionProxy(LPCTSTR conn_name)
{
    //conn_name: active connection name. 
    INTERNET_PER_CONN_OPTION_LIST list;
    BOOL    bReturn;
    DWORD   dwBufSize = sizeof(list);
    // Fill out list struct.
    list.dwSize = sizeof(list);
    // NULL == LAN, otherwise connectoid name.
    list.pszConnection = conn_name;
    // Set three options.
    list.dwOptionCount = 1;
    list.pOptions = (INTERNET_PER_CONN_OPTION*) malloc (sizeof(INTERNET_PER_CONN_OPTION) * list.dwOptionCount);
    // Make sure the memory was allocated.
    if(NULL == list.pOptions)
    {
        // Return FALSE if the memory wasn't allocated.
        OutputDebugString(&quot;failed to allocat memory in DisableConnectionProxy()&quot;);
        return FALSE;
    }
    // Set flags.
    list.pOptions[0].dwOption = INTERNET_PER_CONN_FLAGS;
    list.pOptions[0].Value.dwValue = PROXY_TYPE_DIRECT  ;
    // Set the options on the connection.
    bReturn = InternetSetOption(NULL,
        INTERNET_OPTION_PER_CONNECTION_OPTION, &amp;list, dwBufSize);
    // Free the allocated memory.
    free(list.pOptions);
    InternetSetOption(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
    InternetSetOption(NULL, INTERNET_OPTION_REFRESH , NULL, 0);
    return bReturn;
}

</code></pre><p>自带的WININET.H文件</p>
<pre tabindex="0"><code>/*++

Copyright 1995 - 1998 Microsoft Corporation

Module Name:

    wininet.h

Abstract:

    Contains manifests, macros, types and prototypes for Microsoft Windows
    Internet Extensions

--*/

#if !defined(_WININET_)
#define _WININET_


/*
 * Set up Structure Packing to be 4 bytes
 * for all wininet structures
 */

#pragma pack(push, wininet, 4)



#if defined(__cplusplus)
extern &quot;C&quot; {
#endif


#if !defined(_WINX32_)
#define INTERNETAPI DECLSPEC_IMPORT
#define URLCACHEAPI DECLSPEC_IMPORT
#else
#define INTERNETAPI
#define URLCACHEAPI
#endif

#define BOOLAPI INTERNETAPI BOOL WINAPI

//
// internet types
//

typedef LPVOID HINTERNET;
typedef HINTERNET * LPHINTERNET;

typedef WORD INTERNET_PORT;
typedef INTERNET_PORT * LPINTERNET_PORT;

//
// Internet APIs
//

//
// manifests
//

#define INTERNET_INVALID_PORT_NUMBER    0           // use the protocol-specific default

#define INTERNET_DEFAULT_FTP_PORT       21          // default for FTP servers
#define INTERNET_DEFAULT_GOPHER_PORT    70          //    &quot;     &quot;  gopher &quot;
#define INTERNET_DEFAULT_HTTP_PORT      80          //    &quot;     &quot;  HTTP   &quot;
#define INTERNET_DEFAULT_HTTPS_PORT     443         //    &quot;     &quot;  HTTPS  &quot;
#define INTERNET_DEFAULT_SOCKS_PORT     1080        // default for SOCKS firewall servers.


//
// maximum field lengths (arbitrary)
//

#define INTERNET_MAX_HOST_NAME_LENGTH   256
#define INTERNET_MAX_USER_NAME_LENGTH   128
#define INTERNET_MAX_PASSWORD_LENGTH    128
#define INTERNET_MAX_PORT_NUMBER_LENGTH 5           // INTERNET_PORT is unsigned short
#define INTERNET_MAX_PORT_NUMBER_VALUE  65535       // maximum unsigned short value
#define INTERNET_MAX_PATH_LENGTH        2048
#define INTERNET_MAX_SCHEME_LENGTH      32          // longest protocol name length
#define INTERNET_MAX_URL_LENGTH         (INTERNET_MAX_SCHEME_LENGTH \
                                        + sizeof(&quot;://&quot;) \
                                        + INTERNET_MAX_PATH_LENGTH)

//
// values returned by InternetQueryOption() with INTERNET_OPTION_KEEP_CONNECTION:
//

#define INTERNET_KEEP_ALIVE_UNKNOWN     ((DWORD)-1)
#define INTERNET_KEEP_ALIVE_ENABLED     1
#define INTERNET_KEEP_ALIVE_DISABLED    0




#define INTERNET_PER_CONN_FLAGS 1
#define INTERNET_PER_CONN_PROXY_SERVER 2
#define INTERNET_PER_CONN_PROXY_BYPASS 3
#define INTERNET_PER_CONN_AUTOCONFIG_URL 4
#define INTERNET_PER_CONN_AUTODISCOVERY_FLAGS 5




//
// PER_CONN_FLAGS
//
#define PROXY_TYPE_DIRECT 0x00000001 // direct to net
#define PROXY_TYPE_PROXY 0x00000002 // via named proxy
#define PROXY_TYPE_AUTO_PROXY_URL 0x00000004 // autoproxy URL
#define PROXY_TYPE_AUTO_DETECT 0x00000008 // use autoproxy detection

#define INTERNET_OPTION_PER_CONNECTION_OPTION 75

typedef struct {
DWORD dwOption; // option to be queried or set
union {
DWORD dwValue; // dword value for the option
LPCTSTR pszValue; // pointer to string value for the option
FILETIME ftValue; // file-time value for the option
} Value;
} INTERNET_PER_CONN_OPTION, * LPINTERNET_PER_CONN_OPTION;

typedef struct {
DWORD dwSize; // size of the INTERNET_PER_CONN_OPTION_LIST struct
LPCTSTR pszConnection; // connection name to set/query options
DWORD dwOptionCount; // number of options to set/query
DWORD dwOptionError; // on error, which option failed
LPINTERNET_PER_CONN_OPTION pOptions;
// array of options to set/query
} INTERNET_PER_CONN_OPTION_LIST, * LPINTERNET_PER_CONN_OPTION_LIST;








//
// Options used in INTERNET_PER_CONN_OPTON struct
//
#define INTERNET_PER_CONN_FLAGS 1
#define INTERNET_PER_CONN_PROXY_SERVER 2
#define INTERNET_PER_CONN_PROXY_BYPASS 3
#define INTERNET_PER_CONN_AUTOCONFIG_URL 4
#define INTERNET_PER_CONN_AUTODISCOVERY_FLAGS 5


//
// flags returned by InternetQueryOption() with INTERNET_OPTION_REQUEST_FLAGS
//

#define INTERNET_REQFLAG_FROM_CACHE     0x00000001  // response came from cache
#define INTERNET_REQFLAG_ASYNC          0x00000002  // request was made asynchronously
#define INTERNET_REQFLAG_VIA_PROXY      0x00000004  // request was made via a proxy
#define INTERNET_REQFLAG_NO_HEADERS     0x00000008  // orginal response contained no headers
#define INTERNET_REQFLAG_PASSIVE        0x00000010  // FTP: passive-mode connection
#define INTERNET_REQFLAG_CACHE_WRITE_DISABLED 0x00000040  // HTTPS: this request not cacheable

//
// flags common to open functions (not InternetOpen()):
//

#define INTERNET_FLAG_RELOAD            0x80000000  // retrieve the original item

//
// flags for InternetOpenUrl():
//

#define INTERNET_FLAG_RAW_DATA          0x40000000  // FTP/gopher find: receive the item as raw (structured) data
#define INTERNET_FLAG_EXISTING_CONNECT  0x20000000  // FTP: use existing InternetConnect handle for server if possible

//
// flags for InternetOpen():
//

#define INTERNET_FLAG_ASYNC             0x10000000  // this request is asynchronous (where supported)

//
// protocol-specific flags:
//

#define INTERNET_FLAG_PASSIVE           0x08000000  // used for FTP connections

//
// additional cache flags
//

#define INTERNET_FLAG_NO_CACHE_WRITE    0x04000000  // don't write this item to the cache
#define INTERNET_FLAG_DONT_CACHE        INTERNET_FLAG_NO_CACHE_WRITE
#define INTERNET_FLAG_MAKE_PERSISTENT   0x02000000  // make this item persistent in cache
#define INTERNET_FLAG_FROM_CACHE        0x01000000  // use offline semantics
#define INTERNET_FLAG_OFFLINE           INTERNET_FLAG_FROM_CACHE

//
// additional flags
//

#define INTERNET_FLAG_SECURE            0x00800000  // use PCT/SSL if applicable (HTTP)
#define INTERNET_FLAG_KEEP_CONNECTION   0x00400000  // use keep-alive semantics
#define INTERNET_FLAG_NO_AUTO_REDIRECT  0x00200000  // don't handle redirections automatically
#define INTERNET_FLAG_READ_PREFETCH     0x00100000  // do background read prefetch
#define INTERNET_FLAG_NO_COOKIES        0x00080000  // no automatic cookie handling
#define INTERNET_FLAG_NO_AUTH           0x00040000  // no automatic authentication handling
#define INTERNET_FLAG_CACHE_IF_NET_FAIL 0x00010000  // return cache file if net request fails

//
// Security Ignore Flags, Allow HttpOpenRequest to overide
//  Secure Channel (SSL/PCT) failures of the following types.
//

#define INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP   0x00008000 // ex: https:// to http://
#define INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS  0x00004000 // ex: http:// to https://
#define INTERNET_FLAG_IGNORE_CERT_DATE_INVALID  0x00002000 // expired X509 Cert.
#define INTERNET_FLAG_IGNORE_CERT_CN_INVALID    0x00001000 // bad common name in X509 Cert.

//
// more caching flags
//

#define INTERNET_FLAG_RESYNCHRONIZE     0x00000800  // asking wininet to update an item if it is newer
#define INTERNET_FLAG_HYPERLINK         0x00000400  // asking wininet to do hyperlinking semantic which works right for scripts
#define INTERNET_FLAG_NO_UI             0x00000200  // no cookie popup
#define INTERNET_FLAG_PRAGMA_NOCACHE    0x00000100  // asking wininet to add &quot;pragma: no-cache&quot;
#define INTERNET_FLAG_CACHE_ASYNC       0x00000080  // ok to perform lazy cache-write
#define INTERNET_FLAG_FORMS_SUBMIT      0x00000040  // this is a forms submit
#define INTERNET_FLAG_NEED_FILE         0x00000010  // need a file for this request
#define INTERNET_FLAG_MUST_CACHE_REQUEST INTERNET_FLAG_NEED_FILE

//
// flags for FTP
//

#define INTERNET_FLAG_TRANSFER_ASCII    FTP_TRANSFER_TYPE_ASCII     // 0x00000001
#define INTERNET_FLAG_TRANSFER_BINARY   FTP_TRANSFER_TYPE_BINARY    // 0x00000002

//
// flags field masks
//

#define SECURITY_INTERNET_MASK  (INTERNET_FLAG_IGNORE_CERT_CN_INVALID    |  \
                                 INTERNET_FLAG_IGNORE_CERT_DATE_INVALID  |  \
                                 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS  |  \
                                 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP   )

#define INTERNET_FLAGS_MASK     (INTERNET_FLAG_RELOAD               \
                                | INTERNET_FLAG_RAW_DATA            \
                                | INTERNET_FLAG_EXISTING_CONNECT    \
                                | INTERNET_FLAG_ASYNC               \
                                | INTERNET_FLAG_PASSIVE             \
                                | INTERNET_FLAG_NO_CACHE_WRITE      \
                                | INTERNET_FLAG_MAKE_PERSISTENT     \
                                | INTERNET_FLAG_FROM_CACHE          \
                                | INTERNET_FLAG_SECURE              \
                                | INTERNET_FLAG_KEEP_CONNECTION     \
                                | INTERNET_FLAG_NO_AUTO_REDIRECT    \
                                | INTERNET_FLAG_READ_PREFETCH       \
                                | INTERNET_FLAG_NO_COOKIES          \
                                | INTERNET_FLAG_NO_AUTH             \
                                | INTERNET_FLAG_CACHE_IF_NET_FAIL   \
                                | SECURITY_INTERNET_MASK            \
                                | INTERNET_FLAG_RESYNCHRONIZE       \
                                | INTERNET_FLAG_HYPERLINK           \
                                | INTERNET_FLAG_NO_UI               \
                                | INTERNET_FLAG_PRAGMA_NOCACHE      \
                                | INTERNET_FLAG_CACHE_ASYNC         \
                                | INTERNET_FLAG_FORMS_SUBMIT        \
                                | INTERNET_FLAG_NEED_FILE           \
                                | INTERNET_FLAG_TRANSFER_BINARY     \
                                | INTERNET_FLAG_TRANSFER_ASCII      \
                                )

#define INTERNET_ERROR_MASK_INSERT_CDROM                    0x1

#define INTERNET_OPTIONS_MASK   (~INTERNET_FLAGS_MASK)

//
// common per-API flags (new APIs)
//

#define WININET_API_FLAG_ASYNC          0x00000001  // force async operation
#define WININET_API_FLAG_SYNC           0x00000004  // force sync operation
#define WININET_API_FLAG_USE_CONTEXT    0x00000008  // use value supplied in dwContext (even if 0)

//
// INTERNET_NO_CALLBACK - if this value is presented as the dwContext parameter
// then no call-backs will be made for that API
//

#define INTERNET_NO_CALLBACK            0

//
// structures/types
//

//
// INTERNET_SCHEME - enumerated URL scheme type
//

typedef enum {
    INTERNET_SCHEME_PARTIAL = -2,
    INTERNET_SCHEME_UNKNOWN = -1,
    INTERNET_SCHEME_DEFAULT = 0,
    INTERNET_SCHEME_FTP,
    INTERNET_SCHEME_GOPHER,
    INTERNET_SCHEME_HTTP,
    INTERNET_SCHEME_HTTPS,
    INTERNET_SCHEME_FILE,
    INTERNET_SCHEME_NEWS,
    INTERNET_SCHEME_MAILTO,
    INTERNET_SCHEME_SOCKS,
    INTERNET_SCHEME_FIRST = INTERNET_SCHEME_FTP,
    INTERNET_SCHEME_LAST = INTERNET_SCHEME_SOCKS
} INTERNET_SCHEME, * LPINTERNET_SCHEME;

//
// INTERNET_ASYNC_RESULT - this structure is returned to the application via
// the callback with INTERNET_STATUS_REQUEST_COMPLETE. It is not sufficient to
// just return the result of the async operation. If the API failed then the
// app cannot call GetLastError() because the thread context will be incorrect.
// Both the value returned by the async API and any resultant error code are
// made available. The app need not check dwError if dwResult indicates that
// the API succeeded (in this case dwError will be ERROR_SUCCESS)
//

typedef struct {

    //
    // dwResult - the HINTERNET, DWORD or BOOL return code from an async API
    //

    DWORD dwResult;

    //
    // dwError - the error code if the API failed
    //

    DWORD dwError;
} INTERNET_ASYNC_RESULT, * LPINTERNET_ASYNC_RESULT;


//
// INTERNET_PROXY_INFO - structure supplied with INTERNET_OPTION_PROXY to get/
// set proxy information on a InternetOpen() handle
//

typedef struct {

    //
    // dwAccessType - INTERNET_OPEN_TYPE_DIRECT, INTERNET_OPEN_TYPE_PROXY, or
    // INTERNET_OPEN_TYPE_PRECONFIG (set only)
    //

    DWORD dwAccessType;

    //
    // lpszProxy - proxy server list
    //

    LPCTSTR lpszProxy;

    //
    // lpszProxyBypass - proxy bypass list
    //

    LPCTSTR lpszProxyBypass;
} INTERNET_PROXY_INFO, * LPINTERNET_PROXY_INFO;

//
// INTERNET_VERSION_INFO - version information returned via
// InternetQueryOption(..., INTERNET_OPTION_VERSION, ...)
//

typedef struct {
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
} INTERNET_VERSION_INFO, * LPINTERNET_VERSION_INFO;

//
// HTTP_VERSION_INFO - query or set global HTTP version (1.0 or 1.1)
//

typedef struct {
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
} HTTP_VERSION_INFO, * LPHTTP_VERSION_INFO;

//
// INTERNET_CONNECTED_INFO - information used to set the global connected state
//

typedef struct {

    //
    // dwConnectedState - new connected/disconnected state.
    // See INTERNET_STATE_CONNECTED, etc.
    //

    DWORD dwConnectedState;

    //
    // dwFlags - flags controlling connected-&gt;disconnected (or disconnected-&gt;
    // connected) transition. See below
    //

    DWORD dwFlags;
} INTERNET_CONNECTED_INFO, * LPINTERNET_CONNECTED_INFO;


//
// flags for INTERNET_CONNECTED_INFO dwFlags
//

//
// ISO_FORCE_DISCONNECTED - if set when putting Wininet into disconnected mode,
// all outstanding requests will be aborted with a cancelled error
//

#define ISO_FORCE_DISCONNECTED  0x00000001


//
// URL_COMPONENTS - the constituent parts of an URL. Used in InternetCrackUrl()
// and InternetCreateUrl()
//
// For InternetCrackUrl(), if a pointer field and its corresponding length field
// are both 0 then that component is not returned. If the pointer field is NULL
// but the length field is not zero, then both the pointer and length fields are
// returned if both pointer and corresponding length fields are non-zero then
// the pointer field points to a buffer where the component is copied. The
// component may be un-escaped, depending on dwFlags
//
// For InternetCreateUrl(), the pointer fields should be NULL if the component
// is not required. If the corresponding length field is zero then the pointer
// field is the address of a zero-terminated string. If the length field is not
// zero then it is the string length of the corresponding pointer field
//

typedef struct {
    DWORD   dwStructSize;       // size of this structure. Used in version check
    LPSTR   lpszScheme;         // pointer to scheme name
    DWORD   dwSchemeLength;     // length of scheme name
    INTERNET_SCHEME nScheme;    // enumerated scheme type (if known)
    LPSTR   lpszHostName;       // pointer to host name
    DWORD   dwHostNameLength;   // length of host name
    INTERNET_PORT nPort;        // converted port number
    LPSTR   lpszUserName;       // pointer to user name
    DWORD   dwUserNameLength;   // length of user name
    LPSTR   lpszPassword;       // pointer to password
    DWORD   dwPasswordLength;   // length of password
    LPSTR   lpszUrlPath;        // pointer to URL-path
    DWORD   dwUrlPathLength;    // length of URL-path
    LPSTR   lpszExtraInfo;      // pointer to extra information (e.g. ?foo or #foo)
    DWORD   dwExtraInfoLength;  // length of extra information
} URL_COMPONENTSA, * LPURL_COMPONENTSA;
typedef struct {
    DWORD   dwStructSize;       // size of this structure. Used in version check
    LPWSTR  lpszScheme;         // pointer to scheme name
    DWORD   dwSchemeLength;     // length of scheme name
    INTERNET_SCHEME nScheme;    // enumerated scheme type (if known)
    LPWSTR  lpszHostName;       // pointer to host name
    DWORD   dwHostNameLength;   // length of host name
    INTERNET_PORT nPort;        // converted port number
    LPWSTR  lpszUserName;       // pointer to user name
    DWORD   dwUserNameLength;   // length of user name
    LPWSTR  lpszPassword;       // pointer to password
    DWORD   dwPasswordLength;   // length of password
    LPWSTR  lpszUrlPath;        // pointer to URL-path
    DWORD   dwUrlPathLength;    // length of URL-path
    LPWSTR  lpszExtraInfo;      // pointer to extra information (e.g. ?foo or #foo)
    DWORD   dwExtraInfoLength;  // length of extra information
} URL_COMPONENTSW, * LPURL_COMPONENTSW;
#ifdef UNICODE
typedef URL_COMPONENTSW URL_COMPONENTS;
typedef LPURL_COMPONENTSW LPURL_COMPONENTS;
#else
typedef URL_COMPONENTSA URL_COMPONENTS;
typedef LPURL_COMPONENTSA LPURL_COMPONENTS;
#endif // UNICODE


//
// INTERNET_CERTIFICATE_INFO lpBuffer - contains the certificate returned from
// the server
//

typedef struct {

    //
    // ftExpiry - date the certificate expires.
    //

    FILETIME ftExpiry;

    //
    // ftStart - date the certificate becomes valid.
    //

    FILETIME ftStart;

    //
    // lpszSubjectInfo - the name of organization, site, and server
    //   the cert. was issued for.
    //

    LPTSTR lpszSubjectInfo;

    //
    // lpszIssuerInfo - the name of orgainzation, site, and server
    //   the cert was issues by.
    //

    LPTSTR lpszIssuerInfo;

    //
    // lpszProtocolName - the name of the protocol used to provide the secure
    //   connection.
    //

    LPTSTR lpszProtocolName;

    //
    // lpszSignatureAlgName - the name of the algorithm used for signing
    //  the certificate.
    //

    LPTSTR lpszSignatureAlgName;

    //
    // lpszEncryptionAlgName - the name of the algorithm used for
    //  doing encryption over the secure channel (SSL/PCT) connection.
    //

    LPTSTR lpszEncryptionAlgName;

    //
    // dwKeySize - size of the key.
    //

    DWORD dwKeySize;

} INTERNET_CERTIFICATE_INFO, * LPINTERNET_CERTIFICATE_INFO;


//
// INTERNET_BUFFERS - combines headers and data. May be chained for e.g. file
// upload or scatter/gather operations. For chunked read/write, lpcszHeader
// contains the chunked-ext
//

typedef struct _INTERNET_BUFFERSA {
    DWORD dwStructSize;                 // used for API versioning. Set to sizeof(INTERNET_BUFFERS)
    struct _INTERNET_BUFFERSA * Next;   // chain of buffers
    LPCSTR   lpcszHeader;               // pointer to headers (may be NULL)
    DWORD dwHeadersLength;              // length of headers if not NULL
    DWORD dwHeadersTotal;               // size of headers if not enough buffer
    LPVOID lpvBuffer;                   // pointer to data buffer (may be NULL)
    DWORD dwBufferLength;               // length of data buffer if not NULL
    DWORD dwBufferTotal;                // total size of chunk, or content-length if not chunked
    DWORD dwOffsetLow;                  // used for read-ranges (only used in HttpSendRequest2)
    DWORD dwOffsetHigh;
} INTERNET_BUFFERSA, * LPINTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW {
    DWORD dwStructSize;                 // used for API versioning. Set to sizeof(INTERNET_BUFFERS)
    struct _INTERNET_BUFFERSW * Next;   // chain of buffers
    LPCWSTR  lpcszHeader;               // pointer to headers (may be NULL)
    DWORD dwHeadersLength;              // length of headers if not NULL
    DWORD dwHeadersTotal;               // size of headers if not enough buffer
    LPVOID lpvBuffer;                   // pointer to data buffer (may be NULL)
    DWORD dwBufferLength;               // length of data buffer if not NULL
    DWORD dwBufferTotal;                // total size of chunk, or content-length if not chunked
    DWORD dwOffsetLow;                  // used for read-ranges (only used in HttpSendRequest2)
    DWORD dwOffsetHigh;
} INTERNET_BUFFERSW, * LPINTERNET_BUFFERSW;
#ifdef UNICODE
typedef INTERNET_BUFFERSW INTERNET_BUFFERS;
typedef LPINTERNET_BUFFERSW LPINTERNET_BUFFERS;
#else
typedef INTERNET_BUFFERSA INTERNET_BUFFERS;
typedef LPINTERNET_BUFFERSA LPINTERNET_BUFFERS;
#endif // UNICODE

//
// prototypes
//

BOOLAPI
InternetTimeFromSystemTime(
    IN  CONST SYSTEMTIME *pst,  // input GMT time
    IN  DWORD dwRFC,            // RFC format
    OUT LPSTR lpszTime,         // output string buffer
    IN  DWORD cbTime            // output buffer size
    );

//
// constants for InternetTimeFromSystemTime
//

#define INTERNET_RFC1123_FORMAT     0
#define INTERNET_RFC1123_BUFSIZE   30

BOOLAPI
InternetTimeToSystemTime(
    IN  LPCSTR lpszTime,         // NULL terminated string
    OUT SYSTEMTIME *pst,         // output in GMT time
    IN  DWORD dwReserved
    );


BOOLAPI
InternetCrackUrlA(
    IN LPCSTR lpszUrl,
    IN DWORD dwUrlLength,
    IN DWORD dwFlags,
    IN OUT LPURL_COMPONENTSA lpUrlComponents
    );
BOOLAPI
InternetCrackUrlW(
    IN LPCWSTR lpszUrl,
    IN DWORD dwUrlLength,
    IN DWORD dwFlags,
    IN OUT LPURL_COMPONENTSW lpUrlComponents
    );
#ifdef UNICODE
#define InternetCrackUrl  InternetCrackUrlW
#else
#define InternetCrackUrl  InternetCrackUrlA
#endif // !UNICODE

BOOLAPI
InternetCreateUrlA(
    IN LPURL_COMPONENTSA lpUrlComponents,
    IN DWORD dwFlags,
    OUT LPSTR lpszUrl,
    IN OUT LPDWORD lpdwUrlLength
    );
BOOLAPI
InternetCreateUrlW(
    IN LPURL_COMPONENTSW lpUrlComponents,
    IN DWORD dwFlags,
    OUT LPWSTR lpszUrl,
    IN OUT LPDWORD lpdwUrlLength
    );
#ifdef UNICODE
#define InternetCreateUrl  InternetCreateUrlW
#else
#define InternetCreateUrl  InternetCreateUrlA
#endif // !UNICODE

BOOLAPI
InternetCanonicalizeUrlA(
    IN LPCSTR lpszUrl,
    OUT LPSTR lpszBuffer,
    IN OUT LPDWORD lpdwBufferLength,
    IN DWORD dwFlags
    );
BOOLAPI
InternetCanonicalizeUrlW(
    IN LPCWSTR lpszUrl,
    OUT LPWSTR lpszBuffer,
    IN OUT LPDWORD lpdwBufferLength,
    IN DWORD dwFlags
    );
#ifdef UNICODE
#define InternetCanonicalizeUrl  InternetCanonicalizeUrlW
#else
#define InternetCanonicalizeUrl  InternetCanonicalizeUrlA
#endif // !UNICODE

BOOLAPI
InternetCombineUrlA(
    IN LPCSTR lpszBaseUrl,
    IN LPCSTR lpszRelativeUrl,
    OUT LPSTR lpszBuffer,
    IN OUT LPDWORD lpdwBufferLength,
    IN DWORD dwFlags
    );
BOOLAPI
InternetCombineUrlW(
    IN LPCWSTR lpszBaseUrl,
    IN LPCWSTR lpszRelativeUrl,
    OUT LPWSTR lpszBuffer,
    IN OUT LPDWORD lpdwBufferLength,
    IN DWORD dwFlags
    );
#ifdef UNICODE
#define InternetCombineUrl  InternetCombineUrlW
#else
#define InternetCombineUrl  InternetCombineUrlA
#endif // !UNICODE

//
// flags for InternetCrackUrl() and InternetCreateUrl()
//

#define ICU_ESCAPE      0x80000000  // (un)escape URL characters
#define ICU_USERNAME    0x40000000  // use internal username &amp; password

//
// flags for InternetCanonicalizeUrl() and InternetCombineUrl()
//

#define ICU_NO_ENCODE   0x20000000  // Don't convert unsafe characters to escape sequence
#define ICU_DECODE      0x10000000  // Convert %XX escape sequences to characters
#define ICU_NO_META     0x08000000  // Don't convert .. etc. meta path sequences
#define ICU_ENCODE_SPACES_ONLY 0x04000000  // Encode spaces only
#define ICU_BROWSER_MODE 0x02000000 // Special encode/decode rules for browser

INTERNETAPI
HINTERNET
WINAPI
InternetOpenA(
    IN LPCSTR lpszAgent,
    IN DWORD dwAccessType,
    IN LPCSTR lpszProxy OPTIONAL,
    IN LPCSTR lpszProxyBypass OPTIONAL,
    IN DWORD dwFlags
    );
INTERNETAPI
HINTERNET
WINAPI
InternetOpenW(
    IN LPCWSTR lpszAgent,
    IN DWORD dwAccessType,
    IN LPCWSTR lpszProxy OPTIONAL,
    IN LPCWSTR lpszProxyBypass OPTIONAL,
    IN DWORD dwFlags
    );
#ifdef UNICODE
#define InternetOpen  InternetOpenW
#else
#define InternetOpen  InternetOpenA
#endif // !UNICODE

//
// access types for InternetOpen()
//

#define INTERNET_OPEN_TYPE_PRECONFIG                    0   // use registry configuration
#define INTERNET_OPEN_TYPE_DIRECT                       1   // direct to net
#define INTERNET_OPEN_TYPE_PROXY                        3   // via named proxy
#define INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY  4   // prevent using java/script/INS

//
// old names for access types
//

#define PRE_CONFIG_INTERNET_ACCESS  INTERNET_OPEN_TYPE_PRECONFIG
#define LOCAL_INTERNET_ACCESS       INTERNET_OPEN_TYPE_DIRECT
#define CERN_PROXY_INTERNET_ACCESS  INTERNET_OPEN_TYPE_PROXY

BOOLAPI
InternetCloseHandle(
    IN HINTERNET hInternet
    );

INTERNETAPI
HINTERNET
WINAPI
InternetConnectA(
    IN HINTERNET hInternet,
    IN LPCSTR lpszServerName,
    IN INTERNET_PORT nServerPort,
    IN LPCSTR lpszUserName OPTIONAL,
    IN LPCSTR lpszPassword OPTIONAL,
    IN DWORD dwService,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
InternetConnectW(
    IN HINTERNET hInternet,
    IN LPCWSTR lpszServerName,
    IN INTERNET_PORT nServerPort,
    IN LPCWSTR lpszUserName OPTIONAL,
    IN LPCWSTR lpszPassword OPTIONAL,
    IN DWORD dwService,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define InternetConnect  InternetConnectW
#else
#define InternetConnect  InternetConnectA
#endif // !UNICODE

//
// service types for InternetConnect()
//

#define INTERNET_SERVICE_URL    0
#define INTERNET_SERVICE_FTP    1
#define INTERNET_SERVICE_GOPHER 2
#define INTERNET_SERVICE_HTTP   3

//
// InternetConnectUrl() - a macro which allows you to specify an URL instead of
// the component parts to InternetConnect(). If any API which uses the returned
// connect handle specifies a NULL path then the URL-path part of the URL
// specified in InternetConnectUrl() will be used
//

#define InternetConnectUrl(hInternet, lpszUrl, dwFlags, dwContext) \
    InternetConnect(hInternet,                      \
                    lpszUrl,                        \
                    INTERNET_INVALID_PORT_NUMBER,   \
                    NULL,                           \
                    NULL,                           \
                    INTERNET_SERVICE_URL,           \
                    dwFlags,                        \
                    dwContext                       \
                    )

INTERNETAPI
HINTERNET
WINAPI
InternetOpenUrlA(
    IN HINTERNET hInternet,
    IN LPCSTR lpszUrl,
    IN LPCSTR lpszHeaders OPTIONAL,
    IN DWORD dwHeadersLength,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
InternetOpenUrlW(
    IN HINTERNET hInternet,
    IN LPCWSTR lpszUrl,
    IN LPCWSTR lpszHeaders OPTIONAL,
    IN DWORD dwHeadersLength,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define InternetOpenUrl  InternetOpenUrlW
#else
#define InternetOpenUrl  InternetOpenUrlA
#endif // !UNICODE

BOOLAPI
InternetReadFile(
    IN HINTERNET hFile,
    IN LPVOID lpBuffer,
    IN DWORD dwNumberOfBytesToRead,
    OUT LPDWORD lpdwNumberOfBytesRead
    );

INTERNETAPI
BOOL
WINAPI
InternetReadFileExA(
    IN HINTERNET hFile,
    OUT LPINTERNET_BUFFERSA lpBuffersOut,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
BOOL
WINAPI
InternetReadFileExW(
    IN HINTERNET hFile,
    OUT LPINTERNET_BUFFERSW lpBuffersOut,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define InternetReadFileEx  InternetReadFileExW
#else
#define InternetReadFileEx  InternetReadFileExA
#endif // !UNICODE

//
// flags for InternetReadFileEx()
//

#define IRF_ASYNC       WININET_API_FLAG_ASYNC
#define IRF_SYNC        WININET_API_FLAG_SYNC
#define IRF_USE_CONTEXT WININET_API_FLAG_USE_CONTEXT
#define IRF_NO_WAIT     0x00000008

INTERNETAPI
DWORD
WINAPI
InternetSetFilePointer(
    IN HINTERNET hFile,
    IN LONG  lDistanceToMove,
    IN PVOID pReserved,
    IN DWORD dwMoveMethod,
    IN DWORD dwContext
    );

BOOLAPI
InternetWriteFile(
    IN HINTERNET hFile,
    IN LPCVOID lpBuffer,
    IN DWORD dwNumberOfBytesToWrite,
    OUT LPDWORD lpdwNumberOfBytesWritten
    );


BOOLAPI
InternetQueryDataAvailable(
    IN HINTERNET hFile,
    OUT LPDWORD lpdwNumberOfBytesAvailable OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );

BOOLAPI
InternetFindNextFileA(
    IN HINTERNET hFind,
    OUT LPVOID lpvFindData
    );
BOOLAPI
InternetFindNextFileW(
    IN HINTERNET hFind,
    OUT LPVOID lpvFindData
    );
#ifdef UNICODE
#define InternetFindNextFile  InternetFindNextFileW
#else
#define InternetFindNextFile  InternetFindNextFileA
#endif // !UNICODE

BOOLAPI
InternetQueryOptionA(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    OUT LPVOID lpBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
BOOLAPI
InternetQueryOptionW(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    OUT LPVOID lpBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
#ifdef UNICODE
#define InternetQueryOption  InternetQueryOptionW
#else
#define InternetQueryOption  InternetQueryOptionA
#endif // !UNICODE

BOOLAPI
InternetSetOptionA(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    IN LPVOID lpBuffer,
    IN DWORD dwBufferLength
    );
BOOLAPI
InternetSetOptionW(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    IN LPVOID lpBuffer,
    IN DWORD dwBufferLength
    );
#ifdef UNICODE
#define InternetSetOption  InternetSetOptionW
#else
#define InternetSetOption  InternetSetOptionA
#endif // !UNICODE

BOOLAPI
InternetSetOptionExA(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    IN LPVOID lpBuffer,
    IN DWORD dwBufferLength,
    IN DWORD dwFlags
    );
BOOLAPI
InternetSetOptionExW(
    IN HINTERNET hInternet OPTIONAL,
    IN DWORD dwOption,
    IN LPVOID lpBuffer,
    IN DWORD dwBufferLength,
    IN DWORD dwFlags
    );
#ifdef UNICODE
#define InternetSetOptionEx  InternetSetOptionExW
#else
#define InternetSetOptionEx  InternetSetOptionExA
#endif // !UNICODE

BOOLAPI
InternetLockRequestFile(
    IN  HINTERNET hInternet,
    OUT HANDLE * lphLockRequestInfo
    );

BOOLAPI
InternetUnlockRequestFile(
    IN HANDLE hLockRequestInfo
    );

//
// flags for InternetSetOptionEx()
//

#define ISO_GLOBAL      0x00000001  // modify option globally
#define ISO_REGISTRY    0x00000002  // write option to registry (where applicable)

#define ISO_VALID_FLAGS (ISO_GLOBAL | ISO_REGISTRY)

//
// options manifests for Internet{Query|Set}Option
//

#define INTERNET_OPTION_CALLBACK                1
#define INTERNET_OPTION_CONNECT_TIMEOUT         2
#define INTERNET_OPTION_CONNECT_RETRIES         3
#define INTERNET_OPTION_CONNECT_BACKOFF         4
#define INTERNET_OPTION_SEND_TIMEOUT            5
#define INTERNET_OPTION_CONTROL_SEND_TIMEOUT    INTERNET_OPTION_SEND_TIMEOUT
#define INTERNET_OPTION_RECEIVE_TIMEOUT         6
#define INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT INTERNET_OPTION_RECEIVE_TIMEOUT
#define INTERNET_OPTION_DATA_SEND_TIMEOUT       7
#define INTERNET_OPTION_DATA_RECEIVE_TIMEOUT    8
#define INTERNET_OPTION_HANDLE_TYPE             9
#define INTERNET_OPTION_LISTEN_TIMEOUT          11
#define INTERNET_OPTION_READ_BUFFER_SIZE        12
#define INTERNET_OPTION_WRITE_BUFFER_SIZE       13

#define INTERNET_OPTION_ASYNC_ID                15
#define INTERNET_OPTION_ASYNC_PRIORITY          16

#define INTERNET_OPTION_PARENT_HANDLE           21
#define INTERNET_OPTION_KEEP_CONNECTION         22
#define INTERNET_OPTION_REQUEST_FLAGS           23
#define INTERNET_OPTION_EXTENDED_ERROR          24

#define INTERNET_OPTION_OFFLINE_MODE            26
#define INTERNET_OPTION_CACHE_STREAM_HANDLE     27
#define INTERNET_OPTION_USERNAME                28
#define INTERNET_OPTION_PASSWORD                29
#define INTERNET_OPTION_ASYNC                   30
#define INTERNET_OPTION_SECURITY_FLAGS          31
#define INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT 32
#define INTERNET_OPTION_DATAFILE_NAME           33
#define INTERNET_OPTION_URL                     34
#define INTERNET_OPTION_SECURITY_CERTIFICATE    35
#define INTERNET_OPTION_SECURITY_KEY_BITNESS    36
#define INTERNET_OPTION_REFRESH                 37
#define INTERNET_OPTION_PROXY                   38
#define INTERNET_OPTION_SETTINGS_CHANGED        39
#define INTERNET_OPTION_VERSION                 40
#define INTERNET_OPTION_USER_AGENT              41
#define INTERNET_OPTION_END_BROWSER_SESSION     42
#define INTERNET_OPTION_PROXY_USERNAME          43
#define INTERNET_OPTION_PROXY_PASSWORD          44
#define INTERNET_OPTION_CONTEXT_VALUE           45
#define INTERNET_OPTION_CONNECT_LIMIT           46
#define INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT 47
#define INTERNET_OPTION_POLICY                  48
#define INTERNET_OPTION_DISCONNECTED_TIMEOUT    49
#define INTERNET_OPTION_CONNECTED_STATE         50
#define INTERNET_OPTION_IDLE_STATE              51
#define INTERNET_OPTION_OFFLINE_SEMANTICS       52
#define INTERNET_OPTION_SECONDARY_CACHE_KEY     53
#define INTERNET_OPTION_CALLBACK_FILTER         54
#define INTERNET_OPTION_CONNECT_TIME            55
#define INTERNET_OPTION_SEND_THROUGHPUT         56
#define INTERNET_OPTION_RECEIVE_THROUGHPUT      57
#define INTERNET_OPTION_REQUEST_PRIORITY        58
#define INTERNET_OPTION_HTTP_VERSION            59
#define INTERNET_OPTION_RESET_URLCACHE_SESSION  60
#define INTERNET_OPTION_ERROR_MASK              62

#define INTERNET_FIRST_OPTION                   INTERNET_OPTION_CALLBACK
#define INTERNET_LAST_OPTION                    INTERNET_OPTION_ERROR_MASK


//
// values for INTERNET_OPTION_PRIORITY
//

#define INTERNET_PRIORITY_FOREGROUND            1000

//
// handle types
//

#define INTERNET_HANDLE_TYPE_INTERNET           1
#define INTERNET_HANDLE_TYPE_CONNECT_FTP        2
#define INTERNET_HANDLE_TYPE_CONNECT_GOPHER     3
#define INTERNET_HANDLE_TYPE_CONNECT_HTTP       4
#define INTERNET_HANDLE_TYPE_FTP_FIND           5
#define INTERNET_HANDLE_TYPE_FTP_FIND_HTML      6
#define INTERNET_HANDLE_TYPE_FTP_FILE           7
#define INTERNET_HANDLE_TYPE_FTP_FILE_HTML      8
#define INTERNET_HANDLE_TYPE_GOPHER_FIND        9
#define INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML   10
#define INTERNET_HANDLE_TYPE_GOPHER_FILE        11
#define INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML   12
#define INTERNET_HANDLE_TYPE_HTTP_REQUEST       13

//
// values for INTERNET_OPTION_SECURITY_FLAGS
//

// query only
#define SECURITY_FLAG_SECURE                    0x00000001 // can query only
#define SECURITY_FLAG_STRENGTH_WEAK             0x10000000
#define SECURITY_FLAG_STRENGTH_MEDIUM           0x40000000
#define SECURITY_FLAG_STRENGTH_STRONG           0x20000000
#define SECURITY_FLAG_UNKNOWNBIT                0x80000000
#define SECURITY_FLAG_NORMALBITNESS             SECURITY_FLAG_STRENGTH_WEAK



// The following are unused
#define SECURITY_FLAG_SSL                       0x00000002
#define SECURITY_FLAG_SSL3                      0x00000004
#define SECURITY_FLAG_PCT                       0x00000008
#define SECURITY_FLAG_PCT4                      0x00000010
#define SECURITY_FLAG_IETFSSL4                  0x00000020

// The following are for backwards compatability only.
#define SECURITY_FLAG_40BIT                     SECURITY_FLAG_STRENGTH_WEAK
#define SECURITY_FLAG_128BIT                    SECURITY_FLAG_STRENGTH_STRONG
#define SECURITY_FLAG_56BIT                     SECURITY_FLAG_STRENGTH_MEDIUM


// setable flags
#define SECURITY_FLAG_IGNORE_REVOCATION         0x00000080
#define SECURITY_FLAG_IGNORE_UNKNOWN_CA         0x00000100
#define SECURITY_FLAG_IGNORE_WRONG_USAGE        0x00000200

#define SECURITY_FLAG_IGNORE_CERT_CN_INVALID    INTERNET_FLAG_IGNORE_CERT_CN_INVALID
#define SECURITY_FLAG_IGNORE_CERT_DATE_INVALID  INTERNET_FLAG_IGNORE_CERT_DATE_INVALID


#define SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS
#define SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP   INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP



#define SECURITY_SET_MASK       (SECURITY_FLAG_IGNORE_REVOCATION |\
                                 SECURITY_FLAG_IGNORE_UNKNOWN_CA |\
                                 SECURITY_FLAG_IGNORE_CERT_CN_INVALID |\
                                 SECURITY_FLAG_IGNORE_CERT_DATE_INVALID |\
                                 SECURITY_FLAG_IGNORE_WRONG_USAGE)



BOOLAPI
InternetGetLastResponseInfoA(
    OUT LPDWORD lpdwError,
    OUT LPSTR lpszBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
BOOLAPI
InternetGetLastResponseInfoW(
    OUT LPDWORD lpdwError,
    OUT LPWSTR lpszBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
#ifdef UNICODE
#define InternetGetLastResponseInfo  InternetGetLastResponseInfoW
#else
#define InternetGetLastResponseInfo  InternetGetLastResponseInfoA
#endif // !UNICODE

//
// callback function for InternetSetStatusCallback
//

typedef
VOID
(CALLBACK * INTERNET_STATUS_CALLBACK)(
    IN HINTERNET hInternet,
    IN DWORD dwContext,
    IN DWORD dwInternetStatus,
    IN LPVOID lpvStatusInformation OPTIONAL,
    IN DWORD dwStatusInformationLength
    );

typedef INTERNET_STATUS_CALLBACK * LPINTERNET_STATUS_CALLBACK;

INTERNETAPI
INTERNET_STATUS_CALLBACK
WINAPI
InternetSetStatusCallback(
    IN HINTERNET hInternet,
    IN INTERNET_STATUS_CALLBACK lpfnInternetCallback
    );

//
// status manifests for Internet status callback
//

#define INTERNET_STATUS_RESOLVING_NAME          10
#define INTERNET_STATUS_NAME_RESOLVED           11
#define INTERNET_STATUS_CONNECTING_TO_SERVER    20
#define INTERNET_STATUS_CONNECTED_TO_SERVER     21
#define INTERNET_STATUS_SENDING_REQUEST         30
#define INTERNET_STATUS_REQUEST_SENT            31
#define INTERNET_STATUS_RECEIVING_RESPONSE      40
#define INTERNET_STATUS_RESPONSE_RECEIVED       41
#define INTERNET_STATUS_CTL_RESPONSE_RECEIVED   42
#define INTERNET_STATUS_PREFETCH                43
#define INTERNET_STATUS_CLOSING_CONNECTION      50
#define INTERNET_STATUS_CONNECTION_CLOSED       51
#define INTERNET_STATUS_HANDLE_CREATED          60
#define INTERNET_STATUS_HANDLE_CLOSING          70
#define INTERNET_STATUS_REQUEST_COMPLETE        100
#define INTERNET_STATUS_REDIRECT                110
#define INTERNET_STATUS_INTERMEDIATE_RESPONSE   120
#define INTERNET_STATUS_STATE_CHANGE            200

//
// the following can be indicated in a state change notification:
//

#define INTERNET_STATE_CONNECTED                0x00000001  // connected state (mutually exclusive with disconnected)
#define INTERNET_STATE_DISCONNECTED             0x00000002  // disconnected from network
#define INTERNET_STATE_DISCONNECTED_BY_USER     0x00000010  // disconnected by user request
#define INTERNET_STATE_IDLE                     0x00000100  // no network requests being made (by Wininet)
#define INTERNET_STATE_BUSY                     0x00000200  // network requests being made (by Wininet)


//
// if the following value is returned by InternetSetStatusCallback, then
// probably an invalid (non-code) address was supplied for the callback
//

#define INTERNET_INVALID_STATUS_CALLBACK        ((INTERNET_STATUS_CALLBACK)(-1L))

//
// FTP
//

//
// manifests
//

#define FTP_TRANSFER_TYPE_UNKNOWN   0x00000000
#define FTP_TRANSFER_TYPE_ASCII     0x00000001
#define FTP_TRANSFER_TYPE_BINARY    0x00000002

#define FTP_TRANSFER_TYPE_MASK      (FTP_TRANSFER_TYPE_ASCII | FTP_TRANSFER_TYPE_BINARY)

//
// prototypes
//

INTERNETAPI
HINTERNET
WINAPI
FtpFindFirstFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszSearchFile OPTIONAL,
    OUT LPWIN32_FIND_DATA lpFindFileData OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
FtpFindFirstFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszSearchFile OPTIONAL,
    OUT LPWIN32_FIND_DATA lpFindFileData OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define FtpFindFirstFile  FtpFindFirstFileW
#else
#define FtpFindFirstFile  FtpFindFirstFileA
#endif // !UNICODE

BOOLAPI
FtpGetFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszRemoteFile,
    IN LPCSTR lpszNewFile,
    IN BOOL fFailIfExists,
    IN DWORD dwFlagsAndAttributes,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
BOOLAPI
FtpGetFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszRemoteFile,
    IN LPCWSTR lpszNewFile,
    IN BOOL fFailIfExists,
    IN DWORD dwFlagsAndAttributes,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define FtpGetFile  FtpGetFileW
#else
#define FtpGetFile  FtpGetFileA
#endif // !UNICODE

BOOLAPI
FtpPutFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszLocalFile,
    IN LPCSTR lpszNewRemoteFile,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
BOOLAPI
FtpPutFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszLocalFile,
    IN LPCWSTR lpszNewRemoteFile,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define FtpPutFile  FtpPutFileW
#else
#define FtpPutFile  FtpPutFileA
#endif // !UNICODE

BOOLAPI
FtpDeleteFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszFileName
    );
BOOLAPI
FtpDeleteFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszFileName
    );
#ifdef UNICODE
#define FtpDeleteFile  FtpDeleteFileW
#else
#define FtpDeleteFile  FtpDeleteFileA
#endif // !UNICODE

BOOLAPI
FtpRenameFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszExisting,
    IN LPCSTR lpszNew
    );
BOOLAPI
FtpRenameFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszExisting,
    IN LPCWSTR lpszNew
    );
#ifdef UNICODE
#define FtpRenameFile  FtpRenameFileW
#else
#define FtpRenameFile  FtpRenameFileA
#endif // !UNICODE

INTERNETAPI
HINTERNET
WINAPI
FtpOpenFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszFileName,
    IN DWORD dwAccess,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
FtpOpenFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszFileName,
    IN DWORD dwAccess,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define FtpOpenFile  FtpOpenFileW
#else
#define FtpOpenFile  FtpOpenFileA
#endif // !UNICODE

BOOLAPI
FtpCreateDirectoryA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszDirectory
    );
BOOLAPI
FtpCreateDirectoryW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszDirectory
    );
#ifdef UNICODE
#define FtpCreateDirectory  FtpCreateDirectoryW
#else
#define FtpCreateDirectory  FtpCreateDirectoryA
#endif // !UNICODE

BOOLAPI
FtpRemoveDirectoryA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszDirectory
    );
BOOLAPI
FtpRemoveDirectoryW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszDirectory
    );
#ifdef UNICODE
#define FtpRemoveDirectory  FtpRemoveDirectoryW
#else
#define FtpRemoveDirectory  FtpRemoveDirectoryA
#endif // !UNICODE

BOOLAPI
FtpSetCurrentDirectoryA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszDirectory
    );
BOOLAPI
FtpSetCurrentDirectoryW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszDirectory
    );
#ifdef UNICODE
#define FtpSetCurrentDirectory  FtpSetCurrentDirectoryW
#else
#define FtpSetCurrentDirectory  FtpSetCurrentDirectoryA
#endif // !UNICODE

BOOLAPI
FtpGetCurrentDirectoryA(
    IN HINTERNET hConnect,
    OUT LPSTR lpszCurrentDirectory,
    IN OUT LPDWORD lpdwCurrentDirectory
    );
BOOLAPI
FtpGetCurrentDirectoryW(
    IN HINTERNET hConnect,
    OUT LPWSTR lpszCurrentDirectory,
    IN OUT LPDWORD lpdwCurrentDirectory
    );
#ifdef UNICODE
#define FtpGetCurrentDirectory  FtpGetCurrentDirectoryW
#else
#define FtpGetCurrentDirectory  FtpGetCurrentDirectoryA
#endif // !UNICODE


//
// Gopher
//

//
// manifests
//

//
// string field lengths (in characters, not bytes)
//

#define MAX_GOPHER_DISPLAY_TEXT     128
#define MAX_GOPHER_SELECTOR_TEXT    256
#define MAX_GOPHER_HOST_NAME        INTERNET_MAX_HOST_NAME_LENGTH
#define MAX_GOPHER_LOCATOR_LENGTH   (1                                  \
                                    + MAX_GOPHER_DISPLAY_TEXT           \
                                    + 1                                 \
                                    + MAX_GOPHER_SELECTOR_TEXT          \
                                    + 1                                 \
                                    + MAX_GOPHER_HOST_NAME              \
                                    + 1                                 \
                                    + INTERNET_MAX_PORT_NUMBER_LENGTH   \
                                    + 1                                 \
                                    + 1                                 \
                                    + 2                                 \
                                    )

//
// structures/types
//

//
// GOPHER_FIND_DATA - returns the results of a GopherFindFirstFile()/
// InternetFindNextFile() request
//

typedef struct {
    CHAR   DisplayString[MAX_GOPHER_DISPLAY_TEXT + 1];
    DWORD GopherType;   // GOPHER_TYPE_, if known
    DWORD SizeLow;
    DWORD SizeHigh;
    FILETIME LastModificationTime;
    CHAR   Locator[MAX_GOPHER_LOCATOR_LENGTH + 1];
} GOPHER_FIND_DATAA, * LPGOPHER_FIND_DATAA;
typedef struct {
    WCHAR  DisplayString[MAX_GOPHER_DISPLAY_TEXT + 1];
    DWORD GopherType;   // GOPHER_TYPE_, if known
    DWORD SizeLow;
    DWORD SizeHigh;
    FILETIME LastModificationTime;
    WCHAR  Locator[MAX_GOPHER_LOCATOR_LENGTH + 1];
} GOPHER_FIND_DATAW, * LPGOPHER_FIND_DATAW;
#ifdef UNICODE
typedef GOPHER_FIND_DATAW GOPHER_FIND_DATA;
typedef LPGOPHER_FIND_DATAW LPGOPHER_FIND_DATA;
#else
typedef GOPHER_FIND_DATAA GOPHER_FIND_DATA;
typedef LPGOPHER_FIND_DATAA LPGOPHER_FIND_DATA;
#endif // UNICODE

//
// manifests for GopherType
//

#define GOPHER_TYPE_TEXT_FILE       0x00000001
#define GOPHER_TYPE_DIRECTORY       0x00000002
#define GOPHER_TYPE_CSO             0x00000004
#define GOPHER_TYPE_ERROR           0x00000008
#define GOPHER_TYPE_MAC_BINHEX      0x00000010
#define GOPHER_TYPE_DOS_ARCHIVE     0x00000020
#define GOPHER_TYPE_UNIX_UUENCODED  0x00000040
#define GOPHER_TYPE_INDEX_SERVER    0x00000080
#define GOPHER_TYPE_TELNET          0x00000100
#define GOPHER_TYPE_BINARY          0x00000200
#define GOPHER_TYPE_REDUNDANT       0x00000400
#define GOPHER_TYPE_TN3270          0x00000800
#define GOPHER_TYPE_GIF             0x00001000
#define GOPHER_TYPE_IMAGE           0x00002000
#define GOPHER_TYPE_BITMAP          0x00004000
#define GOPHER_TYPE_MOVIE           0x00008000
#define GOPHER_TYPE_SOUND           0x00010000
#define GOPHER_TYPE_HTML            0x00020000
#define GOPHER_TYPE_PDF             0x00040000
#define GOPHER_TYPE_CALENDAR        0x00080000
#define GOPHER_TYPE_INLINE          0x00100000
#define GOPHER_TYPE_UNKNOWN         0x20000000
#define GOPHER_TYPE_ASK             0x40000000
#define GOPHER_TYPE_GOPHER_PLUS     0x80000000

//
// gopher type macros
//

#define IS_GOPHER_FILE(type)            (BOOL)(((type) &amp; GOPHER_TYPE_FILE_MASK) ? TRUE : FALSE)
#define IS_GOPHER_DIRECTORY(type)       (BOOL)(((type) &amp; GOPHER_TYPE_DIRECTORY) ? TRUE : FALSE)
#define IS_GOPHER_PHONE_SERVER(type)    (BOOL)(((type) &amp; GOPHER_TYPE_CSO) ? TRUE : FALSE)
#define IS_GOPHER_ERROR(type)           (BOOL)(((type) &amp; GOPHER_TYPE_ERROR) ? TRUE : FALSE)
#define IS_GOPHER_INDEX_SERVER(type)    (BOOL)(((type) &amp; GOPHER_TYPE_INDEX_SERVER) ? TRUE : FALSE)
#define IS_GOPHER_TELNET_SESSION(type)  (BOOL)(((type) &amp; GOPHER_TYPE_TELNET) ? TRUE : FALSE)
#define IS_GOPHER_BACKUP_SERVER(type)   (BOOL)(((type) &amp; GOPHER_TYPE_REDUNDANT) ? TRUE : FALSE)
#define IS_GOPHER_TN3270_SESSION(type)  (BOOL)(((type) &amp; GOPHER_TYPE_TN3270) ? TRUE : FALSE)
#define IS_GOPHER_ASK(type)             (BOOL)(((type) &amp; GOPHER_TYPE_ASK) ? TRUE : FALSE)
#define IS_GOPHER_PLUS(type)            (BOOL)(((type) &amp; GOPHER_TYPE_GOPHER_PLUS) ? TRUE : FALSE)

#define IS_GOPHER_TYPE_KNOWN(type)      (BOOL)(((type) &amp; GOPHER_TYPE_UNKNOWN) ? FALSE : TRUE)

//
// GOPHER_TYPE_FILE_MASK - use this to determine if a locator identifies a
// (known) file type
//

#define GOPHER_TYPE_FILE_MASK       (GOPHER_TYPE_TEXT_FILE          \
                                    | GOPHER_TYPE_MAC_BINHEX        \
                                    | GOPHER_TYPE_DOS_ARCHIVE       \
                                    | GOPHER_TYPE_UNIX_UUENCODED    \
                                    | GOPHER_TYPE_BINARY            \
                                    | GOPHER_TYPE_GIF               \
                                    | GOPHER_TYPE_IMAGE             \
                                    | GOPHER_TYPE_BITMAP            \
                                    | GOPHER_TYPE_MOVIE             \
                                    | GOPHER_TYPE_SOUND             \
                                    | GOPHER_TYPE_HTML              \
                                    | GOPHER_TYPE_PDF               \
                                    | GOPHER_TYPE_CALENDAR          \
                                    | GOPHER_TYPE_INLINE            \
                                    )

//
// structured gopher attributes (as defined in gopher+ protocol document)
//

typedef struct {
    LPCTSTR Comment;
    LPCTSTR EmailAddress;
} GOPHER_ADMIN_ATTRIBUTE_TYPE, * LPGOPHER_ADMIN_ATTRIBUTE_TYPE;

typedef struct {
    FILETIME DateAndTime;
} GOPHER_MOD_DATE_ATTRIBUTE_TYPE, * LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE;

typedef struct {
    DWORD Ttl;
} GOPHER_TTL_ATTRIBUTE_TYPE, * LPGOPHER_TTL_ATTRIBUTE_TYPE;

typedef struct {
    INT Score;
} GOPHER_SCORE_ATTRIBUTE_TYPE, * LPGOPHER_SCORE_ATTRIBUTE_TYPE;

typedef struct {
    INT LowerBound;
    INT UpperBound;
} GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE, * LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Site;
} GOPHER_SITE_ATTRIBUTE_TYPE, * LPGOPHER_SITE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Organization;
} GOPHER_ORGANIZATION_ATTRIBUTE_TYPE, * LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Location;
} GOPHER_LOCATION_ATTRIBUTE_TYPE, * LPGOPHER_LOCATION_ATTRIBUTE_TYPE;

typedef struct {
    INT DegreesNorth;
    INT MinutesNorth;
    INT SecondsNorth;
    INT DegreesEast;
    INT MinutesEast;
    INT SecondsEast;
} GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE, * LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;

typedef struct {
    INT Zone;
} GOPHER_TIMEZONE_ATTRIBUTE_TYPE, * LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Provider;
} GOPHER_PROVIDER_ATTRIBUTE_TYPE, * LPGOPHER_PROVIDER_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Version;
} GOPHER_VERSION_ATTRIBUTE_TYPE, * LPGOPHER_VERSION_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR ShortAbstract;
    LPCTSTR AbstractFile;
} GOPHER_ABSTRACT_ATTRIBUTE_TYPE, * LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR ContentType;
    LPCTSTR Language;
    DWORD Size;
} GOPHER_VIEW_ATTRIBUTE_TYPE, * LPGOPHER_VIEW_ATTRIBUTE_TYPE;

typedef struct {
    BOOL TreeWalk;
} GOPHER_VERONICA_ATTRIBUTE_TYPE, * LPGOPHER_VERONICA_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR QuestionType;
    LPCTSTR QuestionText;
} GOPHER_ASK_ATTRIBUTE_TYPE, * LPGOPHER_ASK_ATTRIBUTE_TYPE;

//
// GOPHER_UNKNOWN_ATTRIBUTE_TYPE - this is returned if we retrieve an attribute
// that is not specified in the current gopher/gopher+ documentation. It is up
// to the application to parse the information
//

typedef struct {
    LPCTSTR Text;
} GOPHER_UNKNOWN_ATTRIBUTE_TYPE, * LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE;

//
// GOPHER_ATTRIBUTE_TYPE - returned in the user's buffer when an enumerated
// GopherGetAttribute call is made
//

typedef struct {
    DWORD CategoryId;   // e.g. GOPHER_CATEGORY_ID_ADMIN
    DWORD AttributeId;  // e.g. GOPHER_ATTRIBUTE_ID_ADMIN
    union {
        GOPHER_ADMIN_ATTRIBUTE_TYPE Admin;
        GOPHER_MOD_DATE_ATTRIBUTE_TYPE ModDate;
        GOPHER_TTL_ATTRIBUTE_TYPE Ttl;
        GOPHER_SCORE_ATTRIBUTE_TYPE Score;
        GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE ScoreRange;
        GOPHER_SITE_ATTRIBUTE_TYPE Site;
        GOPHER_ORGANIZATION_ATTRIBUTE_TYPE Organization;
        GOPHER_LOCATION_ATTRIBUTE_TYPE Location;
        GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE GeographicalLocation;
        GOPHER_TIMEZONE_ATTRIBUTE_TYPE TimeZone;
        GOPHER_PROVIDER_ATTRIBUTE_TYPE Provider;
        GOPHER_VERSION_ATTRIBUTE_TYPE Version;
        GOPHER_ABSTRACT_ATTRIBUTE_TYPE Abstract;
        GOPHER_VIEW_ATTRIBUTE_TYPE View;
        GOPHER_VERONICA_ATTRIBUTE_TYPE Veronica;
        GOPHER_ASK_ATTRIBUTE_TYPE Ask;
        GOPHER_UNKNOWN_ATTRIBUTE_TYPE Unknown;
    } AttributeType;
} GOPHER_ATTRIBUTE_TYPE, * LPGOPHER_ATTRIBUTE_TYPE;

#define MAX_GOPHER_CATEGORY_NAME    128     // arbitrary
#define MAX_GOPHER_ATTRIBUTE_NAME   128     //     &quot;
#define MIN_GOPHER_ATTRIBUTE_LENGTH 256     //     &quot;

//
// known gopher attribute categories. See below for ordinals
//

#define GOPHER_INFO_CATEGORY        TEXT(&quot;+INFO&quot;)
#define GOPHER_ADMIN_CATEGORY       TEXT(&quot;+ADMIN&quot;)
#define GOPHER_VIEWS_CATEGORY       TEXT(&quot;+VIEWS&quot;)
#define GOPHER_ABSTRACT_CATEGORY    TEXT(&quot;+ABSTRACT&quot;)
#define GOPHER_VERONICA_CATEGORY    TEXT(&quot;+VERONICA&quot;)

//
// known gopher attributes. These are the attribute names as defined in the
// gopher+ protocol document
//

#define GOPHER_ADMIN_ATTRIBUTE      TEXT(&quot;Admin&quot;)
#define GOPHER_MOD_DATE_ATTRIBUTE   TEXT(&quot;Mod-Date&quot;)
#define GOPHER_TTL_ATTRIBUTE        TEXT(&quot;TTL&quot;)
#define GOPHER_SCORE_ATTRIBUTE      TEXT(&quot;Score&quot;)
#define GOPHER_RANGE_ATTRIBUTE      TEXT(&quot;Score-range&quot;)
#define GOPHER_SITE_ATTRIBUTE       TEXT(&quot;Site&quot;)
#define GOPHER_ORG_ATTRIBUTE        TEXT(&quot;Org&quot;)
#define GOPHER_LOCATION_ATTRIBUTE   TEXT(&quot;Loc&quot;)
#define GOPHER_GEOG_ATTRIBUTE       TEXT(&quot;Geog&quot;)
#define GOPHER_TIMEZONE_ATTRIBUTE   TEXT(&quot;TZ&quot;)
#define GOPHER_PROVIDER_ATTRIBUTE   TEXT(&quot;Provider&quot;)
#define GOPHER_VERSION_ATTRIBUTE    TEXT(&quot;Version&quot;)
#define GOPHER_ABSTRACT_ATTRIBUTE   TEXT(&quot;Abstract&quot;)
#define GOPHER_VIEW_ATTRIBUTE       TEXT(&quot;View&quot;)
#define GOPHER_TREEWALK_ATTRIBUTE   TEXT(&quot;treewalk&quot;)

//
// identifiers for attribute strings
//

#define GOPHER_ATTRIBUTE_ID_BASE        0xabcccc00

#define GOPHER_CATEGORY_ID_ALL          (GOPHER_ATTRIBUTE_ID_BASE + 1)

#define GOPHER_CATEGORY_ID_INFO         (GOPHER_ATTRIBUTE_ID_BASE + 2)
#define GOPHER_CATEGORY_ID_ADMIN        (GOPHER_ATTRIBUTE_ID_BASE + 3)
#define GOPHER_CATEGORY_ID_VIEWS        (GOPHER_ATTRIBUTE_ID_BASE + 4)
#define GOPHER_CATEGORY_ID_ABSTRACT     (GOPHER_ATTRIBUTE_ID_BASE + 5)
#define GOPHER_CATEGORY_ID_VERONICA     (GOPHER_ATTRIBUTE_ID_BASE + 6)
#define GOPHER_CATEGORY_ID_ASK          (GOPHER_ATTRIBUTE_ID_BASE + 7)

#define GOPHER_CATEGORY_ID_UNKNOWN      (GOPHER_ATTRIBUTE_ID_BASE + 8)

#define GOPHER_ATTRIBUTE_ID_ALL         (GOPHER_ATTRIBUTE_ID_BASE + 9)

#define GOPHER_ATTRIBUTE_ID_ADMIN       (GOPHER_ATTRIBUTE_ID_BASE + 10)
#define GOPHER_ATTRIBUTE_ID_MOD_DATE    (GOPHER_ATTRIBUTE_ID_BASE + 11)
#define GOPHER_ATTRIBUTE_ID_TTL         (GOPHER_ATTRIBUTE_ID_BASE + 12)
#define GOPHER_ATTRIBUTE_ID_SCORE       (GOPHER_ATTRIBUTE_ID_BASE + 13)
#define GOPHER_ATTRIBUTE_ID_RANGE       (GOPHER_ATTRIBUTE_ID_BASE + 14)
#define GOPHER_ATTRIBUTE_ID_SITE        (GOPHER_ATTRIBUTE_ID_BASE + 15)
#define GOPHER_ATTRIBUTE_ID_ORG         (GOPHER_ATTRIBUTE_ID_BASE + 16)
#define GOPHER_ATTRIBUTE_ID_LOCATION    (GOPHER_ATTRIBUTE_ID_BASE + 17)
#define GOPHER_ATTRIBUTE_ID_GEOG        (GOPHER_ATTRIBUTE_ID_BASE + 18)
#define GOPHER_ATTRIBUTE_ID_TIMEZONE    (GOPHER_ATTRIBUTE_ID_BASE + 19)
#define GOPHER_ATTRIBUTE_ID_PROVIDER    (GOPHER_ATTRIBUTE_ID_BASE + 20)
#define GOPHER_ATTRIBUTE_ID_VERSION     (GOPHER_ATTRIBUTE_ID_BASE + 21)
#define GOPHER_ATTRIBUTE_ID_ABSTRACT    (GOPHER_ATTRIBUTE_ID_BASE + 22)
#define GOPHER_ATTRIBUTE_ID_VIEW        (GOPHER_ATTRIBUTE_ID_BASE + 23)
#define GOPHER_ATTRIBUTE_ID_TREEWALK    (GOPHER_ATTRIBUTE_ID_BASE + 24)

#define GOPHER_ATTRIBUTE_ID_UNKNOWN     (GOPHER_ATTRIBUTE_ID_BASE + 25)

//
// prototypes
//

BOOLAPI
GopherCreateLocatorA(
    IN LPCSTR lpszHost,
    IN INTERNET_PORT nServerPort,
    IN LPCSTR lpszDisplayString OPTIONAL,
    IN LPCSTR lpszSelectorString OPTIONAL,
    IN DWORD dwGopherType,
    OUT LPSTR lpszLocator OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
BOOLAPI
GopherCreateLocatorW(
    IN LPCWSTR lpszHost,
    IN INTERNET_PORT nServerPort,
    IN LPCWSTR lpszDisplayString OPTIONAL,
    IN LPCWSTR lpszSelectorString OPTIONAL,
    IN DWORD dwGopherType,
    OUT LPWSTR lpszLocator OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength
    );
#ifdef UNICODE
#define GopherCreateLocator  GopherCreateLocatorW
#else
#define GopherCreateLocator  GopherCreateLocatorA
#endif // !UNICODE

BOOLAPI
GopherGetLocatorTypeA(
    IN LPCSTR lpszLocator,
    OUT LPDWORD lpdwGopherType
    );
BOOLAPI
GopherGetLocatorTypeW(
    IN LPCWSTR lpszLocator,
    OUT LPDWORD lpdwGopherType
    );
#ifdef UNICODE
#define GopherGetLocatorType  GopherGetLocatorTypeW
#else
#define GopherGetLocatorType  GopherGetLocatorTypeA
#endif // !UNICODE

INTERNETAPI
HINTERNET
WINAPI
GopherFindFirstFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszLocator OPTIONAL,
    IN LPCSTR lpszSearchString OPTIONAL,
    OUT LPGOPHER_FIND_DATAA lpFindData OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
GopherFindFirstFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszLocator OPTIONAL,
    IN LPCWSTR lpszSearchString OPTIONAL,
    OUT LPGOPHER_FIND_DATAW lpFindData OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define GopherFindFirstFile  GopherFindFirstFileW
#else
#define GopherFindFirstFile  GopherFindFirstFileA
#endif // !UNICODE

INTERNETAPI
HINTERNET
WINAPI
GopherOpenFileA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszLocator,
    IN LPCSTR lpszView OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
GopherOpenFileW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszLocator,
    IN LPCWSTR lpszView OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define GopherOpenFile  GopherOpenFileW
#else
#define GopherOpenFile  GopherOpenFileA
#endif // !UNICODE

typedef
BOOL
(CALLBACK * GOPHER_ATTRIBUTE_ENUMERATOR)(
    LPGOPHER_ATTRIBUTE_TYPE lpAttributeInfo,
    DWORD dwError
    );

BOOLAPI
GopherGetAttributeA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszLocator,
    IN LPCSTR lpszAttributeName OPTIONAL,
    OUT LPBYTE lpBuffer,
    IN DWORD dwBufferLength,
    OUT LPDWORD lpdwCharactersReturned,
    IN GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator OPTIONAL,
    IN DWORD dwContext
    );
BOOLAPI
GopherGetAttributeW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszLocator,
    IN LPCWSTR lpszAttributeName OPTIONAL,
    OUT LPBYTE lpBuffer,
    IN DWORD dwBufferLength,
    OUT LPDWORD lpdwCharactersReturned,
    IN GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator OPTIONAL,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define GopherGetAttribute  GopherGetAttributeW
#else
#define GopherGetAttribute  GopherGetAttributeA
#endif // !UNICODE

//
// HTTP
//

//
// manifests
//

//
// the default major/minor HTTP version numbers
//

#define HTTP_MAJOR_VERSION      1
#define HTTP_MINOR_VERSION      0

#define HTTP_VERSION            TEXT(&quot;HTTP/1.0&quot;)

//
// HttpQueryInfo info levels. Generally, there is one info level
// for each potential RFC822/HTTP/MIME header that an HTTP server
// may send as part of a request response.
//
// The HTTP_QUERY_RAW_HEADERS info level is provided for clients
// that choose to perform their own header parsing.
//

#define HTTP_QUERY_MIME_VERSION                 0
#define HTTP_QUERY_CONTENT_TYPE                 1
#define HTTP_QUERY_CONTENT_TRANSFER_ENCODING    2
#define HTTP_QUERY_CONTENT_ID                   3
#define HTTP_QUERY_CONTENT_DESCRIPTION          4
#define HTTP_QUERY_CONTENT_LENGTH               5
#define HTTP_QUERY_CONTENT_LANGUAGE             6
#define HTTP_QUERY_ALLOW                        7
#define HTTP_QUERY_PUBLIC                       8
#define HTTP_QUERY_DATE                         9
#define HTTP_QUERY_EXPIRES                      10
#define HTTP_QUERY_LAST_MODIFIED                11
#define HTTP_QUERY_MESSAGE_ID                   12
#define HTTP_QUERY_URI                          13
#define HTTP_QUERY_DERIVED_FROM                 14
#define HTTP_QUERY_COST                         15
#define HTTP_QUERY_LINK                         16
#define HTTP_QUERY_PRAGMA                       17
#define HTTP_QUERY_VERSION                      18  // special: part of status line
#define HTTP_QUERY_STATUS_CODE                  19  // special: part of status line
#define HTTP_QUERY_STATUS_TEXT                  20  // special: part of status line
#define HTTP_QUERY_RAW_HEADERS                  21  // special: all headers as ASCIIZ
#define HTTP_QUERY_RAW_HEADERS_CRLF             22  // special: all headers
#define HTTP_QUERY_CONNECTION                   23
#define HTTP_QUERY_ACCEPT                       24
#define HTTP_QUERY_ACCEPT_CHARSET               25
#define HTTP_QUERY_ACCEPT_ENCODING              26
#define HTTP_QUERY_ACCEPT_LANGUAGE              27
#define HTTP_QUERY_AUTHORIZATION                28
#define HTTP_QUERY_CONTENT_ENCODING             29
#define HTTP_QUERY_FORWARDED                    30
#define HTTP_QUERY_FROM                         31
#define HTTP_QUERY_IF_MODIFIED_SINCE            32
#define HTTP_QUERY_LOCATION                     33
#define HTTP_QUERY_ORIG_URI                     34
#define HTTP_QUERY_REFERER                      35
#define HTTP_QUERY_RETRY_AFTER                  36
#define HTTP_QUERY_SERVER                       37
#define HTTP_QUERY_TITLE                        38
#define HTTP_QUERY_USER_AGENT                   39
#define HTTP_QUERY_WWW_AUTHENTICATE             40
#define HTTP_QUERY_PROXY_AUTHENTICATE           41
#define HTTP_QUERY_ACCEPT_RANGES                42
#define HTTP_QUERY_SET_COOKIE                   43
#define HTTP_QUERY_COOKIE                       44
#define HTTP_QUERY_REQUEST_METHOD               45  // special: GET/POST etc.
#define HTTP_QUERY_REFRESH                      46
#define HTTP_QUERY_CONTENT_DISPOSITION          47

//
// HTTP 1.1 defined headers
//

#define HTTP_QUERY_AGE                          48
#define HTTP_QUERY_CACHE_CONTROL                49
#define HTTP_QUERY_CONTENT_BASE                 50
#define HTTP_QUERY_CONTENT_LOCATION             51
#define HTTP_QUERY_CONTENT_MD5                  52
#define HTTP_QUERY_CONTENT_RANGE                53
#define HTTP_QUERY_ETAG                         54
#define HTTP_QUERY_HOST                         55
#define HTTP_QUERY_IF_MATCH                     56
#define HTTP_QUERY_IF_NONE_MATCH                57
#define HTTP_QUERY_IF_RANGE                     58
#define HTTP_QUERY_IF_UNMODIFIED_SINCE          59
#define HTTP_QUERY_MAX_FORWARDS                 60
#define HTTP_QUERY_PROXY_AUTHORIZATION          61
#define HTTP_QUERY_RANGE                        62
#define HTTP_QUERY_TRANSFER_ENCODING            63
#define HTTP_QUERY_UPGRADE                      64
#define HTTP_QUERY_VARY                         65
#define HTTP_QUERY_VIA                          66
#define HTTP_QUERY_WARNING                      67

#define HTTP_QUERY_MAX                          67

//
// HTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
// parameter of HttpQueryInfo() then the lpBuffer parameter contains the name
// of the header we are to query
//

#define HTTP_QUERY_CUSTOM                       65535

//
// HTTP_QUERY_FLAG_REQUEST_HEADERS - if this bit is set in the dwInfoLevel
// parameter of HttpQueryInfo() then the request headers will be queried for the
// request information
//

#define HTTP_QUERY_FLAG_REQUEST_HEADERS         0x80000000

//
// HTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
// of HttpQueryInfo() AND the header being queried contains date information,
// e.g. the &quot;Expires:&quot; header then lpBuffer will contain a SYSTEMTIME structure
// containing the date and time information converted from the header string
//

#define HTTP_QUERY_FLAG_SYSTEMTIME              0x40000000

//
// HTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
// HttpQueryInfo(), then the value of the header will be converted to a number
// before being returned to the caller, if applicable
//

#define HTTP_QUERY_FLAG_NUMBER                  0x20000000

//
// HTTP_QUERY_FLAG_COALESCE - combine the values from several headers of the
// same name into the output buffer
//

#define HTTP_QUERY_FLAG_COALESCE                0x10000000


#define HTTP_QUERY_MODIFIER_FLAGS_MASK          (HTTP_QUERY_FLAG_REQUEST_HEADERS    \
                                                | HTTP_QUERY_FLAG_SYSTEMTIME        \
                                                | HTTP_QUERY_FLAG_NUMBER            \
                                                | HTTP_QUERY_FLAG_COALESCE          \
                                                )

#define HTTP_QUERY_HEADER_MASK                  (~HTTP_QUERY_MODIFIER_FLAGS_MASK)

//
// HTTP Response Status Codes:
//

#define HTTP_STATUS_CONTINUE            100 // OK to continue with request
#define HTTP_STATUS_SWITCH_PROTOCOLS    101 // server has switched protocols in upgrade header

#define HTTP_STATUS_OK                  200 // request completed
#define HTTP_STATUS_CREATED             201 // object created, reason = new URI
#define HTTP_STATUS_ACCEPTED            202 // async completion (TBS)
#define HTTP_STATUS_PARTIAL             203 // partial completion
#define HTTP_STATUS_NO_CONTENT          204 // no info to return
#define HTTP_STATUS_RESET_CONTENT       205 // request completed, but clear form
#define HTTP_STATUS_PARTIAL_CONTENT     206 // partial GET furfilled

#define HTTP_STATUS_AMBIGUOUS           300 // server couldn't decide what to return
#define HTTP_STATUS_MOVED               301 // object permanently moved
#define HTTP_STATUS_REDIRECT            302 // object temporarily moved
#define HTTP_STATUS_REDIRECT_METHOD     303 // redirection w/ new access method
#define HTTP_STATUS_NOT_MODIFIED        304 // if-modified-since was not modified
#define HTTP_STATUS_USE_PROXY           305 // redirection to proxy, location header specifies proxy to use
#define HTTP_STATUS_REDIRECT_KEEP_VERB  307 // HTTP/1.1: keep same verb

#define HTTP_STATUS_BAD_REQUEST         400 // invalid syntax
#define HTTP_STATUS_DENIED              401 // access denied
#define HTTP_STATUS_PAYMENT_REQ         402 // payment required
#define HTTP_STATUS_FORBIDDEN           403 // request forbidden
#define HTTP_STATUS_NOT_FOUND           404 // object not found
#define HTTP_STATUS_BAD_METHOD          405 // method is not allowed
#define HTTP_STATUS_NONE_ACCEPTABLE     406 // no response acceptable to client found
#define HTTP_STATUS_PROXY_AUTH_REQ      407 // proxy authentication required
#define HTTP_STATUS_REQUEST_TIMEOUT     408 // server timed out waiting for request
#define HTTP_STATUS_CONFLICT            409 // user should resubmit with more info
#define HTTP_STATUS_GONE                410 // the resource is no longer available
#define HTTP_STATUS_LENGTH_REQUIRED     411 // the server refused to accept request w/o a length
#define HTTP_STATUS_PRECOND_FAILED      412 // precondition given in request failed
#define HTTP_STATUS_REQUEST_TOO_LARGE   413 // request entity was too large
#define HTTP_STATUS_URI_TOO_LONG        414 // request URI too long
#define HTTP_STATUS_UNSUPPORTED_MEDIA   415 // unsupported media type

#define HTTP_STATUS_SERVER_ERROR        500 // internal server error
#define HTTP_STATUS_NOT_SUPPORTED       501 // required not supported
#define HTTP_STATUS_BAD_GATEWAY         502 // error response received from gateway
#define HTTP_STATUS_SERVICE_UNAVAIL     503 // temporarily overloaded
#define HTTP_STATUS_GATEWAY_TIMEOUT     504 // timed out waiting for gateway
#define HTTP_STATUS_VERSION_NOT_SUP     505 // HTTP version not supported

#define HTTP_STATUS_FIRST               HTTP_STATUS_CONTINUE
#define HTTP_STATUS_LAST                HTTP_STATUS_VERSION_NOT_SUP

//
// prototypes
//

INTERNETAPI
HINTERNET
WINAPI
HttpOpenRequestA(
    IN HINTERNET hConnect,
    IN LPCSTR lpszVerb,
    IN LPCSTR lpszObjectName,
    IN LPCSTR lpszVersion,
    IN LPCSTR lpszReferrer OPTIONAL,
    IN LPCSTR FAR * lplpszAcceptTypes OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
HINTERNET
WINAPI
HttpOpenRequestW(
    IN HINTERNET hConnect,
    IN LPCWSTR lpszVerb,
    IN LPCWSTR lpszObjectName,
    IN LPCWSTR lpszVersion,
    IN LPCWSTR lpszReferrer OPTIONAL,
    IN LPCWSTR FAR * lplpszAcceptTypes OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define HttpOpenRequest  HttpOpenRequestW
#else
#define HttpOpenRequest  HttpOpenRequestA
#endif // !UNICODE

BOOLAPI
HttpAddRequestHeadersA(
    IN HINTERNET hRequest,
    IN LPCSTR lpszHeaders,
    IN DWORD dwHeadersLength,
    IN DWORD dwModifiers
    );
BOOLAPI
HttpAddRequestHeadersW(
    IN HINTERNET hRequest,
    IN LPCWSTR lpszHeaders,
    IN DWORD dwHeadersLength,
    IN DWORD dwModifiers
    );
#ifdef UNICODE
#define HttpAddRequestHeaders  HttpAddRequestHeadersW
#else
#define HttpAddRequestHeaders  HttpAddRequestHeadersA
#endif // !UNICODE

//
// values for dwModifiers parameter of HttpAddRequestHeaders()
//

#define HTTP_ADDREQ_INDEX_MASK      0x0000FFFF
#define HTTP_ADDREQ_FLAGS_MASK      0xFFFF0000

//
// HTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
// already exist
//

#define HTTP_ADDREQ_FLAG_ADD_IF_NEW 0x10000000

//
// HTTP_ADDREQ_FLAG_ADD - if HTTP_ADDREQ_FLAG_REPLACE is set but the header is
// not found then if this flag is set, the header is added anyway, so long as
// there is a valid header-value
//

#define HTTP_ADDREQ_FLAG_ADD        0x20000000

//
// HTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
// &quot;Accept: text/*&quot; and &quot;Accept: audio/*&quot; with this flag results in a single
// header: &quot;Accept: text/*, audio/*&quot;
//

#define HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA       0x40000000
#define HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON   0x01000000
#define HTTP_ADDREQ_FLAG_COALESCE                  HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA

//
// HTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
// be supplied in the buffer. If the header to be replaced is not the first
// in a list of headers with the same name, then the relative index should be
// supplied in the low 8 bits of the dwModifiers parameter. If the header-value
// part is missing, then the header is removed
//

#define HTTP_ADDREQ_FLAG_REPLACE    0x80000000

BOOLAPI
HttpSendRequestA(
    IN HINTERNET hRequest,
    IN LPCSTR lpszHeaders OPTIONAL,
    IN DWORD dwHeadersLength,
    IN LPVOID lpOptional OPTIONAL,
    IN DWORD dwOptionalLength
    );
BOOLAPI
HttpSendRequestW(
    IN HINTERNET hRequest,
    IN LPCWSTR lpszHeaders OPTIONAL,
    IN DWORD dwHeadersLength,
    IN LPVOID lpOptional OPTIONAL,
    IN DWORD dwOptionalLength
    );
#ifdef UNICODE
#define HttpSendRequest  HttpSendRequestW
#else
#define HttpSendRequest  HttpSendRequestA
#endif // !UNICODE

INTERNETAPI
BOOL
WINAPI
HttpSendRequestExA(
    IN HINTERNET hRequest,
    IN LPINTERNET_BUFFERSA lpBuffersIn OPTIONAL,
    OUT LPINTERNET_BUFFERSA lpBuffersOut OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
BOOL
WINAPI
HttpSendRequestExW(
    IN HINTERNET hRequest,
    IN LPINTERNET_BUFFERSW lpBuffersIn OPTIONAL,
    OUT LPINTERNET_BUFFERSW lpBuffersOut OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define HttpSendRequestEx  HttpSendRequestExW
#else
#define HttpSendRequestEx  HttpSendRequestExA
#endif // !UNICODE

//
// flags for HttpSendRequestEx(), HttpEndRequest()
//

#define HSR_ASYNC       WININET_API_FLAG_ASYNC          // force async
#define HSR_SYNC        WININET_API_FLAG_SYNC           // force sync
#define HSR_USE_CONTEXT WININET_API_FLAG_USE_CONTEXT    // use dwContext value
#define HSR_INITIATE    0x00000008                      // iterative operation (completed by HttpEndRequest)
#define HSR_DOWNLOAD    0x00000010                      // download to file
#define HSR_CHUNKED     0x00000020                      // operation is send of chunked data

INTERNETAPI
BOOL
WINAPI
HttpEndRequestA(
    IN HINTERNET hRequest,
    OUT LPINTERNET_BUFFERSA lpBuffersOut OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
INTERNETAPI
BOOL
WINAPI
HttpEndRequestW(
    IN HINTERNET hRequest,
    OUT LPINTERNET_BUFFERSW lpBuffersOut OPTIONAL,
    IN DWORD dwFlags,
    IN DWORD dwContext
    );
#ifdef UNICODE
#define HttpEndRequest  HttpEndRequestW
#else
#define HttpEndRequest  HttpEndRequestA
#endif // !UNICODE

BOOLAPI
HttpQueryInfoA(
    IN HINTERNET hRequest,
    IN DWORD dwInfoLevel,
    IN OUT LPVOID lpBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength,
    IN OUT LPDWORD lpdwIndex OPTIONAL
    );
BOOLAPI
HttpQueryInfoW(
    IN HINTERNET hRequest,
    IN DWORD dwInfoLevel,
    IN OUT LPVOID lpBuffer OPTIONAL,
    IN OUT LPDWORD lpdwBufferLength,
    IN OUT LPDWORD lpdwIndex OPTIONAL
    );
#ifdef UNICODE
#define HttpQueryInfo  HttpQueryInfoW
#else
#define HttpQueryInfo  HttpQueryInfoA
#endif // !UNICODE

//
// Cookie APIs
//


BOOLAPI
InternetSetCookieA(
    IN LPCSTR lpszUrl,
    IN LPCSTR lpszCookieName,
    IN LPCSTR lpszCookieData
    );
BOOLAPI
InternetSetCookieW(
    IN LPCSTR lpszUrl,
    IN LPCWSTR lpszCookieName,
    IN LPCWSTR lpszCookieData
    );
#ifdef UNICODE
#define InternetSetCookie  InternetSetCookieW
#else
#define InternetSetCookie  InternetSetCookieA
#endif // !UNICODE

BOOLAPI
InternetGetCookieA(
    IN LPCSTR lpszUrl,
    IN LPCSTR lpszCookieName,
    OUT LPSTR lpCookieData,
    IN OUT LPDWORD lpdwSize
    );
BOOLAPI
InternetGetCookieW(
    IN LPCSTR lpszUrl,
    IN LPCWSTR lpszCookieName,
    OUT LPWSTR lpCookieData,
    IN OUT LPDWORD lpdwSize
    );
#ifdef UNICODE
#define InternetGetCookie  InternetGetCookieW
#else
#define InternetGetCookie  InternetGetCookieA
#endif // !UNICODE


//
// offline browsing
//

INTERNETAPI
DWORD
WINAPI
InternetAttemptConnect(
    IN DWORD dwReserved
    );

BOOLAPI
InternetCheckConnectionA(
    IN LPCSTR lpszUrl,
    IN DWORD dwFlags,
    IN DWORD dwReserved
    );
BOOLAPI
InternetCheckConnectionW(
    IN LPCWSTR lpszUrl,
    IN DWORD dwFlags,
    IN DWORD dwReserved
    );
#ifdef UNICODE
#define InternetCheckConnection  InternetCheckConnectionW
#else
#define InternetCheckConnection  InternetCheckConnectionA
#endif // !UNICODE

#define FLAG_ICC_FORCE_CONNECTION       0x00000001

//
// Internet UI
//

//
// InternetErrorDlg - Provides UI for certain Errors.
//

#define FLAGS_ERROR_UI_FILTER_FOR_ERRORS        0x01
#define FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS     0x02
#define FLAGS_ERROR_UI_FLAGS_GENERATE_DATA      0x04
#define FLAGS_ERROR_UI_FLAGS_NO_UI              0x08
#define FLAGS_ERROR_UI_SERIALIZE_DIALOGS        0x10

//
// If SERIALIZE_DIALOGS flag set, client should implement thread-safe non-blocking callback...
//

DWORD InternetAuthNotifyCallback
(
    DWORD           dwContext,    // as passed to InternetErrorDlg
    DWORD           dwReturn,     // error code: success, resend, or cancel
    LPVOID          lpReserved    // reserved: will be set to null
);
typedef DWORD (CALLBACK * PFN_AUTH_NOTIFY) (DWORD, DWORD, LPVOID);

//
// ... and last parameter of InternetErrorDlg should point to...
//

typedef struct
{
    DWORD            cbStruct;    // size of this structure
    DWORD            dwOptions;   // reserved: must set to 0
    PFN_AUTH_NOTIFY  pfnNotify;   // notification callback to retry InternetErrorDlg
    DWORD            dwContext;   // context to pass to to notification function
}
    INTERNET_AUTH_NOTIFY_DATA;


INTERNETAPI
DWORD
WINAPI
InternetErrorDlg(
    IN HWND hWnd,
    IN OUT HINTERNET hRequest,
    IN DWORD dwError,
    IN DWORD dwFlags,
    IN OUT LPVOID * lppvData
    );

INTERNETAPI
DWORD
WINAPI
InternetConfirmZoneCrossing(
    IN HWND hWnd,
    IN LPSTR szUrlPrev,
    IN LPSTR szUrlNew,
    IN BOOL bPost
    );


//#if !defined(_WINERROR_)

//
// Internet API error returns
//

#define INTERNET_ERROR_BASE                     12000

#define ERROR_INTERNET_OUT_OF_HANDLES           (INTERNET_ERROR_BASE + 1)
#define ERROR_INTERNET_TIMEOUT                  (INTERNET_ERROR_BASE + 2)
#define ERROR_INTERNET_EXTENDED_ERROR           (INTERNET_ERROR_BASE + 3)
#define ERROR_INTERNET_INTERNAL_ERROR           (INTERNET_ERROR_BASE + 4)
#define ERROR_INTERNET_INVALID_URL              (INTERNET_ERROR_BASE + 5)
#define ERROR_INTERNET_UNRECOGNIZED_SCHEME      (INTERNET_ERROR_BASE + 6)
#define ERROR_INTERNET_NAME_NOT_RESOLVED        (INTERNET_ERROR_BASE + 7)
#define ERROR_INTERNET_PROTOCOL_NOT_FOUND       (INTERNET_ERROR_BASE + 8)
#define ERROR_INTERNET_INVALID_OPTION           (INTERNET_ERROR_BASE + 9)
#define ERROR_INTERNET_BAD_OPTION_LENGTH        (INTERNET_ERROR_BASE + 10)
#define ERROR_INTERNET_OPTION_NOT_SETTABLE      (INTERNET_ERROR_BASE + 11)
#define ERROR_INTERNET_SHUTDOWN                 (INTERNET_ERROR_BASE + 12)
#define ERROR_INTERNET_INCORRECT_USER_NAME      (INTERNET_ERROR_BASE + 13)
#define ERROR_INTERNET_INCORRECT_PASSWORD       (INTERNET_ERROR_BASE + 14)
#define ERROR_INTERNET_LOGIN_FAILURE            (INTERNET_ERROR_BASE + 15)
#define ERROR_INTERNET_INVALID_OPERATION        (INTERNET_ERROR_BASE + 16)
#define ERROR_INTERNET_OPERATION_CANCELLED      (INTERNET_ERROR_BASE + 17)
#define ERROR_INTERNET_INCORRECT_HANDLE_TYPE    (INTERNET_ERROR_BASE + 18)
#define ERROR_INTERNET_INCORRECT_HANDLE_STATE   (INTERNET_ERROR_BASE + 19)
#define ERROR_INTERNET_NOT_PROXY_REQUEST        (INTERNET_ERROR_BASE + 20)
#define ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND (INTERNET_ERROR_BASE + 21)
#define ERROR_INTERNET_BAD_REGISTRY_PARAMETER   (INTERNET_ERROR_BASE + 22)
#define ERROR_INTERNET_NO_DIRECT_ACCESS         (INTERNET_ERROR_BASE + 23)
#define ERROR_INTERNET_NO_CONTEXT               (INTERNET_ERROR_BASE + 24)
#define ERROR_INTERNET_NO_CALLBACK              (INTERNET_ERROR_BASE + 25)
#define ERROR_INTERNET_REQUEST_PENDING          (INTERNET_ERROR_BASE + 26)
#define ERROR_INTERNET_INCORRECT_FORMAT         (INTERNET_ERROR_BASE + 27)
#define ERROR_INTERNET_ITEM_NOT_FOUND           (INTERNET_ERROR_BASE + 28)
#define ERROR_INTERNET_CANNOT_CONNECT           (INTERNET_ERROR_BASE + 29)
#define ERROR_INTERNET_CONNECTION_ABORTED       (INTERNET_ERROR_BASE + 30)
#define ERROR_INTERNET_CONNECTION_RESET         (INTERNET_ERROR_BASE + 31)
#define ERROR_INTERNET_FORCE_RETRY              (INTERNET_ERROR_BASE + 32)
#define ERROR_INTERNET_INVALID_PROXY_REQUEST    (INTERNET_ERROR_BASE + 33)
#define ERROR_INTERNET_NEED_UI                  (INTERNET_ERROR_BASE + 34)

#define ERROR_INTERNET_HANDLE_EXISTS            (INTERNET_ERROR_BASE + 36)
#define ERROR_INTERNET_SEC_CERT_DATE_INVALID    (INTERNET_ERROR_BASE + 37)
#define ERROR_INTERNET_SEC_CERT_CN_INVALID      (INTERNET_ERROR_BASE + 38)
#define ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR   (INTERNET_ERROR_BASE + 39)
#define ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR   (INTERNET_ERROR_BASE + 40)
#define ERROR_INTERNET_MIXED_SECURITY           (INTERNET_ERROR_BASE + 41)
#define ERROR_INTERNET_CHG_POST_IS_NON_SECURE   (INTERNET_ERROR_BASE + 42)
#define ERROR_INTERNET_POST_IS_NON_SECURE       (INTERNET_ERROR_BASE + 43)
#define ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED  (INTERNET_ERROR_BASE + 44)
#define ERROR_INTERNET_INVALID_CA               (INTERNET_ERROR_BASE + 45)
#define ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP    (INTERNET_ERROR_BASE + 46)
#define ERROR_INTERNET_ASYNC_THREAD_FAILED      (INTERNET_ERROR_BASE + 47)
#define ERROR_INTERNET_REDIRECT_SCHEME_CHANGE   (INTERNET_ERROR_BASE + 48)
#define ERROR_INTERNET_DIALOG_PENDING           (INTERNET_ERROR_BASE + 49)
#define ERROR_INTERNET_RETRY_DIALOG             (INTERNET_ERROR_BASE + 50)
#define ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR  (INTERNET_ERROR_BASE + 52)
#define ERROR_INTERNET_INSERT_CDROM             (INTERNET_ERROR_BASE + 53)


//
// FTP API errors
//

#define ERROR_FTP_TRANSFER_IN_PROGRESS          (INTERNET_ERROR_BASE + 110)
#define ERROR_FTP_DROPPED                       (INTERNET_ERROR_BASE + 111)
#define ERROR_FTP_NO_PASSIVE_MODE               (INTERNET_ERROR_BASE + 112)

//
// gopher API errors
//

#define ERROR_GOPHER_PROTOCOL_ERROR             (INTERNET_ERROR_BASE + 130)
#define ERROR_GOPHER_NOT_FILE                   (INTERNET_ERROR_BASE + 131)
#define ERROR_GOPHER_DATA_ERROR                 (INTERNET_ERROR_BASE + 132)
#define ERROR_GOPHER_END_OF_DATA                (INTERNET_ERROR_BASE + 133)
#define ERROR_GOPHER_INVALID_LOCATOR            (INTERNET_ERROR_BASE + 134)
#define ERROR_GOPHER_INCORRECT_LOCATOR_TYPE     (INTERNET_ERROR_BASE + 135)
#define ERROR_GOPHER_NOT_GOPHER_PLUS            (INTERNET_ERROR_BASE + 136)
#define ERROR_GOPHER_ATTRIBUTE_NOT_FOUND        (INTERNET_ERROR_BASE + 137)
#define ERROR_GOPHER_UNKNOWN_LOCATOR            (INTERNET_ERROR_BASE + 138)

//
// HTTP API errors
//

#define ERROR_HTTP_HEADER_NOT_FOUND             (INTERNET_ERROR_BASE + 150)
#define ERROR_HTTP_DOWNLEVEL_SERVER             (INTERNET_ERROR_BASE + 151)
#define ERROR_HTTP_INVALID_SERVER_RESPONSE      (INTERNET_ERROR_BASE + 152)
#define ERROR_HTTP_INVALID_HEADER               (INTERNET_ERROR_BASE + 153)
#define ERROR_HTTP_INVALID_QUERY_REQUEST        (INTERNET_ERROR_BASE + 154)
#define ERROR_HTTP_HEADER_ALREADY_EXISTS        (INTERNET_ERROR_BASE + 155)
#define ERROR_HTTP_REDIRECT_FAILED              (INTERNET_ERROR_BASE + 156)
#define ERROR_HTTP_NOT_REDIRECTED               (INTERNET_ERROR_BASE + 160)
#define ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION    (INTERNET_ERROR_BASE + 161)
#define ERROR_HTTP_COOKIE_DECLINED              (INTERNET_ERROR_BASE + 162)
#define ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION  (INTERNET_ERROR_BASE + 168)

//
// additional Internet API error codes
//

#define ERROR_INTERNET_SECURITY_CHANNEL_ERROR   (INTERNET_ERROR_BASE + 157)
#define ERROR_INTERNET_UNABLE_TO_CACHE_FILE     (INTERNET_ERROR_BASE + 158)
#define ERROR_INTERNET_TCPIP_NOT_INSTALLED      (INTERNET_ERROR_BASE + 159)
#define ERROR_INTERNET_DISCONNECTED             (INTERNET_ERROR_BASE + 163)
#define ERROR_INTERNET_SERVER_UNREACHABLE       (INTERNET_ERROR_BASE + 164)
#define ERROR_INTERNET_PROXY_SERVER_UNREACHABLE (INTERNET_ERROR_BASE + 165)

#define ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT    (INTERNET_ERROR_BASE + 166)
#define ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT (INTERNET_ERROR_BASE + 167)
#define ERROR_INTERNET_SEC_INVALID_CERT    (INTERNET_ERROR_BASE + 169)
#define ERROR_INTERNET_SEC_CERT_REVOKED    (INTERNET_ERROR_BASE + 170)

// InternetAutodial specific errors

#define ERROR_INTERNET_FAILED_DUETOSECURITYCHECK  (INTERNET_ERROR_BASE + 171)

#define INTERNET_ERROR_LAST                       ERROR_INTERNET_FAILED_DUETOSECURITYCHECK


//#endif // !defined(_WINERROR_)

//
// URLCACHE APIs
//

//
// datatype definitions.
//

//
// cache entry type flags.
//

#define NORMAL_CACHE_ENTRY              0x00000001
#define COOKIE_CACHE_ENTRY              0x00100000
#define URLHISTORY_CACHE_ENTRY          0x00200000
#define TRACK_OFFLINE_CACHE_ENTRY       0x00000010
#define TRACK_ONLINE_CACHE_ENTRY        0x00000020
#define STICKY_CACHE_ENTRY              0x00000004
#define SPARSE_CACHE_ENTRY              0x00010000



#define URLCACHE_FIND_DEFAULT_FILTER    NORMAL_CACHE_ENTRY             \
                                    |   COOKIE_CACHE_ENTRY             \
                                    |   URLHISTORY_CACHE_ENTRY         \
                                    |   TRACK_OFFLINE_CACHE_ENTRY      \
                                    |   TRACK_ONLINE_CACHE_ENTRY       \
                                    |   STICKY_CACHE_ENTRY



//
// INTERNET_CACHE_ENTRY_INFO -
//


typedef struct _INTERNET_CACHE_ENTRY_INFOA {
    DWORD dwStructSize;         // version of cache system.
    LPSTR lpszSourceUrlName;    // embedded pointer to the URL name string.
    LPSTR   lpszLocalFileName;  // embedded pointer to the local file name.
    DWORD CacheEntryType;       // cache type bit mask.
    DWORD dwUseCount;           // current users count of the cache entry.
    DWORD dwHitRate;            // num of times the cache entry was retrieved.
    DWORD dwSizeLow;            // low DWORD of the file size.
    DWORD dwSizeHigh;           // high DWORD of the file size.
    FILETIME LastModifiedTime;  // last modified time of the file in GMT format.
    FILETIME ExpireTime;        // expire time of the file in GMT format
    FILETIME LastAccessTime;    // last accessed time in GMT format
    FILETIME LastSyncTime;      // last time the URL was synchronized
                                // with the source
    LPBYTE lpHeaderInfo;        // embedded pointer to the header info.
    DWORD dwHeaderInfoSize;     // size of the above header.
    LPSTR   lpszFileExtension;  // File extension used to retrive the urldata as a file.
        union {                     // Exemption delta from last access time.
                DWORD dwReserved;
                DWORD dwExemptDelta;
    };                          // Exemption delta from last access
} INTERNET_CACHE_ENTRY_INFOA, * LPINTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW {
    DWORD dwStructSize;         // version of cache system.
    LPSTR lpszSourceUrlName;    // embedded pointer to the URL name string.
    LPWSTR  lpszLocalFileName;  // embedded pointer to the local file name.
    DWORD CacheEntryType;       // cache type bit mask.
    DWORD dwUseCount;           // current users count of the cache entry.
    DWORD dwHitRate;            // num of times the cache entry was retrieved.
    DWORD dwSizeLow;            // low DWORD of the file size.
    DWORD dwSizeHigh;           // high DWORD of the file size.
    FILETIME LastModifiedTime;  // last modified time of the file in GMT format.
    FILETIME ExpireTime;        // expire time of the file in GMT format
    FILETIME LastAccessTime;    // last accessed time in GMT format
    FILETIME LastSyncTime;      // last time the URL was synchronized
                                // with the source
    LPBYTE lpHeaderInfo;        // embedded pointer to the header info.
    DWORD dwHeaderInfoSize;     // size of the above header.
    LPWSTR  lpszFileExtension;  // File extension used to retrive the urldata as a file.
        union {                     // Exemption delta from last access time.
                DWORD dwReserved;
                DWORD dwExemptDelta;
    };                          // Exemption delta from last access
} INTERNET_CACHE_ENTRY_INFOW, * LPINTERNET_CACHE_ENTRY_INFOW;
#ifdef UNICODE
typedef INTERNET_CACHE_ENTRY_INFOW INTERNET_CACHE_ENTRY_INFO;
typedef LPINTERNET_CACHE_ENTRY_INFOW LPINTERNET_CACHE_ENTRY_INFO;
#else
typedef INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFO;
typedef LPINTERNET_CACHE_ENTRY_INFOA LPINTERNET_CACHE_ENTRY_INFO;
#endif // UNICODE


//
// Cache APIs
//

BOOLAPI
CreateUrlCacheEntryA(
    IN LPCSTR lpszUrlName,
    IN DWORD dwExpectedFileSize,
    IN LPCSTR lpszFileExtension,
    OUT LPSTR lpszFileName,
    IN DWORD dwReserved
    );
BOOLAPI
CreateUrlCacheEntryW(
    IN LPCSTR lpszUrlName,
    IN DWORD dwExpectedFileSize,
    IN LPCSTR lpszFileExtension,
    OUT LPWSTR lpszFileName,
    IN DWORD dwReserved
    );
#ifdef UNICODE
#define CreateUrlCacheEntry  CreateUrlCacheEntryW
#else
#define CreateUrlCacheEntry  CreateUrlCacheEntryA
#endif // !UNICODE

BOOLAPI
CommitUrlCacheEntryA(
    IN LPCSTR lpszUrlName,
    IN LPCSTR lpszLocalFileName,
    IN FILETIME ExpireTime,
    IN FILETIME LastModifiedTime,
    IN DWORD CacheEntryType,
    IN LPBYTE lpHeaderInfo,
    IN DWORD dwHeaderSize,
    IN LPCSTR lpszFileExtension,
    IN DWORD dwReserved
    );
BOOLAPI
CommitUrlCacheEntryW(
    IN LPCSTR lpszUrlName,
    IN LPCWSTR lpszLocalFileName,
    IN FILETIME ExpireTime,
    IN FILETIME LastModifiedTime,
    IN DWORD CacheEntryType,
    IN LPBYTE lpHeaderInfo,
    IN DWORD dwHeaderSize,
    IN LPCWSTR lpszFileExtension,
    IN DWORD dwReserved
    );
#ifdef UNICODE
#define CommitUrlCacheEntry  CommitUrlCacheEntryW
#else
#define CommitUrlCacheEntry  CommitUrlCacheEntryA
#endif // !UNICODE

BOOLAPI
RetrieveUrlCacheEntryFileA(
    IN LPCSTR  lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize,
    IN DWORD dwReserved
    );
BOOLAPI
RetrieveUrlCacheEntryFileW(
    IN LPCSTR  lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize,
    IN DWORD dwReserved
    );
#ifdef UNICODE
#define RetrieveUrlCacheEntryFile  RetrieveUrlCacheEntryFileW
#else
#define RetrieveUrlCacheEntryFile  RetrieveUrlCacheEntryFileA
#endif // !UNICODE

BOOLAPI
UnlockUrlCacheEntryFile(
    IN LPCSTR lpszUrlName,
    IN DWORD dwReserved
    );

INTERNETAPI
HANDLE
WINAPI
RetrieveUrlCacheEntryStreamA(
    IN LPCSTR  lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize,
    IN BOOL fRandomRead,
    IN DWORD dwReserved
    );
INTERNETAPI
HANDLE
WINAPI
RetrieveUrlCacheEntryStreamW(
    IN LPCSTR  lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize,
    IN BOOL fRandomRead,
    IN DWORD dwReserved
    );
#ifdef UNICODE
#define RetrieveUrlCacheEntryStream  RetrieveUrlCacheEntryStreamW
#else
#define RetrieveUrlCacheEntryStream  RetrieveUrlCacheEntryStreamA
#endif // !UNICODE

BOOLAPI
ReadUrlCacheEntryStream(
    IN HANDLE hUrlCacheStream,
    IN DWORD dwLocation,
    IN OUT LPVOID lpBuffer,
    IN OUT LPDWORD lpdwLen,
    IN DWORD Reserved
    );

BOOLAPI
UnlockUrlCacheEntryStream(
    IN HANDLE hUrlCacheStream,
    IN DWORD Reserved
    );


BOOLAPI
GetUrlCacheEntryInfoA(
    IN LPCSTR lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize
    );
BOOLAPI
GetUrlCacheEntryInfoW(
    IN LPCSTR lpszUrlName,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufferSize
    );
#ifdef UNICODE
#define GetUrlCacheEntryInfo  GetUrlCacheEntryInfoW
#else
#define GetUrlCacheEntryInfo  GetUrlCacheEntryInfoA
#endif // !UNICODE


BOOLAPI
GetUrlCacheEntryInfoExA(
    IN LPCSTR lpszUrl,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufSize,
    OUT LPSTR      lpszReserved,  // must pass null
    IN OUT LPDWORD lpdwReserved,  // must pass null
    LPVOID         lpReserved,    // must pass null
    DWORD          dwFlags        // reserved
    );
BOOLAPI
GetUrlCacheEntryInfoExW(
    IN LPCSTR lpszUrl,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
    IN OUT LPDWORD lpdwCacheEntryInfoBufSize,
    OUT LPSTR      lpszReserved,  // must pass null
    IN OUT LPDWORD lpdwReserved,  // must pass null
    LPVOID         lpReserved,    // must pass null
    DWORD          dwFlags        // reserved
    );
#ifdef UNICODE
#define GetUrlCacheEntryInfoEx  GetUrlCacheEntryInfoExW
#else
#define GetUrlCacheEntryInfoEx  GetUrlCacheEntryInfoExA
#endif // !UNICODE

#define CACHE_ENTRY_ATTRIBUTE_FC    0x00000004
#define CACHE_ENTRY_HITRATE_FC      0x00000010
#define CACHE_ENTRY_MODTIME_FC      0x00000040
#define CACHE_ENTRY_EXPTIME_FC      0x00000080
#define CACHE_ENTRY_ACCTIME_FC      0x00000100
#define CACHE_ENTRY_SYNCTIME_FC     0x00000200
#define CACHE_ENTRY_HEADERINFO_FC   0x00000400
#define CACHE_ENTRY_EXEMPT_DELTA_FC 0x00000800


BOOLAPI
SetUrlCacheEntryInfoA(
    IN LPCSTR lpszUrlName,
    IN LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
    IN DWORD dwFieldControl
    );
BOOLAPI
SetUrlCacheEntryInfoW(
    IN LPCSTR lpszUrlName,
    IN LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
    IN DWORD dwFieldControl
    );
#ifdef UNICODE
#define SetUrlCacheEntryInfo  SetUrlCacheEntryInfoW
#else
#define SetUrlCacheEntryInfo  SetUrlCacheEntryInfoA
#endif // !UNICODE

//
// Cache Group Functions
//

typedef LONGLONG GROUPID;

INTERNETAPI
GROUPID
WINAPI
CreateUrlCacheGroup(
    IN DWORD  dwFlags,
    IN LPVOID lpReserved  // must pass NULL
    );

BOOLAPI
DeleteUrlCacheGroup(
    IN  GROUPID GroupId,
    IN  DWORD   dwFlags,       // must pass 0
    IN  LPVOID  lpReserved     // must pass NULL
    );

// Flags for SetUrlCacheEntryGroup
#define INTERNET_CACHE_GROUP_ADD      0
#define INTERNET_CACHE_GROUP_REMOVE   1

BOOLAPI
SetUrlCacheEntryGroup(
    IN LPCSTR   lpszUrlName,
    IN DWORD    dwFlags,
    IN GROUPID  GroupId,
    IN LPBYTE   pbGroupAttributes, // must pass NULL
    IN DWORD    cbGroupAttributes, // must pass 0
    IN LPVOID   lpReserved         // must pass NULL
    );

INTERNETAPI
HANDLE
WINAPI
FindFirstUrlCacheEntryExA(
    IN     LPCSTR    lpszUrlSearchPattern,
    IN     DWORD     dwFlags,
    IN     DWORD     dwFilter,
    IN     GROUPID   GroupId,
    OUT    LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
    IN OUT LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
    OUT    LPVOID    lpGroupAttributes,     // must pass NULL
    IN OUT LPDWORD   pcbGroupAttributes,    // must pass NULL
    IN     LPVOID    lpReserved             // must pass NULL
    );
INTERNETAPI
HANDLE
WINAPI
FindFirstUrlCacheEntryExW(
    IN     LPCSTR    lpszUrlSearchPattern,
    IN     DWORD     dwFlags,
    IN     DWORD     dwFilter,
    IN     GROUPID   GroupId,
    OUT    LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
    IN OUT LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
    OUT    LPVOID    lpGroupAttributes,     // must pass NULL
    IN OUT LPDWORD   pcbGroupAttributes,    // must pass NULL
    IN     LPVOID    lpReserved             // must pass NULL
    );
#ifdef UNICODE
#define FindFirstUrlCacheEntryEx  FindFirstUrlCacheEntryExW
#else
#define FindFirstUrlCacheEntryEx  FindFirstUrlCacheEntryExA
#endif // !UNICODE

BOOLAPI
FindNextUrlCacheEntryExA(
    IN     HANDLE    hEnumHandle,
    OUT    LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
    IN OUT LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
    OUT    LPVOID    lpGroupAttributes,     // must pass NULL
    IN OUT LPDWORD   pcbGroupAttributes,    // must pass NULL
    IN     LPVOID    lpReserved             // must pass NULL
    );
BOOLAPI
FindNextUrlCacheEntryExW(
    IN     HANDLE    hEnumHandle,
    OUT    LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
    IN OUT LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
    OUT    LPVOID    lpGroupAttributes,     // must pass NULL
    IN OUT LPDWORD   pcbGroupAttributes,    // must pass NULL
    IN     LPVOID    lpReserved             // must pass NULL
    );
#ifdef UNICODE
#define FindNextUrlCacheEntryEx  FindNextUrlCacheEntryExW
#else
#define FindNextUrlCacheEntryEx  FindNextUrlCacheEntryExA
#endif // !UNICODE

INTERNETAPI
HANDLE
WINAPI
FindFirstUrlCacheEntryA(
    IN LPCSTR lpszUrlSearchPattern,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
    IN OUT LPDWORD lpdwFirstCacheEntryInfoBufferSize
    );
INTERNETAPI
HANDLE
WINAPI
FindFirstUrlCacheEntryW(
    IN LPCSTR lpszUrlSearchPattern,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
    IN OUT LPDWORD lpdwFirstCacheEntryInfoBufferSize
    );
#ifdef UNICODE
#define FindFirstUrlCacheEntry  FindFirstUrlCacheEntryW
#else
#define FindFirstUrlCacheEntry  FindFirstUrlCacheEntryA
#endif // !UNICODE

BOOLAPI
FindNextUrlCacheEntryA(
    IN HANDLE hEnumHandle,
    OUT LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,
    IN OUT LPDWORD lpdwNextCacheEntryInfoBufferSize
    );
BOOLAPI
FindNextUrlCacheEntryW(
    IN HANDLE hEnumHandle,
    OUT LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,
    IN OUT LPDWORD lpdwNextCacheEntryInfoBufferSize
    );
#ifdef UNICODE
#define FindNextUrlCacheEntry  FindNextUrlCacheEntryW
#else
#define FindNextUrlCacheEntry  FindNextUrlCacheEntryA
#endif // !UNICODE


BOOLAPI
FindCloseUrlCache(
    IN HANDLE hEnumHandle
    );

BOOLAPI
DeleteUrlCacheEntry(
    IN LPCSTR lpszUrlName
    );



//
// Autodial APIs
//

INTERNETAPI
DWORD
WINAPI
InternetDial(
    IN HWND     hwndParent,
    IN LPTSTR   lpszConnectoid,
    IN DWORD    dwFlags,
    OUT LPDWORD lpdwConnection,
    IN DWORD    dwReserved);

// Flags for InternetDial - must not conflict with InternetAutodial flags
//                          as they are valid here also.
#define INTERNET_DIAL_UNATTENDED       0x8000

INTERNETAPI
DWORD
WINAPI
InternetHangUp(
    IN DWORD    dwConnection,
    IN DWORD    dwReserved);

#define INTERENT_GOONLINE_REFRESH 0x00000001
#define INTERENT_GOONLINE_MASK 0x00000001
INTERNETAPI
BOOL
WINAPI
InternetGoOnline(
    IN LPTSTR   lpszURL,
    IN HWND     hwndParent,
    IN DWORD    dwFlags);

INTERNETAPI
BOOL
WINAPI
InternetAutodial(
    IN DWORD    dwFlags,
    IN DWORD    dwReserved);

// Flags for InternetAutodial
#define INTERNET_AUTODIAL_FORCE_ONLINE          1
#define INTERNET_AUTODIAL_FORCE_UNATTENDED      2
#define INTERNET_AUTODIAL_FAILIFSECURITYCHECK   4

#define INTERNET_AUTODIAL_FLAGS_MASK (INTERNET_AUTODIAL_FORCE_ONLINE | INTERNET_AUTODIAL_FORCE_UNATTENDED | INTERNET_AUTODIAL_FAILIFSECURITYCHECK)
INTERNETAPI
BOOL
WINAPI
InternetAutodialHangup(
    IN DWORD    dwReserved);

INTERNETAPI
BOOL
WINAPI
InternetGetConnectedState(
    OUT LPDWORD  lpdwFlags,
    IN DWORD    dwReserved);

// Flags for InternetGetConnectedState
#define INTERNET_CONNECTION_MODEM           1
#define INTERNET_CONNECTION_LAN             2
#define INTERNET_CONNECTION_PROXY           4
#define INTERNET_CONNECTION_MODEM_BUSY      8

//
// Custom dial handler functions
//

// Custom dial handler prototype
typedef DWORD (CALLBACK * PFN_DIAL_HANDLER) (HWND, LPCSTR, DWORD, LPDWORD);

// Flags for custom dial handler
#define INTERNET_CUSTOMDIAL_CONNECT         0
#define INTERNET_CUSTOMDIAL_UNATTENDED      1
#define INTERNET_CUSTOMDIAL_DISCONNECT      2
#define INTERNET_CUSTOMDIAL_SHOWOFFLINE     4

// Custom dial handler supported functionality flags
#define INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED 1
#define INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE   2
#define INTERNET_CUSTOMDIAL_CAN_HANGUP          4

INTERNETAPI
BOOL
WINAPI
InternetSetDialState(
    IN LPCTSTR  lpszConnectoid,
    IN DWORD    dwState,
    IN DWORD    dwReserved);

// States for InternetSetDialState
#define INTERNET_DIALSTATE_DISCONNECTED     1




#if defined(__cplusplus)
}
#endif


/*
 * Return packing to whatever it was before we
 * entered this file
 */
#pragma pack(pop, wininet)


#endif // !defined(_WININET_)
</code></pre><h3 id="编译步骤">编译步骤</h3>
<p>原始程序是 32 位的，原作者用 VC 编译的，我是在 Debian11 下，用 mingw64 编译的，具体编译步骤如下：</p>
<pre tabindex="0"><code>i686-w64-mingw32-gcc SetProxy.c -lwininet -O2 -o setproxy.exe
i686-w64-mingw32-strip --strip-unneeded setproxy.exe
</code></pre><h3 id="使用方式">使用方式</h3>
<pre tabindex="0"><code>setproxy.exe 127.0.0.1:1080    #设置代理服务器
setproxy.exe &quot;&quot;                #取消代理服务器
</code></pre><h3 id="结">结</h3>
<p>比较注册表方式，用起来要稳定的多，就这样开心的用起来了~</p>
]]></content>
		</item>
		
		<item>
			<title>2022 summary</title>
			<link>http://nivrrex.github.io/posts/2022-summary/</link>
			<pubDate>Fri, 30 Dec 2022 09:55:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/2022-summary/</guid>
			<description>平淡的一年
GFW 这一年里， 买了几家新的 VPS ，试用了后，或多或少有点问题，决定明年就续约那两家固定的。科学上网技术也实验了几个新的 hysteria / tuic / gost / glider / mieru / pingtunnel ，目前稳定的在使用 naiveproxy。速度不重要，稳定才重要。
路由器 这一年里，基本上没怎么在折腾路由器了，家里买了几个 WiFi6 路由器，Ruijie / H3C / TP-Link / GL-iNet 各种品牌，放在不同的地方使用，都挺稳定的。有特殊需求的，加个 Pi 盒子作为旁路由，就解决了。
编程 这一年里，程序基本上没有怎么折腾。
结 一年很快，工作很忙，平淡的过去，未必不是一种幸福~</description>
			<content type="html"><![CDATA[<p>平淡的一年</p>
<h3 id="gfw">GFW</h3>
<p>这一年里， 买了几家新的 VPS ，试用了后，或多或少有点问题，决定明年就续约那两家固定的。科学上网技术也实验了几个新的 hysteria / tuic / gost / glider / mieru / pingtunnel ，目前稳定的在使用 naiveproxy。速度不重要，稳定才重要。</p>
<h3 id="路由器">路由器</h3>
<p>这一年里，基本上没怎么在折腾路由器了，家里买了几个 WiFi6 路由器，Ruijie / H3C / TP-Link / GL-iNet 各种品牌，放在不同的地方使用，都挺稳定的。有特殊需求的，加个 Pi 盒子作为旁路由，就解决了。</p>
<h3 id="编程">编程</h3>
<p>这一年里，程序基本上没有怎么折腾。</p>
<h3 id="结">结</h3>
<p>一年很快，工作很忙，平淡的过去，未必不是一种幸福~</p>
]]></content>
		</item>
		
		<item>
			<title>2021 summary</title>
			<link>http://nivrrex.github.io/posts/2021-summary/</link>
			<pubDate>Fri, 10 Dec 2021 10:15:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/2021-summary/</guid>
			<description>折腾的一年，回归平淡
GFW 这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。
后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。
路由器 这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。
后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。
编程 这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。
关注的 nim / zig / dlang / golang 都没有太折腾。
结 发现这几年来折腾来折腾去，实际意义却不大。
有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。
不过所有能折腾的都有了了解，后边也没太大折腾的想法了。
回归平淡，不再为了折腾而折腾~</description>
			<content type="html"><![CDATA[<p>折腾的一年，回归平淡</p>
<h3 id="gfw">GFW</h3>
<p>这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。</p>
<p>后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。</p>
<h3 id="路由器">路由器</h3>
<p>这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。</p>
<p>后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。</p>
<h3 id="编程">编程</h3>
<p>这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。</p>
<p>关注的 nim / zig / dlang / golang 都没有太折腾。</p>
<h3 id="结">结</h3>
<p>发现这几年来折腾来折腾去，实际意义却不大。</p>
<p>有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。</p>
<p>不过所有能折腾的都有了了解，后边也没太大折腾的想法了。</p>
<p>回归平淡，不再为了折腾而折腾~</p>
]]></content>
		</item>
		
		<item>
			<title>dlang with ldc in mipsel</title>
			<link>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</link>
			<pubDate>Sun, 30 Aug 2020 09:19:10 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</guid>
			<description>简介 突然想用dlang语言玩玩，然后又希望能在路由器上使用(openwrt mipsel)，就实验了一下Cross-compiling with LDC，现在将具体过程记录一下。
mipsel gcc 首先需要到openwrt下载路由器对应的gcc的Cross-Compiler，我用的是mt7621的路由器，并将其下载到了 /root/mipsel/ 目录下
cd /root/ wget https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz tar xvf openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz rm openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz mkdir mipsel mv openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/* mipsel/ rm -r openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64 设置环境变量
cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrc export PATH=/root/mipsel/staging_dir/toolchain-mipsel_24kc_gcc-7.5.0_musl/bin/:$PATH export STAGING_DIR=/root/mipsel/staging_dir/:STAGING_DIR alias strip-mipsel=&amp;#39;mipsel-openwrt-linux-strip -s&amp;#39; EOF source /etc/bash.bashrc 如上，mipsel的gcc交叉编译环境就配置好了
ldc 下载 到ldc官网下载最新版本的ldc，将其下载设置到 /root/ldc2/ 目录下，并设置path环境变量
wget https://github.com/ldc-developers/ldc/releases/download/v1.23.0/ldc2-1.23.0-linux-x86_64.tar.xz tar xvf ldc2-1.23.0-linux-x86_64.tar.xz rm ldc2-1.23.0-linux-x86_64.tar.xz mv ldc2-1.23.0-linux-x86_64 ldc2 cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrc export PATH=$PATH:/root/ldc2/bin EOF source /etc/bash.bashrc 编译mipsel的runtime 需要下载 cmake ninja-build 等工具支持编译，并将编译好的 .</description>
			<content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>突然想用dlang语言玩玩，然后又希望能在路由器上使用(openwrt mipsel)，就实验了一下<a href="https://wiki.dlang.org/Cross-compiling_with_LDC">Cross-compiling with LDC</a>，现在将具体过程记录一下。</p>
<h1 id="mipsel-gcc">mipsel gcc</h1>
<p>首先需要到openwrt下载路由器对应的gcc的Cross-Compiler，我用的是mt7621的路由器，并将其下载到了 /root/mipsel/ 目录下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /root/
wget https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
tar xvf openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
rm openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
mkdir mipsel
mv openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/* mipsel/
rm -r openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64
</code></pre></div><p>设置环境变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">export PATH=/root/mipsel/staging_dir/toolchain-mipsel_24kc_gcc-7.5.0_musl/bin/:$PATH
</span><span class="s">export STAGING_DIR=/root/mipsel/staging_dir/:STAGING_DIR
</span><span class="s">alias strip-mipsel=&#39;mipsel-openwrt-linux-strip -s&#39;
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><p>如上，mipsel的gcc交叉编译环境就配置好了</p>
<h1 id="ldc-下载">ldc 下载</h1>
<p>到ldc官网下载最新版本的ldc，将其下载设置到 /root/ldc2/ 目录下，并设置path环境变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">wget https://github.com/ldc-developers/ldc/releases/download/v1.23.0/ldc2-1.23.0-linux-x86_64.tar.xz
tar xvf ldc2-1.23.0-linux-x86_64.tar.xz
rm ldc2-1.23.0-linux-x86_64.tar.xz
mv ldc2-1.23.0-linux-x86_64 ldc2

cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">export PATH=$PATH:/root/ldc2/bin
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><h1 id="编译mipsel的runtime">编译mipsel的runtime</h1>
<p>需要下载 cmake ninja-build 等工具支持编译，并将编译好的 .so .a 文件移动到/root/ldc2/ldc-runtime/mipsel目录下</p>
<pre tabindex="0"><code>apt install cmake ninja-build -y
cd /root
CC=mipsel-openwrt-linux-gcc ldc-build-runtime --ninja --dFlags=&quot;-w;-mtriple=mipsel-linux;-march=mipsel;-mcpu=mips32;--float-abi=soft&quot; --cFlags=&quot;-march=mips32&quot; --targetSystem=&quot;Linux;UNIX&quot;
mkdir /root/ldc2/ldc-runtime/mipsel -p
mv ldc-build-runtime.tmp/lib/ /root/ldc2/ldc-runtime/mipsel
rm ldc-build-runtime.tmp/ -r
</code></pre><h1 id="编译下载libexecinfo">编译下载libexecinfo</h1>
<p>如果此时直接进行编译，会出现 <strong>undefined reference to `backtrace_symbols'</strong>  错误，还需要编译libexecinfo库。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /root
wget https://github.com/mikroskeem/libexecinfo/archive/1.1-3.tar.gz
tar xvf 1.1-3.tar.gz
rm 1.1-3.tar.gz
<span class="nb">cd</span> libexecinfo-1.1-3
sed -i <span class="s2">&#34;s%CC=cc%CC=mipsel-openwrt-linux-gcc%g&#34;</span> Makefile 
sed -i <span class="s2">&#34;s%AR=ar%AR=mipsel-openwrt-linux-ar%g&#34;</span> Makefile 
make
</code></pre></div><p>编译后的库文件放置到 /root/ldc2/ldc-runtime/mipsel/lib/ 文件夹下，便于后续使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">mv libexecinfo.a /root/ldc2/ldc-runtime/mipsel/lib/
mv libexecinfo.so.1 /root/ldc2/ldc-runtime/mipsel/lib/
mv stacktraverse.So /root/ldc2/ldc-runtime/mipsel/lib/
mv execinfo.So /root/ldc2/ldc-runtime/mipsel/lib/
rm /root/libexecinfo-1.1-3/ -r
</code></pre></div><h1 id="编译d代码文件">编译.d代码文件</h1>
<p>简单的hello world代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-d" data-lang="d"><span class="kn">import</span> <span class="nn">std.stdio</span><span class="o">;</span>
<span class="kt">void</span> <span class="nf">main</span><span class="o">()</span>
<span class="o">{</span>
    <span class="n">writeln</span><span class="o">(</span><span class="s">&#34;Hello, world! dlang in mipsel!&#34;</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>编译至mipsel环境</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ldc2 -mtriple<span class="o">=</span>mipsel-linux -march<span class="o">=</span>mipsel -mcpu<span class="o">=</span>mips32 --float-abi<span class="o">=</span>soft -gcc<span class="o">=</span>mipsel-openwrt-linux-gcc --linker<span class="o">=</span>bfd -L-L/root/ldc2/ldc-runtime/mipsel/lib -defaultlib<span class="o">=</span>phobos2-ldc,druntime-ldc --platformlib<span class="o">=</span>execinfo hello.d
</code></pre></div><h1 id="设置alias">设置alias</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">alias ldc2-mipsel=&#34;ldc2 -mtriple=mipsel-linux -march=mipsel -mcpu=mips32 --float-abi=soft --release -Os -gcc=mipsel-openwrt-linux-gcc --linker=bfd -L-L/root/ldc2/ldc-runtime/mipsel/lib -defaultlib=phobos2-ldc,druntime-ldc --platformlib=execinfo&#34;
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><h1 id="结">结</h1>
<p>至此，dlang在linux环境下，编译mipsel架构的编译环境就搭配好了，平时可以用dlang针对mipsel的openwrt路由器写点小工具啦~</p>
]]></content>
		</item>
		
		<item>
			<title>compile nim with tcc</title>
			<link>http://nivrrex.github.io/posts/compile-nim-with-tcc/</link>
			<pubDate>Sun, 17 Nov 2019 09:09:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/compile-nim-with-tcc/</guid>
			<description>缘来 Nim语言可以转换成C、C++、Objective-C、JavaScript等语言，其中C语言默认是转换成GCC进行编译的，相较于Go语言来说，编译速度还是有点慢的。于是兴起了用Tcc编译器编译Nim语言的想法。
 配置 其实配置很简单，打开nim\config\nim.cfg文件
cc = gcc 修改为 cc = tcc 结 就这样，保存文件配置完成后，就可以用Tcc编译Nim语言啦~</description>
			<content type="html"><![CDATA[<h3 id="缘来">缘来</h3>
<p>Nim语言可以转换成C、C++、Objective-C、JavaScript等语言，其中C语言默认是转换成GCC进行编译的，相较于Go语言来说，编译速度还是有点慢的。于是兴起了用Tcc编译器编译Nim语言的想法。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="配置">配置</h3>
<p>其实配置很简单，打开nim\config\nim.cfg文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">cc</span> <span class="o">=</span> gcc
修改为
<span class="nv">cc</span> <span class="o">=</span> tcc
</code></pre></div><h3 id="结">结</h3>
<p>就这样，保存文件配置完成后，就可以用Tcc编译Nim语言啦~</p>
]]></content>
		</item>
		
		<item>
			<title>crosscompiling for openwrt with golang</title>
			<link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</link>
			<pubDate>Fri, 15 Nov 2019 23:29:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</guid>
			<description>缘来 实验了下nim语言(nimlang)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。
 Golang支持的交叉编译平台 amd64 (also known as x86-64) A mature implementation. 386 (x86 or x86-32) Comparable to the amd64 port. arm (ARM) Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports. arm64 (AArch64) Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports. ppc64, ppc64le (64-bit PowerPC big- and little-endian) Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</description>
			<content type="html"><![CDATA[<h3 id="缘来">缘来</h3>
<p>实验了下nim语言(<a href="https://nim-lang.org/">nimlang</a>)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="golang支持的交叉编译平台">Golang支持的交叉编译平台</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">amd64 <span class="o">(</span>also known as x86-64<span class="o">)</span>
A mature implementation.

<span class="m">386</span> <span class="o">(</span>x86 or x86-32<span class="o">)</span>
Comparable to the amd64 port.

arm <span class="o">(</span>ARM<span class="o">)</span>
Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports.

arm64 <span class="o">(</span>AArch64<span class="o">)</span>
Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports.

ppc64, ppc64le <span class="o">(</span>64-bit PowerPC big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.5 and not as well exercised as other ports.

mips, mipsle <span class="o">(</span>32-bit MIPS big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.8 and not as well exercised as other ports.

mips64, mips64le <span class="o">(</span>64-bit MIPS big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.6 and not as well exercised as other ports.

s390x <span class="o">(</span>IBM System z<span class="o">)</span>
Supports Linux binaries. New in 1.7 and not as well exercised as other ports.

wasm <span class="o">(</span>WebAssembly<span class="o">)</span>
Targets the WebAssembly platform. New in 1.11 and not as well exercised as other ports.
</code></pre></div><h3 id="golang针对mips系统的交叉编译">Golang针对mips系统的交叉编译</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>mips go build -ldflags<span class="o">=</span><span class="s2">&#34;-s -w&#34;</span> test.go
</code></pre></div><p>直接指定目标系统和CPU架构，就直接可以编译生成对应平台下的可执行文件</p>
<p>在mips架构下，如OpenWRT系统，文件执行时出现&quot;Illegal instruction&quot;错误，注意加上GOMIPS=softfloat变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>mips <span class="nv">GOMIPS</span><span class="o">=</span>softfloat go build -ldflags<span class="o">=</span><span class="s2">&#34;-s -w&#34;</span> test.go
</code></pre></div><h3 id="结">结</h3>
<p>就这样，golang可以更简单的直接生成对应系统和CPU架构下的可执行文件~</p>
]]></content>
		</item>
		
		<item>
			<title>crosscompiling for openwrt with nim</title>
			<link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</link>
			<pubDate>Fri, 15 Nov 2019 23:21:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</guid>
			<description>缘来 nim语言(nimlang)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。
 Debian系统下下载nim语言 sh -c &amp;#39;printf &amp;#34;deb http://ftp.cn.debian.org/debian/ sid main&amp;#34; &amp;gt; /etc/apt/sources.list.d/sid.list&amp;#39; apt update apt -t sid install nim -y Debian系统下安装gcc等编译环境 apt-get install build-essential 下载对应架构的OpenWRT编译工具链toolchain wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz rm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz 设置环境并进行编译 export PATH=/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:$PATH nim -d:release --opt=size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim 结 就这样，就可以生成对应路由器下的可执行文件啦~</description>
			<content type="html"><![CDATA[<h3 id="缘来">缘来</h3>
<p>nim语言(<a href="https://nim-lang.org/">nimlang</a>)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="debian系统下下载nim语言">Debian系统下下载nim语言</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sh -c <span class="s1">&#39;printf &#34;deb http://ftp.cn.debian.org/debian/ sid main&#34; &gt; /etc/apt/sources.list.d/sid.list&#39;</span>
apt update
apt -t sid install nim -y
</code></pre></div><h3 id="debian系统下安装gcc等编译环境">Debian系统下安装gcc等编译环境</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">apt-get install build-essential
</code></pre></div><h3 id="下载对应架构的openwrt编译工具链toolchain">下载对应架构的OpenWRT编译工具链toolchain</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
tar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
rm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
</code></pre></div><h3 id="设置环境并进行编译">设置环境并进行编译</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:<span class="nv">$PATH</span>
nim -d:release --opt<span class="o">=</span>size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim
</code></pre></div><h3 id="结">结</h3>
<p>就这样，就可以生成对应路由器下的可执行文件啦~</p>
]]></content>
		</item>
		
		<item>
			<title>ubnt er-x use openwrt</title>
			<link>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</link>
			<pubDate>Mon, 09 Jul 2018 20:12:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</guid>
			<description>给UBNT的ER-X刷OpenWrt固件
缘 UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。
于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 https://cokebar.info/archives/664 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。
安装 前期问题 刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。
于是到 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=15243 帖子中和国外的一个帖子中提到的 http://s000.tinyupload.com/index.php?file_id=07741512272586742124 ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：
Request timed out而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。
恢复官方固件 后来在 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=19800 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：
##这一部分不是帖子的内容，是前期准备工作#在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tartar -xf ER-e50.</description>
			<content type="html"><![CDATA[<p>给UBNT的ER-X刷OpenWrt固件</p>
<h3 id="缘">缘</h3>
<p>UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。</p>
<p>于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 <a href="https://cokebar.info/archives/664">https://cokebar.info/archives/664</a> 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。</p>
<!-- raw HTML omitted -->
<h3 id="安装">安装</h3>
<h4 id="前期问题">前期问题</h4>
<p>刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。</p>
<p>于是到 <a href="http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=15243">http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=15243</a> 帖子中和国外的一个帖子中提到的 <a href="http://s000.tinyupload.com/index.php?file_id=07741512272586742124">http://s000.tinyupload.com/index.php?file_id=07741512272586742124</a> ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：</p>
<pre tabindex="0"><code>Request timed out
</code></pre><p>而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。</p>
<h4 id="恢复官方固件">恢复官方固件</h4>
<p>后来在 <a href="http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=19800">http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=19800</a> 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：</p>
<pre tabindex="0"><code>##这一部分不是帖子的内容，是前期准备工作
#在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下
wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tar
tar -xf ER-e50.v1.7.0.4783374.tar
rm ER-e50.v1.7.0.4783374.tar
#解压后应该有6个文件 compat  squashfs.tmp  squashfs.tmp.md5  version.tmp  vmlinux.tmp  vmlinux.tmp.md5
scp -P 22 compat squashfs.tmp squashfs.tmp.md5 version.tmp vmlinux.tmp vmlinux.tmp.md5 root@192.168.1.1:/root


##以下是帖子中提到各个步骤
#登录路由器后，还原ubnt系统
cd /root
ubidetach -p /dev/mtd5
ubiformat /dev/mtd5
ubiattach -p /dev/mtd5
ubimkvol /dev/ubi0 --vol_id=0 --lebs=1925 --name=troot
mount -o sync -t ubifs ubi0:troot /mnt/

cp version.tmp /mnt/version 
cp squashfs.tmp /mnt/squashfs.img
cp squashfs.tmp.md5 /mnt/squashfs.img.md5

dd if=vmlinux.tmp of=/dev/mtdblock3
dd if=vmlinux.tmp of=/dev/mtdblock4

reboot
</code></pre><p>正常重启后，应该就恢复成官方1.7系统了，然后注意把网线接入Eth0口，正常配置下 edgeRouter 系统就行了。</p>
<p><strong>注意</strong>：目前实验的，似乎只有上边的两个装不了新软件的 OpenWrt 系统的可以刷回官方系统，OpenWrt 官方的系统刷机时，会出现以下错误（但是应该用TTL线还是可以刷回官方系统的，可以参考上边的帖子的前半部分内容）：</p>
<pre tabindex="0"><code>ubidetach: error!: cannot detach &quot;/dev/mtd5&quot;
           error 16 (Resource busy)
</code></pre><h3 id="柳暗花明">柳暗花明</h3>
<p>刷会官方系统后，本来以为没办法了。后来搜索到一个网站 <a href="https://wiki.opennet-initiative.de/wiki/Ubiquiti_EdgeRouter">https://wiki.opennet-initiative.de/wiki/Ubiquiti_EdgeRouter</a> ,似乎是一个在 OpenWrt 系统上叠加 OpenNet 安全网络的组织。网页上有详细的从官方系统刷新到 OpenWrt系统的说明，而且有对应的固件。</p>
<h4 id="安装initramfs-factory">安装initramfs-factory</h4>
<p>按该网站的说明，首先从官方系统，刷新成OpenWrt系统，下面记录下具体的步骤</p>
<pre tabindex="0"><code>#PC上下载factory固件，并上传
wget http://downloads.opennet-initiative.de/ubnt/edgeos/openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar
scp -P 22 openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar ubnt@192.168.1.1:/tmp

#登录路由器，并添加OpenWrt系统
ssh -p 22 ubnt@192.168.1.1   #密码ubnt
cd /tmp
add system image openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar
show system image
reboot 
</code></pre><p>正常情况下，重启后，将进入 OpenNet 的 OpenWrt 系统，然后可以刷新最新的 OpenWrt 系统（应该也可以刷新 OpenWrt 的官方系统，这里是更新成了 OpenNet 的系统）</p>
<h4 id="更新squashfs-sysupgrade">更新squashfs-sysupgrade</h4>
<pre tabindex="0"><code>#PC上下载sysupgrade固件，并上传
wget http://downloads.opennet-initiative.de/openwrt/stable/latest/targets/ramips/mt7621/lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar
scp -P 22 lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar root@192.168.1.1:/tmp

#登录路由器，并更新OpenWrt系统
ssh -p 22 root@192.168.1.1
cd /tmp
sysupgrade lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar
</code></pre><p>sysupgrade 更新后会自动重启，结束后就是 OpenNet 的最新的 OpenWrt 系统了。我是在这个系统基础上，又更新成官方的 OpenWrt 系统了。</p>
<p><strong>注意</strong>： OpenNet 的 OpenWrt 系统，网段是172.16.0.1/24 , 帐号root , 密码admin</p>
<h3 id="结">结</h3>
<p>至此，ER-X 刷新 OpenWrt 系统成功。（如果此时还想恢复官方系统，就必须通过TTL线了）</p>
<p>虽然 OpenWrt 对比 Ubnt 的 edgeRouter 系统可能性能有点弱势，但是比不了方便啊，而且支持 OpenWrt 的翻墙类软件还是比较丰富和更新及时的，就这样用啦~</p>
]]></content>
		</item>
		
		<item>
			<title>use cmder</title>
			<link>http://nivrrex.github.io/posts/use-cmder/</link>
			<pubDate>Mon, 04 Jun 2018 14:24:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/use-cmder/</guid>
			<description>缘来 Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了cmder这个很方便的替代windows自带命令行的好工具，记录一下。
 介绍 cmder由3部分组成：
ConEmu ConEmu 是一套 Windows 控制台模拟器 (console emulator)
Clink Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力
msysgit 提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &amp;hellip; 等
安装 安裝 cmder
先到 cmder 官网 http://cmder.net/ 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。
外部链接 具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：
  介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 ) https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx
  Win下必备神器之Cmder https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/
  cmder 一个比cmd强n倍的神器 https://www.jianshu.com/p/7a706c0a3411
  配置 注册Cmder，文档的右键菜单添加Cmder here Cmder.</description>
			<content type="html"><![CDATA[<h3 id="缘来">缘来</h3>
<p>Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了<a href="http://cmder.net/">cmder</a>这个很方便的替代windows自带命令行的好工具，记录一下。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="介绍">介绍</h3>
<p>cmder由3部分组成：</p>
<h5 id="conemuhttpsconemugithubioen"><a href="https://conemu.github.io/en/">ConEmu</a></h5>
<p>ConEmu 是一套 Windows 控制台模拟器 (console emulator)</p>
<h5 id="clinkhttpsgithubcommridgersclink"><a href="https://github.com/mridgers/clink">Clink</a></h5>
<p>Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力</p>
<h5 id="msysgithttpsgithubcommsysgitmsysgit"><a href="https://github.com/msysgit/msysgit">msysgit</a></h5>
<p>提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &hellip; 等</p>
<h3 id="安装">安装</h3>
<p>安裝 cmder</p>
<p>先到 cmder 官网 <a href="http://cmder.net/">http://cmder.net/</a> 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。</p>
<h3 id="外部链接">外部链接</h3>
<p>具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：</p>
<ul>
<li>
<p>介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 )
<a href="https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx">https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx</a></p>
</li>
<li>
<p>Win下必备神器之Cmder
<a href="https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/">https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/</a></p>
</li>
<li>
<p>cmder 一个比cmd强n倍的神器
<a href="https://www.jianshu.com/p/7a706c0a3411">https://www.jianshu.com/p/7a706c0a3411</a></p>
</li>
</ul>
<h3 id="配置">配置</h3>
<h4 id="注册cmder文档的右键菜单添加cmder-here">注册Cmder，文档的右键菜单添加Cmder here</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">Cmder.exe /REGISTER ALL
</code></pre></div><h4 id="cmder使用ls中文显示乱码解决方案">Cmder使用ls中文显示乱码解决方案</h4>
<h5 id="方案1">方案1</h5>
<p>默认配置不支持使用ls显示中文命名的文件列表。</p>
<p>解决方法：
按下Win+Alt+P打开设置。
在StartUp - Environment里添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">set</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
<span class="nb">set</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.GBK
<span class="nb">set</span> <span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.utf8
</code></pre></div><p>保存配置</p>
<p>重启Cmder，发现使用ls，中文正确显示了。</p>
<h5 id="备注">备注</h5>
<p>因ConEmu的bug，该设置无法保存，可以去
<a href="https://github.com/Maximus5/ConEmu/releases">https://github.com/Maximus5/ConEmu/releases</a>
下载最新或历史版本的ConEmu，替换Cmder自带的版本，则可以解决这个问题</p>
<h5 id="方案2">方案2</h5>
<p>修改cmder\vendor\conemu-maximus5\ConEmu.xml文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">&lt;value <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;EnvironmentSet&#34;</span> <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;multi&#34;</span>&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set PATH=%ConEmuBaseDir%\Scripts;%PATH%&#34;</span>/&gt;
&lt;/value&gt;
</code></pre></div><p>修改添加为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">&lt;value <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;EnvironmentSet&#34;</span> <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;multi&#34;</span>&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set PATH=%ConEmuBaseDir%\Scripts;%PATH%&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LANG=zh_CN.UTF-8&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LANG=zh_CN.gbk&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LC_ALL=zh_CN.utf8&#34;</span>/&gt;
&lt;/value&gt;
</code></pre></div><h3 id="结">结</h3>
<p>就这样，配置完成后，就可以用啦~</p>
]]></content>
		</item>
		
		<item>
			<title>change hexo to hugo</title>
			<link>http://nivrrex.github.io/posts/change-hexo-to-hugo/</link>
			<pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/change-hexo-to-hugo/</guid>
			<description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
 A fast and modern static website engine Language:Go License:APL 2.0  目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename 主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio hermit主题
 Hugo Themes Site hugoThemes: All Themes Hugo  安装比较简单：
cd themes git clone https://github.com/Track3/hermit.git themes/hermit 生成页面 hugo new posts/about.md 然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor</description>
			<content type="html"><![CDATA[<h4 id="缘由">缘由</h4>
<p>好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。
而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。</p>
<p>于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：</p>
<p><strong><a href="https://gohugo.io/">hugo</a></strong> 这个go语言写的大杀器。</p>
<ul>
<li>A fast and modern static website engine</li>
<li>Language:Go</li>
<li>License:APL 2.0</li>
</ul>
<p>目前在<a href="https://www.staticgen.com/">StaticGen</a>上排名已经超过<a href="hexo.io">Hexo</a>了，仅次于<a href="jekyllrb.com">Jekyll</a>，于是兴起了试用的念头。</p>
<h4 id="迁移">迁移</h4>
<p>因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章<a href="https://github.com/nodejh/nodejh.github.io/issues/11">从 Hexo 迁移到 Hugo</a>介绍了如何迁移</p>
<h4 id="下载hugo">下载hugo</h4>
<p>hugo就是一个执行文件，可以直接从<a href="https://github.com/spf13/hugo/releases">官网</a>下载</p>
<p>windows下执行环境可以参考<a href="https://gohugo.io/tutorials/installing-on-windows/">https://gohugo.io/tutorials/installing-on-windows/</a></p>
<h4 id="生成站点">生成站点</h4>
<p>可以到<a href="http://gohugo.io/overview/introduction/">Hugo - Introduction to Hugo</a>自行学习</p>
<p><strong><a href="http://gohugo.io/overview/quickstart/">Hugo - Hugo Quickstart Guide</a></strong>  快速上手指南</p>
<p>生成站点比较简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo new site sitename
</code></pre></div><h4 id="主题">主题</h4>
<p>可以到以下站址找自己喜欢的主题，我选择的是 <del><a href="https://themes.gohugo.io/hugo_eiio/">hugo_eiio</a></del> <a href="https://github.com/Track3/hermit">hermit</a>主题</p>
<ul>
<li><a href="https://themes.gohugo.io/">Hugo Themes Site</a></li>
<li><a href="https://github.com/spf13/hugoThemes">hugoThemes: All Themes Hugo</a></li>
</ul>
<p>安装比较简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> themes
git clone https://github.com/Track3/hermit.git themes/hermit
</code></pre></div><h4 id="生成页面">生成页面</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/about.md
</code></pre></div><p>然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 <a href="https://github.com/jijinggang/MarkdownEditor">MarkdownEditor</a></p>
<h4 id="本地测试">本地测试</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo server --buildDrafts --watch --theme themename
</code></pre></div><p>运行后可以在 <a href="http://localhost:1313/">http://localhost:1313/</a> 查看具体效果</p>
<h4 id="生成静态页面">生成静态页面</h4>
<p>还是一个命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><p>基本上页面数量少的话，都是在ms级别，生成文件在public文件夹内</p>
<h4 id="发布到github">发布到github</h4>
<p>将public文件夹中文件和github.io进行同步即可</p>
<hr>
<h4 id="结">结</h4>
<p>至此，新的blog已经搭建完成了，虽然存在现在theme没有之前用hexo的theme好看，但是胜在简单，而且后续还可以自己慢慢调整，整体还是比较喜欢的 ^o^ ~</p>
]]></content>
		</item>
		
		<item>
			<title>start to use python</title>
			<link>http://nivrrex.github.io/posts/start-to-use-python/</link>
			<pubDate>Mon, 04 Apr 2016 09:05:37 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/start-to-use-python/</guid>
			<description>缘来 最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。
 开始 整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。
整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。
Python3 vs Python2 这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。
但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。
print无法输出中文 这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：
import io, sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&amp;#39;utf8&amp;#39;) 相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。
Python VS Ruby 这个题目比较大，只能简单的就第一感觉来说：
Python的好处就是编码样式比较统一，第三方类库超多。 可以关注自己需要解决的问题，不用费心思在语法细节上。 Ruby的优势是处理文本效率很高，语法糖很多，用起来很省心。 但是第三方类库和Python相比差距还是比较大。 结 其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。
最终还是选择了Python，而且可能近期都会使用它。</description>
			<content type="html"><![CDATA[<h4 id="缘来">缘来</h4>
<p>最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="开始">开始</h4>
<p>整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。</p>
<p>整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。</p>
<h4 id="python3-vs-python2">Python3 vs Python2</h4>
<p>这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。</p>
<p>但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。</p>
<h4 id="print无法输出中文">print无法输出中文</h4>
<p>这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">io</span><span class="o">,</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">TextIOWrapper</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">buffer</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</code></pre></div><p>相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。</p>
<h4 id="python-vs-ruby">Python VS Ruby</h4>
<p>这个题目比较大，只能简单的就第一感觉来说：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Python的好处就是编码样式比较统一</span><span class="err">，</span><span class="n">第三方类库超多</span><span class="err">。</span>
<span class="n">可以关注自己需要解决的问题</span><span class="err">，</span><span class="n">不用费心思在语法细节上</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="no">Ruby的优势是处理文本效率很高</span><span class="err">，语法糖很多，用起来很省心。</span>
<span class="err">但是第三方类库和</span><span class="no">Python相比差距还是比较大</span><span class="err">。</span>
</code></pre></div><h4 id="结">结</h4>
<p>其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。</p>
<p>最终还是选择了Python，而且可能近期都会使用它。</p>
]]></content>
		</item>
		
		<item>
			<title>change editer with sublime text</title>
			<link>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</link>
			<pubDate>Sat, 01 Aug 2015 15:41:45 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</guid>
			<description>来由 本来一直使用的编译器是SciTE，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。 最近看了Golang中国的教学视频，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇Sublime Text 全程指南，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。
Sublime Text安装 首先到Sublime Text的官网下载最新的版本，我下载的是3.3083的portable version版 然后是最重要的事情了，安装Package Control,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。 打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：
import urllib.request,os,hashlib; h = &amp;#39;6f4c264a24d933ce70df5dedcf1dcaee&amp;#39; + &amp;#39;ebe013ee18cced0ef93d5f746d80ef60&amp;#39;; pf = &amp;#39;Package Control.sublime-package&amp;#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &amp;#39;http://packagecontrol.io/&amp;#39; + pf.replace(&amp;#39; &amp;#39;, &amp;#39;%20&amp;#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&amp;#39;Error validating download (got %sinstead of %s), please try manual install&amp;#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &amp;#39;wb&amp;#39; ).</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>本来一直使用的编译器是<a href="http://www.scintilla.org/SciTE.html">SciTE</a>，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。
最近看了<a href="http://www.tudou.com/home/golang/item/">Golang中国的教学视频</a>，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇<a href="http://www.linuxeden.com/html/news/20150730/162107.html">Sublime Text 全程指南</a>，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。</p>
<!-- raw HTML omitted -->
<h4 id="sublime-text安装">Sublime Text安装</h4>
<p>首先到Sublime Text的<a href="http://www.sublimetext.com/">官网</a>下载最新的版本，我下载的是3.3083的portable version版
然后是最重要的事情了，安装<a href="https://packagecontrol.io/installation#st3">Package Control</a>,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。
打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">urllib.request</span><span class="o">,</span><span class="nn">os</span><span class="o">,</span><span class="nn">hashlib</span><span class="p">;</span> <span class="n">h</span> <span class="o">=</span> <span class="s1">&#39;6f4c264a24d933ce70df5dedcf1dcaee&#39;</span> <span class="o">+</span> <span class="s1">&#39;ebe013ee18cced0ef93d5f746d80ef60&#39;</span><span class="p">;</span> <span class="n">pf</span> <span class="o">=</span> <span class="s1">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span> <span class="o">=</span> <span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">())</span> <span class="p">);</span> <span class="n">by</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span> <span class="s1">&#39;http://packagecontrol.io/&#39;</span> <span class="o">+</span> <span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">();</span> <span class="n">dh</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">by</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Error validating download (got </span><span class="si">%s</span><span class="s1"> instead of </span><span class="si">%s</span><span class="s1">), please try manual install&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">dh</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span> <span class="k">if</span> <span class="n">dh</span> <span class="o">!=</span> <span class="n">h</span> <span class="k">else</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">ipp</span><span class="p">,</span> <span class="n">pf</span><span class="p">),</span> <span class="s1">&#39;wb&#39;</span> <span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">by</span><span class="p">)</span>
</code></pre></div><h4 id="package-control及插件安装">Package Control及插件安装</h4>
<p>根据提示，重启Sublime Text即可完成安装。
在Sublime Text中按ctrl+shift+p快捷键，即可调出Package Control控制台，它可以对Packages完成以下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">install
remove
list
<span class="nb">enable</span>
disable
upgrade
</code></pre></div><p>根据我的需求，我安装了以下插件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">GoSublime             <span class="c1">#go语言提示插件</span>
SideBarEnhancements   <span class="c1">#侧边栏增强插件</span>
All Autocomplete      <span class="c1">#自动完成增强插件</span>
ConvertToUTF8         <span class="c1">#GBK等中文文件编码增强插件</span>
Markdown Preview      <span class="c1">#Markdown文件预览插件</span>
Markdown Extended     <span class="c1">#Markdown语法扩展插件，可以对代码区域进行语法高亮</span>
Monokai Extended      <span class="c1">#主题插件，但是可以对Markdown进行语法高亮</span>
JSONLint              <span class="c1">#JSON的智能提示插件，对出错的语法进行实时标注</span>
JSFormat              <span class="c1">#可以对javascript进行格式化输出，同样对JSON也可以格式化</span>
Material Theme        <span class="c1">#语法高亮插件，Material MonoKai</span>
</code></pre></div><h4 id="sublime-text配置">Sublime Text配置</h4>
<p>Sublime Text3的配置，主要采用JSON格式，后缀名是sublime-settings
不知道是不是Bug，其主要配置需要手动创建，菜单无法选择（后来证实是汉化包的Bug），于是根据网上提示，新建
C:\Sublime Text\Data\Packages\User\Preferences.sublime-settings文件，输入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;font_face&#34;</span><span class="p">:</span> <span class="s2">&#34;Consolas&#34;</span><span class="p">,</span>                            <span class="c1">//字体名称
</span><span class="c1"></span>    <span class="nt">&#34;font_size&#34;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>                                    <span class="c1">//字体大小
</span><span class="c1"></span>
    <span class="nt">&#34;caret_style&#34;</span><span class="p">:</span> <span class="s2">&#34;phase&#34;</span><span class="p">,</span>                             <span class="c1">//光标闪烁
</span><span class="c1"></span>    <span class="nt">&#34;wide_caret&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                                 <span class="c1">//光标变粗
</span><span class="c1"></span>
    <span class="nt">&#34;draw_white_space&#34;</span><span class="p">:</span> <span class="s2">&#34;all&#34;</span><span class="p">,</span>                          <span class="c1">//显示所有空白符号
</span><span class="c1"></span>    <span class="nt">&#34;highlight_line&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                             <span class="c1">//高亮当前行
</span><span class="c1"></span>    <span class="nt">&#34;highlight_modified_tabs&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                    <span class="c1">//编辑过的标签高亮显示
</span><span class="c1"></span>
    <span class="nt">&#34;auto_complete_commit_on_tab&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                <span class="c1">//tab键自动完成
</span><span class="c1"></span>    <span class="nt">&#34;tab_size&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>                                      <span class="c1">//tab键长度
</span><span class="c1"></span>    <span class="nt">&#34;translate_tabs_to_spaces&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                   <span class="c1">//自动将tab转换成空格
</span><span class="c1"></span>
    <span class="nt">&#34;spell_check&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>                               <span class="c1">//语法检查
</span><span class="c1"></span>    <span class="nt">&#34;trim_trailing_white_space_on_save&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>          <span class="c1">//删除行尾的空格
</span><span class="c1"></span>    <span class="nt">&#34;ensure_newline_at_eof_on_save&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>              <span class="c1">//文件结束后保存加入新行
</span><span class="c1"></span>
    <span class="nt">&#34;update_check&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>                              <span class="c1">//禁止自动更新
</span><span class="c1"></span>
    <span class="nt">&#34;color_scheme&#34;</span><span class="p">:</span> <span class="s2">&#34;Packages/Monokai Extended/Monokai Extended Bright.tmTheme&#34;</span><span class="p">,</span>     <span class="c1">//主题包Monokai
</span><span class="c1"></span>
    <span class="nt">&#34;ignored_packages&#34;</span><span class="p">:</span>                                 <span class="c1">//忽略的包
</span><span class="c1"></span>    <span class="p">[</span>
        <span class="s2">&#34;Vintage&#34;</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><h4 id="gosublime配置">GoSublime配置</h4>
<p>因为我用Golang和Ruby比较多，在安装了GoSublime后，还需要配置下GoSublime，以便进行编译
路径如下：&ldquo;Preferences&rdquo; - &ldquo;Package Setting&rdquo; - &ldquo;GoSublime&rdquo; - &ldquo;Settings User&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;env&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;PATH&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\bin&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOPATH&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\import&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOROOT&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOBIN&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\bin&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOOS&#34;</span><span class="p">:</span><span class="s2">&#34;windows&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;build_command&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;go&#34;</span><span class="p">,</span><span class="s2">&#34;run&#34;</span><span class="p">,</span><span class="s2">&#34;$_fn&#34;</span><span class="p">],</span>

    <span class="nt">&#34;fmt_enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;fmt_tab_indent&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nt">&#34;fmt_tab_width&#34;</span><span class="p">:</span> <span class="mi">4</span>
<span class="p">}</span>
</code></pre></div><h4 id="tinycc编译系统">TinyCC编译系统</h4>
<p>因为我偶尔用TinyCC编译小的C语言程序，所以自定义了一个编译系统，具体代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;C:\\ Sublime Text\\tcc\\&#34;</span><span class="p">,</span>
  <span class="nt">&#34;file_regex&#34;</span><span class="p">:</span> <span class="s2">&#34;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&#34;</span><span class="p">,</span>
  <span class="nt">&#34;working_dir&#34;</span><span class="p">:</span> <span class="s2">&#34;${file_path}&#34;</span><span class="p">,</span>
  <span class="nt">&#34;selector&#34;</span><span class="p">:</span> <span class="s2">&#34;source.c&#34;</span><span class="p">,</span>

  <span class="nt">&#34;variants&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Run&#34;</span><span class="p">,</span>
      <span class="nt">&#34;cmd&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tcc&#34;</span><span class="p">,</span> <span class="s2">&#34;-run&#34;</span><span class="p">,</span> <span class="s2">&#34;${file}&#34;</span><span class="p">],</span>
      <span class="nt">&#34;working_dir&#34;</span><span class="p">:</span> <span class="s2">&#34;${file_path}&#34;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><h4 id="f5快捷键">F5快捷键</h4>
<p>平时喜欢把F5设置成脚本Run的快捷键盘，具体设置路径如下：”Preferences” - “Key Bindings”，在右部的User文件C:\Sublime Text\Data\Packages\User\Default (Windows).sublime-keymap增加如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json">    <span class="p">{</span> <span class="nt">&#34;keys&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;f5&#34;</span><span class="p">],</span> <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;build&#34;</span> <span class="p">}</span><span class="err">,</span>
</code></pre></div><h4 id="结">结</h4>
<p>试用了几天后，Sublime Text是比Scite要强大的多，虽然Scite也可以进行很多的配置，关键是Package Control上现成的插件太多了，有人维护的话，真是太省心了呢，已经将以前针对Scite写的部分脚本转移到Sublime Text上了，开心的编程啦~ ^o^/</p>
]]></content>
		</item>
		
		<item>
			<title>update debian linux image with backports</title>
			<link>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</link>
			<pubDate>Mon, 27 Jul 2015 22:36:17 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</guid>
			<description>来由 因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。
 如何查看Linux版本 共有5种方式，具体如下
cat /etc/*-release lsb_release -a cat /proc/version uname -a #uname -mrs cat /etc/issue 我的Debian更新过，显示是
Debian GNU/Linux 8.1 (jessie) 但是，内核为什么还是
Linux 2.6.32-042stab093.4 i686 好吧，更新，更新！
使用Backports源 对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目
其官方Wiki上面说
Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。
开始更新 更新软件源 首先在apt的sources.list文件中添加Backports源
vi /etc/apt/sources.list 添加如下内容
deb http://ftp.debian.org/debian/ jessie-backports main deb-src http://ftp.debian.org/debian/ jessie-backports main 更新数据
sudo apt-get update #sudo apt-get -t jessie-backports upgrade 搜索并安装linux-image文件 安装aptitude，以便搜索最新的linux-image文件
apt-get install aptitude aptitude search kernel-image 根据搜索出来的内核文件，进行安装，我的是
sudo apt-get -t jessie-backports install linux-image-3.</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="如何查看linux版本">如何查看Linux版本</h4>
<p>共有5种方式，具体如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">cat /etc/*-release
lsb_release -a
cat /proc/version
uname -a  <span class="c1">#uname -mrs</span>
cat /etc/issue
</code></pre></div><p>我的Debian更新过，显示是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">Debian GNU/Linux 8.1 <span class="o">(</span>jessie<span class="o">)</span>
</code></pre></div><p>但是，内核为什么还是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">Linux 2.6.32-042stab093.4 i686
</code></pre></div><p>好吧，更新，更新！</p>
<h4 id="使用backports源">使用Backports源</h4>
<p>对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目</p>
<p>其<a href="https://wiki.debian.org/zh_CN/Backports">官方Wiki</a>上面说</p>
<p>Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。</p>
<h4 id="开始更新">开始更新</h4>
<h6 id="更新软件源">更新软件源</h6>
<p>首先在apt的sources.list文件中添加Backports源</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/apt/sources.list
</code></pre></div><p>添加如下内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">deb http://ftp.debian.org/debian/ jessie-backports main
deb-src http://ftp.debian.org/debian/ jessie-backports main
</code></pre></div><p>更新数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update
<span class="c1">#sudo apt-get -t jessie-backports upgrade</span>
</code></pre></div><h6 id="搜索并安装linux-image文件">搜索并安装linux-image文件</h6>
<p>安装aptitude，以便搜索最新的linux-image文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">apt-get install aptitude
aptitude search kernel-image
</code></pre></div><p>根据搜索出来的内核文件，进行安装，我的是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get -t jessie-backports install linux-image-3.16.0-4-686-pae
<span class="c1">#sudo apt-get -t jessie-backports install linux-image-686-pae</span>
</code></pre></div><h6 id="显示已安装的linux-image内核版本">显示已安装的linux-image内核版本</h6>
<p>显示已经安装的linux-image内核版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">dpkg --get-selections <span class="p">|</span>grep linux-image
</code></pre></div><h6 id="删除旧内核">删除旧内核</h6>
<p>如果要删除旧内核，运行以下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get remove linux-image-3.16.0-4-686-pae
</code></pre></div><h6 id="更新grub">更新grub</h6>
<p>在/boot/grub/grub.cfg中查看是否已经有新内核3.16，有的话，就已经OK。否则，自己手动更新grub。
sudo update-grub</p>
<h4 id="安装结果">安装结果</h4>
<p>我兴高采烈的在我的RamNode的VPS折腾了半天后，重新Reboot后发现，内核为什么还是2.6.32!!!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">Linux 2.6.32-042stab093.4 i686
</code></pre></div><h6 id="google原因">Google原因</h6>
<p>OpenVZ的内核和 Host的内核是一致的
也就是说，由于我的VPS是OpenVZ的，所以我自己更新linux-image的版本是没有用的。。。</p>
<h4 id="结">结</h4>
<p>伤心了 -__- ，于是写下这篇小结，算是个记录。顺便把家里的Debian主机更新了下内核，3.16更新到3.16，小版本也要更新！。。。</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with dnsmasq</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</link>
			<pubDate>Sun, 26 Jul 2015 17:51:59 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</guid>
			<description>来由 本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~
DNSmasq安装 我的系统是Debian，直接运行以下命令
sudo apt-get update sudo apt-get install dnsmasq DNSmasq配置 编辑/etc/dnsmasq.conf文件
vi /etc/dnsmasq.conf 修改以下参数
resolv-file=/etc/resolv.conf strict-order listen-address=xxx.xxx.xxx.xxx,127.0.0.1 port=443 cache-size=1024 log-queries 编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器
nameserver 8.8.8.8 nameserver 208.67.222.222 将服务重启即可
/etc/init.d/dnsmasq restart 将DNSmasq加入启动项
sudo vi /etc/rc.local 将以下命令添加进去即可
/etc/init.d/dnsmasq start DNS污染解决方案 OpenWrt-dist上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。 其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，地址
 结 这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~</p>
<!-- raw HTML omitted -->
<h4 id="dnsmasq安装">DNSmasq安装</h4>
<p>我的系统是Debian，直接运行以下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update
sudo apt-get install dnsmasq
</code></pre></div><h4 id="dnsmasq配置">DNSmasq配置</h4>
<p>编辑/etc/dnsmasq.conf文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/dnsmasq.conf
</code></pre></div><p>修改以下参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">resolv-file<span class="o">=</span>/etc/resolv.conf
strict-order

listen-address<span class="o">=</span>xxx.xxx.xxx.xxx,127.0.0.1
<span class="nv">port</span><span class="o">=</span><span class="m">443</span>

cache-size<span class="o">=</span><span class="m">1024</span>
log-queries
</code></pre></div><p>编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nameserver 8.8.8.8
nameserver 208.67.222.222
</code></pre></div><p>将服务重启即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/dnsmasq restart
</code></pre></div><p>将DNSmasq加入启动项</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">sudo vi /etc/rc.local
</code></pre></div><p>将以下命令添加进去即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/dnsmasq start
</code></pre></div><h4 id="dns污染解决方案">DNS污染解决方案</h4>
<p><a href="http://sourceforge.net/projects/openwrt-dist/">OpenWrt-dist</a>上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。
其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，<strong><a href="http://sourceforge.net/p/openwrt-dist/wiki/DNS/">地址</a></strong></p>
<hr>
<h4 id="结">结</h4>
<p>这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with chinadns</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</link>
			<pubDate>Sun, 26 Jul 2015 12:54:59 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</guid>
			<description>来由 用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。
 Old解决方案 - FreeRouterV2 以前的解决方案是借用FreeRouterV2的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，如下
安装 首先需要在OpenWRT上安装如下包：
opkg update opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32 配置 然后配置iptables的防火墙策略
vi /etc/firewall.user 添加如下命令
iptables -t mangle -I PREROUTING -p udp --sport 53 -m u32 --u32 &amp;#34;0&amp;amp;0x0F000000=0x05000000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@8&amp;amp;0x810F=0x8000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@12&amp;amp;0xFFFF=0x0000&amp;#34; -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|042442B2|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|0807C62D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|1759053C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|253D369E|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|2E52AE44|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|31027B38|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|364C8701|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|3B1803AD|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|402158A1|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4021632F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4042A3FB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4168CAFC|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|41A0DB71|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|422DFCED|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD63|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD68|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2766|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2771|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D7F66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D9B66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4D04075C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4E10310F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|5D2E0859|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|76053106|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|80797E8B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|9F6A794B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|A9840D67|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BC050460|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BDA31105|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C043C606|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C504040C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CA6A0102|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CAB50755|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CB620741|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CBA1E6AB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CF0C5862|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D0381F2B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1244921|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D155E58A|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1913632|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1DC1EAE|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D35E4293|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D5A9FB23|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8DDBCB6|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8EAB30D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F3B9BB27|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F9812E30|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|FD9D0EA5|&amp;#34; --from 60 --to 180 -j DROP 重启防火墙即可</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="old解决方案---freerouterv2">Old解决方案 - FreeRouterV2</h4>
<p>以前的解决方案是借用<a href="https://github.com/lifetyper/FreeRouter_V2">FreeRouterV2</a>的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，<a href="https://github.com/lifetyper/FreeRouter_V2/blob/master/FreeRouterV2_HandBook.pdf">如下</a></p>
<h6 id="安装">安装</h6>
<p>首先需要在OpenWRT上安装如下包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">opkg update
opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32
</code></pre></div><h6 id="配置">配置</h6>
<p>然后配置iptables的防火墙策略</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/firewall.user
</code></pre></div><p>添加如下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m u32 --u32 <span class="s2">&#34;0&amp;0x0F000000=0x05000000 &amp;&amp; 0&gt;&gt;22&amp;0x3C@8&amp;0x810F=0x8000 &amp;&amp; 0&gt;&gt;22&amp;0x3C@12&amp;0xFFFF=0x0000&#34;</span> -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|042442B2|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|0807C62D|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|1759053C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|253D369E|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|2E52AE44|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|31027B38|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|364C8701|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|3B1803AD|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|402158A1|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4021632F|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4042A3FB|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4168CAFC|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|41A0DB71|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|422DFCED|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|480ECD63|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|480ECD68|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D2766|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D2771|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D7F66|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D9B66|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4D04075C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4E10310F|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|5D2E0859|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|76053106|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|80797E8B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|9F6A794B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|A9840D67|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|BC050460|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|BDA31105|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|C043C606|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|C504040C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CA6A0102|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CAB50755|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CB620741|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CBA1E6AB|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CF0C5862|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D0381F2B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1244921|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D155E58A|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1913632|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1DC1EAE|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D35E4293|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D5A9FB23|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D8DDBCB6|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D8EAB30D|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|F3B9BB27|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|F9812E30|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|FD9D0EA5|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
</code></pre></div><p>重启防火墙即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/firewall restart
</code></pre></div><h4 id="chinadns解决方案">ChinaDNS解决方案</h4>
<p>以上的方案挺好，但是GFW的污染IP似乎有增多现象，所以想省心一点，正好shadowsocks作者<a href="https://github.com/clowwindy">clowwindy</a>有一个针对DNS污染的作品<a href="https://github.com/clowwindy/ChinaDNS">ChinaDNS</a>，就直接拿过来用了。
针对OpenWRT/Gargoyle，作者有直接编译完毕的ipk包，下载后安装到OpenWRT即可，地址<a href="https://github.com/clowwindy/ChinaDNS/releases">如下</a></p>
<h6 id="安装-1">安装</h6>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">opkg install ChinaDNS_1.x.x_ar71xx.ipk
/etc/init.d/chinadns start
/etc/init.d/chinadns <span class="nb">enable</span>
</code></pre></div><h6 id="配置-1">配置</h6>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/dnsmasq.conf
</code></pre></div><p>添加如下内容并保存退出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">no-resolv
<span class="nv">server</span><span class="o">=</span>127.0.0.1#5353
</code></pre></div><p>重新启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/chinadns restart
/etc/init.d/dnsmasq restart
</code></pre></div><p>此时直接使用路由器IP做DNS服务器即可，也可以对chinadns做更进一步的配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/init.d/chinadns
</code></pre></div><p>具体参数如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">usage: chinadns <span class="o">[</span>-h<span class="o">]</span> <span class="o">[</span>-l IPLIST_FILE<span class="o">]</span> <span class="o">[</span>-b BIND_ADDR<span class="o">]</span> <span class="o">[</span>-p BIND_PORT<span class="o">]</span>
       <span class="o">[</span>-c CHNROUTE_FILE<span class="o">]</span> <span class="o">[</span>-s DNS<span class="o">]</span> <span class="o">[</span>-v<span class="o">]</span>
Forward DNS requests.

-h, --help            show this <span class="nb">help</span> message and <span class="nb">exit</span>
-l IPLIST_FILE        path to ip blacklist file
-c CHNROUTE_FILE      path to china route file
                      <span class="k">if</span> not specified, CHNRoute will be turned off
-d                    <span class="nb">enable</span> bi-directional CHNRoute filter
-y                    delay <span class="nb">time</span> <span class="k">for</span> suspects, default: 0.3
-b BIND_ADDR          address that listens, default: 127.0.0.1
-p BIND_PORT          port that listens, default: <span class="m">53</span>
-s DNS                DNS servers to use, default:
                      114.114.114.114,208.67.222.222:443,8.8.8.8
-m                    Using DNS compression pointer mutation
                      <span class="o">(</span>backlist and delaying would be disabled<span class="o">)</span>
-v                    verbose logging
</code></pre></div><h4 id="sftp登录">SFTP登录</h4>
<p>在将ipx文件上传到OpenWRT路由器上时，刚开始没有使用WinSCP，而且OpenWRT上也没有SFTP服务，所以是用Everything的HTTP服务器功能，然后在OpenWRT上用wget下载的。后来知道可以直接通过SFTP上传、下载文件后，就开始在OpenWRT上折腾了。</p>
<h6 id="openwrt安装sftp">OpenWRT安装SFTP</h6>
<p>安装及配置命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">opkg update
opkg install vsftpd openssh-sftp-server
/etc/init.d/vsftpd <span class="nb">enable</span>
/etc/init.d/vsftpd start
</code></pre></div><h6 id="md5sum-mismatch-错误">md5sum mismatch 错误</h6>
<p>其中opkg在线安装openssh-sftp-server时出现了md5sum mismatch，无法安装，网上Google了一下，表示可能是linux内核不匹配导致的，解决方法是下载到本地，直接安装即可
好吧，打开Everything的HTTP服务器，先下载到OpenWRT路由器上，然后手动安装成功。</p>
<hr>
<h4 id="结">结</h4>
<p>没有了DNS污染，所有被屏蔽的网站也可以通过Shadowsocks+GFWList PAC绕过去科学上网了，自由遨游Internet的感觉真好啊~ ^O^/</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with shadowsocks</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-shadowsocks/</link>
			<pubDate>Fri, 24 Jul 2015 12:57:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-shadowsocks/</guid>
			<description>来由 已经一年多没有更新这个blog了，现在来写点什么吧。 这一年来，没怎么做这方面的东西，fanqiang也主要是用VPS架设的PPTP VPN，速度一般，但是可以上很多网站啦。前一阵子，把RamNode上的VPS重新续费，然后购入了NETGEAR的WNDR4300路由器，刷了最新版本的14.07的OpenWRT在用。中间没有怎么折腾，基本够用。
最近突然想折腾了下，发现用Shadowsocks进行fanqiang比较快，下边就把经过写写吧：
 VPS架设Shadowsocks 选择Shadowsocks版本 Showsocks有好几种版本，Python, Golang, Nodejs, libev等，具体可以去官网看一下 因为说libev版本的占用内存较小，方便在我的VPS上部署，所以我选择了shadowsocks-libev
编译Shadowsocks 我是直接通过git在官网上下载最新的包在Debian的VPS上进行编译的，具体如下：
git clone https://github.com/shadowsocks/shadowsocks-libev.git cd shadowsocks-libev sudo apt-get install build-essential autoconf libtool libssl-dev ./configure &amp;amp;&amp;amp; make make install 配置Shadowsocks服务器端 vi /etc/shadowsocks-libev/config.json 具体格式如下：
{ &amp;#34;server&amp;#34;:&amp;#34;my_server_ip&amp;#34;, &amp;#34;server_port&amp;#34;:8388, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;barfoo!&amp;#34;, &amp;#34;timeout&amp;#34;:600, &amp;#34;method&amp;#34;:&amp;#34;table&amp;#34; }  server: 你的Shadowsocks服务器的IP地址 (IPv4/IPv6). server_port: 你的Shadowsocks服务器端口. local_port: 本地端口. password: 你的Shadowsocks服务器的账号密码. method: 你的Shadowsocks服务器采用的加密方式, &amp;ldquo;bf-cfb&amp;rdquo; , &amp;ldquo;aes-256-cfb&amp;rdquo; , &amp;ldquo;des-cfb&amp;rdquo; ,&amp;ldquo;rc4&amp;rdquo; , &amp;ldquo;table&amp;rdquo; 等等，建议使用&amp;quot;aes-256-cfb&amp;quot;  vi /etc/rc.local 添加以下自启动命令
/usr/bin/ss-server -c /etc/shadowsocks-libev/config.</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>已经一年多没有更新这个blog了，现在来写点什么吧。
这一年来，没怎么做这方面的东西，fanqiang也主要是用VPS架设的PPTP VPN，速度一般，但是可以上很多网站啦。前一阵子，把RamNode上的VPS重新续费，然后购入了NETGEAR的WNDR4300路由器，刷了最新版本的14.07的OpenWRT在用。中间没有怎么折腾，基本够用。</p>
<p>最近突然想折腾了下，发现用Shadowsocks进行fanqiang比较快，下边就把经过写写吧：</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="vps架设shadowsocks">VPS架设Shadowsocks</h4>
<h6 id="选择shadowsocks版本">选择Shadowsocks版本</h6>
<p>Showsocks有好几种版本，Python, Golang, Nodejs, libev等，具体可以去<a href="http://shadowsocks.org/en/download/servers.html">官网</a>看一下
因为说libev版本的占用内存较小，方便在我的VPS上部署，所以我选择了<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a></p>
<h6 id="编译shadowsocks">编译Shadowsocks</h6>
<p>我是直接通过git在官网上下载最新的包在Debian的VPS上进行编译的，具体如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/shadowsocks/shadowsocks-libev.git
<span class="nb">cd</span> shadowsocks-libev
sudo apt-get install build-essential autoconf libtool libssl-dev
./configure <span class="o">&amp;&amp;</span> make
make install
</code></pre></div><h6 id="配置shadowsocks服务器端">配置Shadowsocks服务器端</h6>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/shadowsocks-libev/config.json
</code></pre></div><p>具体格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">{</span>
    <span class="s2">&#34;server&#34;</span>:<span class="s2">&#34;my_server_ip&#34;</span>,
    <span class="s2">&#34;server_port&#34;</span>:8388,
    <span class="s2">&#34;local_port&#34;</span>:1080,
    <span class="s2">&#34;password&#34;</span>:<span class="s2">&#34;barfoo!&#34;</span>,
    <span class="s2">&#34;timeout&#34;</span>:600,
    <span class="s2">&#34;method&#34;</span>:<span class="s2">&#34;table&#34;</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>server: 你的Shadowsocks服务器的IP地址 (IPv4/IPv6).</li>
<li>server_port: 你的Shadowsocks服务器端口.</li>
<li>local_port: 本地端口.</li>
<li>password: 你的Shadowsocks服务器的账号密码.</li>
<li>method: 你的Shadowsocks服务器采用的加密方式, &ldquo;bf-cfb&rdquo; , &ldquo;aes-256-cfb&rdquo; , &ldquo;des-cfb&rdquo; ,&ldquo;rc4&rdquo; , &ldquo;table&rdquo; 等等，建议使用&quot;aes-256-cfb&quot;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">vi /etc/rc.local
</code></pre></div><p>添加以下自启动命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json
</code></pre></div><p>保存退出即可</p>
<p>如果希望加入udp转发功能(enable udprelay mode)，用以搭建DNS转发线路，启动时需要加上-u参数，似乎目前只有shadowsocks-libev有该功能
即添加以下自启动命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -u
</code></pre></div><p>保存退出即可</p>
<p>由于shadowsocks-libev不支持多端口，多用户，如果多人使用的话，需开多个实例，每一个config.json使用不同端口、密码即可
官方示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ss-server -c config1.json -f pid1
ss-server -c config2.json -f pid2
ss-server -c config3.json -f pid3
</code></pre></div><h6 id="配置shadowsocks客户端">配置Shadowsocks客户端</h6>
<p>可以直接从官网上推荐的各平台<a href="http://shadowsocks.org/en/download/clients.html">clients</a>选择自己需要的客户端
我选择的是<a href="https://github.com/shadowsocks/shadowsocks-csharp">shadowsocks-csharp</a>
最新的release可以在<a href="https://github.com/shadowsocks/shadowsocks-csharp/releases">这里</a>下载
最新的客户端可以通过PAC文件，对GFWList里面的域名进行自动代理，OYE~</p>
<h4 id="路由器折腾shadowsocks及自动fanqiang">路由器折腾Shadowsocks及自动fanqiang</h4>
<p>好吧，本来希望在OpenWRT上折腾好，所有PC、手机可以直接自动科学上网的，但是一直没有试验成功。</p>
<ul>
<li>一是：对iptables一直心怀敬意，但是折腾的太少，很多东西还不了解</li>
<li>二是：中国电信和GFW的合作(原谅我用这个词吧)太好了－<em>－||, 电信的宽带，一个IP地址连接我的VPS PPTP时间长了后，丢包就开始严重起来了，不得已需要重新PPPOE拨号连接，结果是换了一个地址，就没有丢包了呢－</em>－||。</li>
<li>三是：网上有说路由器的性能和内存受限，大流量后，SS有可能会崩溃，这样还要做个守护进程一直看着，随时重新启动，有点麻烦</li>
<li>四是：我确实没有折腾成功－_－||。。而且还把路由器折腾快瘫了
所以不想在路由器上折腾过多了，太麻烦了。。。</li>
</ul>
<h6 id="ps"><strong>PS:</strong></h6>
<ul>
<li>1、目前我的WNDR4300刷新的是Gargoyle(石像鬼)1.7.2固件，是恩山论坛的大拿编译的，<a href="http://www.right.com.cn/forum/thread-157953-1-2.html">自译4300/3700/AR石像鬼+luci面板+over&gt;90+ss+多拨+迅雷+脱机+广告+13信道+vpn集成</a>，我没有用他的集成包，而是用了精简版（支持overylay大于90M，集成石像鬼全部官方插件）（PS：换了这个固件后，感觉到VPS的丢包少了一些呢，不知道是不是只是感觉原因－_－||。。）</li>
<li>2、原先的华为HG255D刷新的是PandoraBox，<a href="http://www.right.com.cn/forum/thread-169216-1-3.html">PandoraBox HG255D更新支持HWNAT硬件转发 最后的疯狂</a>，主要是解决了长期以来flash读写出错的问题和增加了硬件转发HWNAT功能，最新版本可以在<a href="http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/firmware/stable/">这里</a>下载</li>
<li>3、有想继续折腾OpenWRT+Shadowsocks的，可以自行下载SS的OpenWRT预编译包折腾，在<a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/">这里</a>下载</li>
</ul>
<h4 id="最终解决方案">最终解决方案</h4>
<p>就是简单的VPS+Shadowsocks桌面客户端，随时更新GFWList的PAC文件，出问题也就是一台机子的事情。手机想科学上网时，通过原先的PPTP VPN即可</p>
<hr>
<h4 id="总结">总结</h4>
<p>目前的方案是简单为主，不折腾，合适的设备做合适的事情，半自动也有半自动的好处。折腾的时间去做点其它事情好了~</p>
]]></content>
		</item>
		
		<item>
			<title>build openwrt with image builder</title>
			<link>http://nivrrex.github.io/posts/build-openwrt-with-image-builder/</link>
			<pubDate>Thu, 17 Jul 2014 22:17:11 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/build-openwrt-with-image-builder/</guid>
			<description>来由 这几天在折腾OpenWrt，前文fanqiang with openwrt+vps里说过，	我用的是PandoraBox最新编译的版本，但是其内置的packages里面很多软件没有编译，如Python等。而直接换用官方的packages，会提示兼容性问题，无法直接使用。 从网络Google了一下，可以两个同时使用。
src/gz attitude_adjustment http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages src/gz pandorabox http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages dest root / dest ram /tmp lists_dir ext /var/opkg-lists option overlay_root /overlay arch all 100 arch ralink 200 arch ramips 300 arch ramips_24kec 400 这样就解决了软件兼容性的问题，但是前文fanqiang with openwrt+vps里面提到的&amp;quot;input/output error&amp;quot;问题仍然没有解决。遂升起了自己编译的念头。
源代码编译 要从源代码编译OpenWrt，需要有Linux环境，主要好像是因为Windows下大小写不区分，可能导致异常问题。 于是选了Debian系统，主要是玩OpenWrt时，又淘了一个树莓派（Raspberry Pi）玩，而它的默认系统就是基于Debian，同时最早玩的Ubuntu也是基于Debian的，买的VPS也是基于Debian系统的，so&amp;hellip; 于是到达官网选择i386架构、xfce界面的debian-7.6.0-i386-xfce-CD-1.iso。 通过UltraISO写入到U盘，然后安装到硬盘上，OK。
编译源代码 这个痛苦的过程不想说了 主要是下载Debian上的编译支撑工具，然后通过以下说明进行编译
 OpenWrt Buildroot - 安装 OpenWrt Buildroot - 使用说明 最终结果是，我从下午编译到晚上，还没有编译完成，于是让其继续。第二天起来后，发现网络断了，编译失败。  Image Builder编译 从头开始的自行编译实在hold不住，于是就考虑其它方式，由于OpenWrt的编译选项中，可以将结果进行打包给其它人使用，官网上也有相应的打包的tar.gz2文件可以下载，也就是Image Builder的形式。考虑用它实现，说明如下：
*Image Generator (Image Builder) 下载、解压缩，然后看需要的包，我是将PandoraBox里面所有的包都包含了，然后加上了Python、DNS工具包等。 命令如下：</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>这几天在折腾OpenWrt，前文<a href="http://nivrrex.github.io/2014/07/08/fanqiang-with-openwrt+vps/">fanqiang with openwrt+vps</a>里说过，	我用的是PandoraBox最新编译的版本，但是其内置的<a href="http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages/">packages</a>里面很多软件没有编译，如Python等。而直接换用官方的<a href="http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages/">packages</a>，会提示兼容性问题，无法直接使用。
从网络Google了一下，可以两个同时使用。</p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">src/gz attitude_adjustment http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages
src/gz pandorabox http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages

dest root /
dest ram /tmp
lists_dir ext /var/opkg-lists
option overlay_root /overlay

arch all <span class="m">100</span>
arch ralink <span class="m">200</span>
arch ramips <span class="m">300</span>
arch ramips_24kec <span class="m">400</span>
</code></pre></div><p>这样就解决了软件兼容性的问题，但是前文<a href="http://nivrrex.github.io/2014/07/08/fanqiang-with-openwrt+vps/">fanqiang with openwrt+vps</a>里面提到的&quot;input/output error&quot;问题仍然没有解决。遂升起了自己编译的念头。</p>
<h4 id="源代码编译">源代码编译</h4>
<p>要从源代码编译OpenWrt，需要有Linux环境，主要好像是因为Windows下大小写不区分，可能导致异常问题。
于是选了Debian系统，主要是玩OpenWrt时，又淘了一个树莓派（Raspberry Pi）玩，而它的默认系统就是基于Debian，同时最早玩的Ubuntu也是基于Debian的，买的VPS也是基于Debian系统的，so&hellip;
于是到达<a href="https://www.debian.org/CD/torrent-cd/">官网</a>选择i386架构、xfce界面的debian-7.6.0-i386-xfce-CD-1.iso。
通过UltraISO写入到U盘，然后安装到硬盘上，OK。</p>
<h6 id="编译源代码">编译源代码</h6>
<p>这个痛苦的过程不想说了
主要是下载Debian上的编译支撑工具，然后通过以下说明进行编译</p>
<ul>
<li><a href="http://wiki.openwrt.org/zh-cn/doc/howto/buildroot.exigence">OpenWrt Buildroot - 安装</a></li>
<li><a href="http://wiki.openwrt.org/zh-cn/doc/howto/build">OpenWrt Buildroot - 使用说明</a>
最终结果是，我从下午编译到晚上，还没有编译完成，于是让其继续。第二天起来后，发现网络断了，编译失败。</li>
</ul>
<h4 id="image-builder编译">Image Builder编译</h4>
<p>从头开始的自行编译实在hold不住，于是就考虑其它方式，由于OpenWrt的编译选项中，可以将结果进行打包给其它人使用，官网上也有相应的打包的tar.gz2文件可以下载，也就是Image Builder的形式。考虑用它实现，说明如下：</p>
<p>*<a href="http://wiki.openwrt.org/zh-cn/doc/howto/obtain.firmware.generate">Image Generator (Image Builder)</a>
下载、解压缩，然后看需要的包，我是将PandoraBox里面所有的包都包含了，然后加上了Python、DNS工具包等。
命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">make image <span class="nv">PROFILE</span><span class="o">=</span>HG255D <span class="nv">PACKAGES</span><span class="o">=</span><span class="s2">&#34;6in4 6rd 6to4 aria2 arptables badblocks base-files bind-dig bind-libs blkid block-mount busybox cfdisk chat comgt coreutils curl ddns-scripts dnsmasq dnsmasq-full dropbear e2fsprogs ebtables ebtables-utils etherwake fdisk firewall hd-idle ip iptables iptables-mod-account iptables-mod-chaos iptables-mod-condition iptables-mod-conntrack-extra iptables-mod-extra iptables-mod-filter iptables-mod-geoip iptables-mod-hashlimit iptables-mod-ipmark iptables-mod-ipopt iptables-mod-ipp2p iptables-mod-iprange iptables-mod-led iptables-mod-length2 iptables-mod-logmark iptables-mod-nat-extra iptables-mod-sysrq iptables-mod-tee iptables-mod-u32 iptables-mod-ulog iwinfo jshn kernel kmod-arptables kmod-button-hotplug kmod-crypto-arc4 kmod-crypto-ecb kmod-crypto-hash kmod-crypto-sha1 kmod-ebtables kmod-fs-exportfs kmod-fs-ext4 kmod-fs-nfs kmod-fs-nfs-common kmod-fs-ntfs kmod-fs-vfat kmod-fs-xfs kmod-fuse kmod-gpio-dev kmod-gre kmod-ifb kmod-input-core kmod-input-gpio-keys-polled kmod-input-polldev kmod-ipt-account kmod-ipt-chaos kmod-ipt-compat-xtables kmod-ipt-condition kmod-ipt-conntrack kmod-ipt-conntrack-extra kmod-ipt-core kmod-ipt-delude kmod-ipt-filter kmod-ipt-geoip kmod-ipt-hashlimit kmod-ipt-ipmark kmod-ipt-ipopt kmod-ipt-ipp2p kmod-ipt-iprange kmod-ipt-led kmod-ipt-length2 kmod-ipt-logmark kmod-ipt-nat kmod-ipt-nat-extra kmod-ipt-nathelper kmod-ipt-nathelper-extra kmod-ipt-sysrq kmod-ipt-tarpit kmod-ipt-tee kmod-ipt-u32 kmod-ipt-ulog kmod-iptunnel4 kmod-iptunnel6 kmod-ipv6 kmod-l2tp kmod-leds-gpio kmod-ledtrig-default-on kmod-ledtrig-gpio kmod-ledtrig-heartbeat kmod-ledtrig-morse kmod-ledtrig-netdev kmod-ledtrig-netfilter kmod-ledtrig-timer kmod-ledtrig-usbdev kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-textsearch kmod-macvlan kmod-mppe kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 kmod-ppp kmod-pppoe kmod-pppol2tp kmod-pppox kmod-pptp kmod-sched kmod-sched-core kmod-scsi-core kmod-scsi-generic kmod-sit kmod-tun kmod-usb-acm kmod-usb-core kmod-usb-ohci kmod-usb-printer kmod-usb-rt305x-dwc_otg kmod-usb-serial kmod-usb-serial-ftdi kmod-usb-serial-option kmod-usb-serial-pl2303 kmod-usb-serial-qualcomm kmod-usb-serial-wwan kmod-usb-storage kmod-usb-storage-extras kmod-usb-uhci libblkid libblobmsg-json libc libcurl libdaemon libext2fs libffi libgcc libgd libip4tc libip6tc libiwinfo libiwinfo-lua libjpeg libjson-c liblua libncurses libnfnetlink libnl-tiny libopenssl libpcap libpng libpthread librt libstdcpp libubox libubus libubus-lua libuci libuci-lua libuuid libxml2 libxtables lua luci luci-app-commands luci-app-ddns luci-app-firewall luci-app-hd-idle luci-app-ntpc luci-app-p910nd luci-app-qos luci-app-radvd luci-app-samba luci-app-upnp luci-app-vnstat luci-app-wol luci-i18n-chinese luci-i18n-english luci-lib-nixio luci-proto-3g luci-proto-ppp mjpg-streamer ntpclient pdnsd ppp ppp-mod-pppoe ppp-mod-pptp python python-mini resolveip restorefactory ser2net transmission-daemon transmission-remote transmission-web uci uhttpd unbound vsftpd wget wireless-tools zlib&#34;</span>
</code></pre></div><p>结果提示出错，原因是，官网的打包是64bit的，而我安装的是i386架构的Debian。
OK，重新下载后安装，结果老版本的UltraISO无法读入AMD64的ISO包，仅有一个目录，400多KB大小，更新UltraISO到较新的9.5版本，问题解决。
重新安装Debian，配置编译工具，下载Image Builder包，重新编译，结果没有bin文件，Google后晓得，原来需要更改以下Image文件中的内容:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">../OpenWrt-ImageBuilder-ramips_rt305x-for-linux-x86_64/target/linux/ramips/imag/Makefile
</code></pre></div><p>查找HG255D字符串，把对应的注释#符号删除，重新编译</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#Image/Build/Profile/HG255D=$(call BuildFirmware/Default16M/$(1),$(1),hg255d,HG255D)</span>
<span class="c1">#	$(call Image/Build/Profile/HG255D,$(1))</span>
</code></pre></div><p>OK，固件“.bin”文件产生了
写入到路由器中，可以正常的拨号上网了~</p>
<h6 id="遗留问题">遗留问题</h6>
<p>trunk版本和RC1版本的OpenWrt预编译包，PPTP VPN无法正常拨通，提示错误，暂时解决不了，于是又退回PandoraBox版本了，而PandoraBox版本无法安装比较大的软件包，还是出现&quot;input/output error&quot;错误，使用jsff2make也没有用。
也不知道到底是HG255D的原因，还是OpenWrt的原因，不准备折腾这个了，计划在LAN中加入一个树莓派，然后用树莓派搞定我的特殊需求，HG255D只做路由器使用。先这样吧~
PS:最终方案是，HG255D解决DNS污染问题，本地电脑进行静态路由和VPN拨号。
折腾来折腾去啊~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with openwrt&#43;vps</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-openwrt&#43;vps/</link>
			<pubDate>Tue, 08 Jul 2014 21:27:40 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-openwrt&#43;vps/</guid>
			<description>来由 在上一篇《fanqiang with vpn+chnroutes》中，通过免费的vpn和chnroutes，已经可以成功的翻墙了，后来觉得免费VPN不稳定，又买了一个月的付费vpn；再后来，觉得付费vpn不是共享，服务器上的多了，就又要换服务器，不爽；于是就决定，找个国外的vps主机，自己独享fq带宽！
 找合适的VPS 由于一个人用，不需要太好的，稳定，延时一般就OK，最好比较实惠。 开始时选择了年付$3.99的搬瓦工bandwagonhost（太便宜了啊），但是ping包时，发现丢包不是一般的多，遂放弃 又找到了RamNode，有个年付$12的套餐，而且，然后用5.8折的优惠码，一年不到100￥，还是可以接受的，遂成交。 它最大的好处就是，丢包低于1%，而且有西雅图这种西海岸的机房，对于大陆来说，延时200ms左右，感觉还不错。 由于RamNode只支持PayPal，所以最终也了解了PayPal支持信用卡或者62开头的银联卡（开通网上银行），即可以支付了~
使用VPS架设VPN 这个就不赘述了，网上一搜一大堆，我选择的操作系统是Debian：
  乔大海的《BuyVM OpenVZ VPS Debian安装PPTP VPN》
  郭高兴的《VPS上安装PPTP（Xen+OpenVZ）完整教程》
  howtogeek的《How to Setup a VPN (PPTP) Server on Debian Linux》
  波斯马的《Linux（VPS+Debian）搭建配置VPN（PPTP）服务》 在设置完VPN后，要注意MTU值的问题，否则部分网页打开的很慢或有问题：
  永远的UNIX的《Fedora core 2下建立Poptop服务器以及常见问题》
  路由器+VPN 淘OpenWrt路由器 可以独享VPN上网后，还是不满足啊，因为家里2台电脑，手机还想无线上网，一台一台指定好费事啊 上一篇《fanqiang with vpn+chnroutes》，最后提到，可以用开源的路由器固件，搞定路由器上VPN的问题。 Google了很长时间，锁定了OpenWrt，路由器选择淘宝上别人刷好的Huawei HG255d，基本在￥40-￥60之间。CPU为Ralink RT3052，FLASH容量为16MB，内存容量为32MB DDR。我淘的是硬改内存64MB+散热片，刷了不死uboot的，毕竟没那么多精力折腾。
刷新最新OpenWrt固件 买回来后，淘宝店主刷新的是比较老的OpenWrt-DreamBox 20120828版本，对应的OpenWrt-DreamBox的源软件包地址已经改变，没法下载新软件，就开始折腾，找了半天，由于DreamBox版本比较老，所以换成了比较新的PandoraBox版本，可以到http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/ 下载编译的最新固件，我选择的是最新的20140505版。 不得不说，有了uboot，可以一键刷机，还是比较放心的进行折腾的。在找到目前的固件前，刷新了不少版本，但都没啥问题。
设置路由器+VPN+chnroutes静态路由 这个根据各人情况都不相同，总而言之，最终搞定。
存在问题 一个是VPN拨号后，需要手动添加一下静态路由，不过是自己的VPS架设的VPN，想待多久就待多久，除了掉线，一般也不会下线滴。 另一个是，可能淘的Huawei HG255d有问题，路由器在对文件进行操作时，折腾一段时间后，会出现&amp;quot;input/output error&amp;quot;问题，怀疑是硬改导致的？ 解决方案就是路由器关电重启解决，不过除了装软件，折腾东东，一般不影响使用，所以也不准备找淘宝店主问这个问题了。
 总之，可以开始开心快乐的自由、随意的访问Internet了，so happy~</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>在上一篇<a href="http://nivrrex.github.io/2014/06/28/fanqiang-with-vpn+chnroutes">《fanqiang with vpn+chnroutes》</a>中，通过免费的vpn和chnroutes，已经可以成功的翻墙了，后来觉得免费VPN不稳定，又买了一个月的付费vpn；再后来，觉得付费vpn不是共享，服务器上的多了，就又要换服务器，不爽；于是就决定，找个国外的vps主机，自己独享fq带宽！</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="找合适的vps">找合适的VPS</h4>
<p>由于一个人用，不需要太好的，稳定，延时一般就OK，最好比较实惠。
开始时选择了年付$3.99的搬瓦工bandwagonhost（太便宜了啊），但是ping包时，发现丢包不是一般的多，遂放弃
又找到了<a href="http://www.ramnode.com">RamNode</a>，有个年付$12的套餐，而且，然后用5.8折的优惠码，一年不到100￥，还是可以接受的，遂成交。
它最大的好处就是，丢包低于1%，而且有西雅图这种西海岸的机房，对于大陆来说，延时200ms左右，感觉还不错。
由于RamNode只支持PayPal，所以最终也了解了PayPal支持信用卡或者62开头的银联卡（开通网上银行），即可以支付了~</p>
<h4 id="使用vps架设vpn">使用VPS架设VPN</h4>
<p>这个就不赘述了，网上一搜一大堆，我选择的操作系统是Debian：</p>
<ul>
<li>
<p><a href="http://qiaodahai.com/buyvm-openvz-vps-debian-pptp-vpn.html">乔大海的《BuyVM OpenVZ VPS Debian安装PPTP VPN》</a></p>
</li>
<li>
<p><a href="http://hello.guo.biz/story/install-pptp-on-vps">郭高兴的《VPS上安装PPTP（Xen+OpenVZ）完整教程》</a></p>
</li>
<li>
<p><a href="http://www.howtogeek.com/51237/setting-up-a-vpn-pptp-server-on-debian/">howtogeek的《How to Setup a VPN (PPTP) Server on Debian Linux》</a></p>
</li>
<li>
<p><a href="http://blog.bossma.cn/server/linux-vps-debian-vpn-server-pptp/">波斯马的《Linux（VPS+Debian）搭建配置VPN（PPTP）服务》</a>
在设置完VPN后，要注意MTU值的问题，否则部分网页打开的很慢或有问题：</p>
</li>
<li>
<p><a href="http://fanqiang.chinaunix.net/app/other/2005-09-13/3655.shtml">永远的UNIX的《Fedora core 2下建立Poptop服务器以及常见问题》</a></p>
</li>
</ul>
<h4 id="路由器vpn">路由器+VPN</h4>
<h6 id="淘openwrt路由器">淘OpenWrt路由器</h6>
<p>可以独享VPN上网后，还是不满足啊，因为家里2台电脑，手机还想无线上网，一台一台指定好费事啊
上一篇<a href="http://nivrrex.github.io/2014/06/28/fanqiang-with-vpn+chnroutes">《fanqiang with vpn+chnroutes》</a>，最后提到，可以用开源的路由器固件，搞定路由器上VPN的问题。
Google了很长时间，锁定了OpenWrt，路由器选择淘宝上别人刷好的<a href="http://s8.taobao.com/search?spm=a230z.1.0.0.NCbfUi&amp;promote=0&amp;sort=sale-desc&amp;initiative_id=staobaoz_20140708&amp;q=hg255d&amp;pid=mm_10062864_0_0&amp;mode=63#J_relative">Huawei HG255d</a>，基本在￥40-￥60之间。CPU为Ralink RT3052，FLASH容量为16MB，内存容量为32MB DDR。我淘的是硬改内存64MB+散热片，刷了不死uboot的，毕竟没那么多精力折腾。</p>
<h6 id="刷新最新openwrt固件">刷新最新OpenWrt固件</h6>
<p>买回来后，淘宝店主刷新的是比较老的OpenWrt-DreamBox 20120828版本，对应的OpenWrt-DreamBox的源软件包地址已经改变，没法下载新软件，就开始折腾，找了半天，由于DreamBox版本比较老，所以换成了比较新的PandoraBox版本，可以到http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/ 下载编译的最新固件，我选择的是最新的20140505版。
不得不说，有了uboot，可以一键刷机，还是比较放心的进行折腾的。在找到目前的固件前，刷新了不少版本，但都没啥问题。</p>
<h4 id="设置路由器vpnchnroutes静态路由">设置路由器+VPN+chnroutes静态路由</h4>
<p>这个根据各人情况都不相同，总而言之，最终搞定。</p>
<h6 id="存在问题">存在问题</h6>
<p>一个是VPN拨号后，需要手动添加一下静态路由，不过是自己的VPS架设的VPN，想待多久就待多久，除了掉线，一般也不会下线滴。
另一个是，可能淘的Huawei HG255d有问题，路由器在对文件进行操作时，折腾一段时间后，会出现&quot;input/output error&quot;问题，怀疑是硬改导致的？
解决方案就是路由器关电重启解决，不过除了装软件，折腾东东，一般不影响使用，所以也不准备找淘宝店主问这个问题了。</p>
<hr>
<p>总之，可以开始开心快乐的自由、随意的访问Internet了，so happy~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with vpn&#43;chnroutes</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-vpn&#43;chnroutes/</link>
			<pubDate>Sat, 28 Jun 2014 10:48:47 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-vpn&#43;chnroutes/</guid>
			<description>来由 用goagent这个FQ方案，终于可以上google了，但是因为gfw这个家伙封锁的太厉害的缘故，会出现可用IP为0的现象，结果又断网了。 翻来覆去的太麻烦。只好换招了。
 VPN 这两天主要做的就是先找到一些免费的VPN，然后通过VPN直接翻墙。不用再去设置goagent的代理了。缺点是所有流量通过VPN走，国内网站访问慢，但是可以通过路由表调整，下面会介绍。 随便搜索了下，免费的VPN还是很多的，但是免费的午餐，延时、流量等需要能忍受啊。幸好需要访问的国外网站不是很多~
VPN推荐网站:
 免费VPN推荐网 免费VPN资源网  网友推荐:
 rsouls《国内最给力五大免费VPN商家》 oovpn的《十大免费翻墙VPN代理软件推荐》 zq530885040的《八个提供免费VPN账号的网站》   chnroutes 但是VPN的最大缺点是，所有流量全部从VPN走了，这样访问国内网站也从国外绕一圈，自找不自在啊。 幸好，网上的大拿们，开发了一个针对国内IP地址段的路由更新表，通过批处理配置路由表等方式，将国内IP指向本机网关，避免VPN绕行，具体项目在：
 chnroutes 每日更新路由下载  网上其他人的使用  MacTalk的《VPN – 长城内外，惟余莽莽》 markzhang的《Chnroutes的使用（Mac OS X Mavericks）》 ratazzi的《优化 VPN 和 chnroutes》   路由器自动配置 为了避免家里每台电脑都要设置，又有人考虑，直接设置路由器，然后自动fq。 只能说，人的懒惰是天生的啊。 主要思想是将路由器固件更新为开源固件
 DD-WRT OpenWrt Tomato  然后通过
 autoddvpn 进行自动的VPN的FQ方案实施。  具体参考的有：
 北落师门的《在wr841n上刷openwrt并使用openvpn自动VPN》 错乱の年轮的《DD-WRT+Autoddvpn+OpenVPN=智能翻墙路由》 hauy的《配置DD-WRT通过autoddvpn的graceMode自动翻墙(PPTP)》 ntcn的《DD-WRT搭配autoddvpn全自动FQ配置精简教程》 因为我的路由器不匹配，所以没有实验。   通过VPN+chnroutes，目前已经可以轻松的上Goolge、Twitter、Facebook等网站了，挺好的~</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>用goagent这个FQ方案，终于可以上google了，但是因为gfw这个家伙封锁的太厉害的缘故，会出现可用IP为0的现象，结果又断网了。
翻来覆去的太麻烦。<strong>只好换招了</strong>。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="vpn">VPN</h4>
<p>这两天主要做的就是先找到一些免费的VPN，然后通过VPN直接翻墙。不用再去设置goagent的代理了。缺点是所有流量通过VPN走，国内网站访问慢，但是可以通过路由表调整，下面会介绍。
随便搜索了下，免费的VPN还是很多的，但是免费的午餐，延时、流量等需要能忍受啊。幸好需要访问的国外网站不是很多~</p>
<p><strong>VPN推荐网站:</strong></p>
<ul>
<li><a href="http://www.srkoo.com/">免费VPN推荐网</a></li>
<li><a href="http://ilvpn.com/free-vpn/">免费VPN资源网</a></li>
</ul>
<p><strong>网友推荐:</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/rsouls/p/3364506.html">rsouls《国内最给力五大免费VPN商家》</a></li>
<li><a href="http://oovpn.com/">oovpn的《十大免费翻墙VPN代理软件推荐》</a></li>
<li><a href="http://blog.csdn.net/zq530885040/article/details/10247903">zq530885040的《八个提供免费VPN账号的网站》</a></li>
</ul>
<hr>
<h4 id="chnroutes">chnroutes</h4>
<p>但是VPN的最大缺点是，所有流量全部从VPN走了，这样访问国内网站也从国外绕一圈，自找不自在啊。
幸好，网上的大拿们，开发了一个针对国内IP地址段的路由更新表，通过批处理配置路由表等方式，将国内IP指向本机网关，避免VPN绕行，具体项目在：</p>
<ul>
<li><a href="http://code.google.com/p/chnroutes/">chnroutes</a></li>
<li><a href="http://chnroutes-dl.appspot.com/">每日更新路由下载</a></li>
</ul>
<h6 id="网上其他人的使用">网上其他人的使用</h6>
<ul>
<li><a href="http://macshuo.com/?tag=chnroutes">MacTalk的《VPN – 长城内外，惟余莽莽》</a></li>
<li><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">markzhang的《Chnroutes的使用（Mac OS X Mavericks）》</a></li>
<li><a href="http://ratazzi.org/2012/06/17/optmize-openvpn-and-chanroutes/">ratazzi的《优化 VPN 和 chnroutes》</a></li>
</ul>
<hr>
<h4 id="路由器自动配置">路由器自动配置</h4>
<p>为了避免家里每台电脑都要设置，又有人考虑，直接设置路由器，然后自动fq。
只能说，人的懒惰是天生的啊。
主要思想是将路由器固件更新为开源固件</p>
<ul>
<li><a href="http://www.dd-wrt.com/site/index">DD-WRT</a></li>
<li><a href="https://openwrt.org/">OpenWrt</a></li>
<li><a href="http://www.polarcloud.com/tomato">Tomato</a></li>
</ul>
<p>然后通过</p>
<ul>
<li><a href="http://code.google.com/p/autoddvpn/">autoddvpn</a>
进行自动的VPN的FQ方案实施。</li>
</ul>
<p>具体参考的有：</p>
<ul>
<li><a href="http://hong.im/2012/11/03/openvpn-on-wr841n-with-openwrt/">北落师门的《在wr841n上刷openwrt并使用openvpn自动VPN》</a></li>
<li><a href="http://www.wpaengd.com/archives/723">错乱の年轮的《DD-WRT+Autoddvpn+OpenVPN=智能翻墙路由》</a></li>
<li><a href="http://hauy.net/2013/08/dd-wrt-autoddvpn-through-wall/">hauy的《配置DD-WRT通过autoddvpn的graceMode自动翻墙(PPTP)》</a></li>
<li><a href="http://ntcn.net/blog/?p=379">ntcn的《DD-WRT搭配autoddvpn全自动FQ配置精简教程》</a>
因为我的路由器不匹配，所以没有实验。</li>
</ul>
<hr>
<p>通过VPN+chnroutes，目前已经可以轻松的上Goolge、Twitter、Facebook等网站了，挺好的~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with goagent</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-goagent/</link>
			<pubDate>Wed, 25 Jun 2014 21:45:26 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-goagent/</guid>
			<description>来由 最近Google被屏蔽的很厉害，想查个东西都要翻来覆去的，灰常麻烦。 刚开始以为一段时间就OK了，就用了临时性的解决方案。
比如：
 使用Bing代替。 搜索效果相比Google还有差距 使用StartPage代替。 相比原版，存在部分结果搜索不到的问题 直接用Google IP进行搜索。 可以使用的IP被飞快的封锁 使用网上的免翻墙镜像网站greatfire。 是个不错的解决方案，但是怕被封锁后还要重新设置 使用网上的免费VPN免费VPN资源。 免费的要么限制流量，要么限制时间，而且免费的基本上速度比较慢 使用google的GAE平台的goagent。 强烈推荐   goagent设置 这个网上教程很多，随便搜索都有好几个，如：
 猫理会的goagent教程详细版 软矿的GoAgent图文设置教程 海盗船博客的2014最新翻墙方法之goagent翻墙教程   软件设置 在搭建好goagent后，就是如何使用它配合浏览器上网了 我常用的浏览器有IE、猎豹、Opera 为统一解决，我的方法是：
 1、猎豹浏览器中安装插件SwitchySharp。然后建立规则，默认直接连接，然后设置需要翻墙的网站清单。设置成功后，导出PAC文件。 2、IE中设置代理服务器，勾选代理服务器，“127.0.0.1 8087”。将“使用自动配置脚本”勾选，然后按格式填入“file://C:\GoAgent\SwitchyPac.pac”。如果有代理后出问题的网站，选“高级”，将对应网站填入“例外”区域内。 3、Opera浏览器：Tools -&amp;gt; Preferences -&amp;gt; Advanced -&amp;gt; Network -&amp;gt; Proxy Servers -&amp;gt; &amp;ldquo;Use automatic proxy configuration&amp;rdquo;，填写“file://C:\GoAgent\SwitchyPac.pac”。 4、IE和Opera都需要安装goagent的证书，否则访问时会出错。 5、可以在这里订阅部分数据。   结 堵不如疏，闭关锁国只能让自己更落伍。 人民总有办法得到自己想知道的东西的，而且通过这种方式得到的信息，反而会倾向于相信。 大多数人使用Google只是想查找自己想要的知识。</description>
			<content type="html"><![CDATA[<h4 id="来由">来由</h4>
<p>最近Google被屏蔽的很厉害，想查个东西都要翻来覆去的，灰常麻烦。
刚开始以为一段时间就OK了，就用了临时性的解决方案。</p>
<!-- raw HTML omitted -->
<p>比如：</p>
<ul>
<li>使用<a href="http://www.bing.com/?mkt=zh-CN">Bing</a>代替。 <em>搜索效果相比Google还有差距</em></li>
<li>使用<a href="https://www.startpage.com/">StartPage</a>代替。 <em>相比原版，存在部分结果搜索不到的问题</em></li>
<li>直接用<a href="https://github.com/justjavac/Google-IPs/blob/master/README.md">Google IP</a>进行搜索。 <em>可以使用的IP被飞快的封锁</em></li>
<li>使用网上的免翻墙镜像网站<a href="https://github.com/greatfire/wiki">greatfire</a>。 <em>是个不错的解决方案，但是怕被封锁后还要重新设置</em></li>
<li>使用网上的免费VPN<a href="http://ilvpn.com/free-vpn/">免费VPN资源</a>。 <em>免费的要么限制流量，要么限制时间，而且免费的基本上速度比较慢</em></li>
<li>使用google的GAE平台的<a href="https://code.google.com/p/goagent/">goagent</a>。 <em>强烈推荐</em></li>
</ul>
<hr>
<h4 id="goagent设置">goagent设置</h4>
<p>这个网上教程很多，随便搜索都有好几个，如：</p>
<ul>
<li><a href="http://maolihui.com/goagent-detail.html">猫理会的goagent教程详细版</a></li>
<li><a href="https://www.x-berry.com/goagent/">软矿的GoAgent图文设置教程</a></li>
<li><a href="http://blog.4a8a.com/post-133.html">海盗船博客的2014最新翻墙方法之goagent翻墙教程</a></li>
</ul>
<hr>
<h4 id="软件设置">软件设置</h4>
<p>在搭建好goagent后，就是如何使用它配合浏览器上网了
我常用的浏览器有IE、猎豹、Opera
为统一解决，我的方法是：</p>
<ul>
<li>1、猎豹浏览器中安装插件SwitchySharp。然后建立规则，默认直接连接，然后设置需要翻墙的网站清单。设置成功后，导出PAC文件。</li>
<li>2、IE中设置代理服务器，勾选代理服务器，“127.0.0.1 8087”。将“使用自动配置脚本”勾选，然后按格式填入“file://C:\GoAgent\SwitchyPac.pac”。如果有代理后出问题的网站，选“高级”，将对应网站填入“例外”区域内。</li>
<li>3、Opera浏览器：Tools -&gt; Preferences -&gt; Advanced -&gt; Network -&gt; Proxy Servers -&gt; &ldquo;Use automatic proxy configuration&rdquo;，填写“file://C:\GoAgent\SwitchyPac.pac”。</li>
<li>4、IE和Opera都需要安装goagent的证书，否则访问时会出错。</li>
<li>5、可以在<a href="https://code.google.com/p/autoproxy-gfwlist/">这里</a>订阅部分数据。</li>
</ul>
<hr>
<h4 id="结">结</h4>
<p>堵不如疏，闭关锁国只能让自己更落伍。
人民总有办法得到自己想知道的东西的，而且通过这种方式得到的信息，反而会倾向于相信。
大多数人使用Google只是想查找自己想要的知识。</p>
]]></content>
		</item>
		
		<item>
			<title>some problems for golang excel update</title>
			<link>http://nivrrex.github.io/posts/some-problems-for-golang-excel-update/</link>
			<pubDate>Sun, 15 Jun 2014 17:24:30 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/some-problems-for-golang-excel-update/</guid>
			<description>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见这里 由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。
 首字母大小写导致无法外部调用 Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。
 GOPATH设置 golang有几个关键环境变量，需要进行设置
 GOROOT : Golang的安装目录，默认为C:\Go GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录 GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows） GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）  我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^
mkdir C:\Go\import mkdir C:\Go\import\src mkdir C:\Go\import\pkg set GOPATH=C:\go\import  Go build无法生成文件 这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^
 小结 归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。 Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。 日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</description>
			<content type="html"><![CDATA[<p>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见<a href="https://github.com/nivrrex/excel">这里</a>
由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="首字母大小写导致无法外部调用">首字母大小写导致无法外部调用</h4>
<p>Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。</p>
<hr>
<h4 id="gopath设置">GOPATH设置</h4>
<p>golang有几个关键环境变量，需要进行设置</p>
<ul>
<li>GOROOT : Golang的安装目录，默认为C:\Go</li>
<li>GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录</li>
<li>GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin</li>
<li>GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows）</li>
<li>GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）</li>
</ul>
<p>我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Batch" data-lang="Batch"><span class="k">mkdir</span> C:\Go\import
<span class="k">mkdir</span> C:\Go\import\src
<span class="k">mkdir</span> C:\Go\import\pkg
<span class="k">set</span> <span class="nv">GOPATH</span><span class="p">=</span>C:\go\import
</code></pre></div><hr>
<h4 id="go-build无法生成文件">Go build无法生成文件</h4>
<p>这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^</p>
<hr>
<h4 id="小结">小结</h4>
<p>归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。
Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。
日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</p>
]]></content>
		</item>
		
		<item>
			<title>commonly used software</title>
			<link>http://nivrrex.github.io/posts/commonly-used-software/</link>
			<pubDate>Thu, 12 Jun 2014 22:32:51 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/commonly-used-software/</guid>
			<description>开发工具 Python  Python Lang Python官方网站 Python PyPI Python packages的官方下载站点 Awesome Python Python框架，库，软件和资源的精选清单  Golang  Golang Downloads Golang官方网站 Golang Dev Golang开发者网站 Go Language Resources 非官方的Golang资源收集 Awesome Go Go框架，库和软件的精选清单  Nim  Nim Language Nim语言官方网站 Nim 中文社区 Nim语言中文社区 Nim Package Directory 官方的nimble资源收集 Awesome Nim 中文社区的Nim框架，库和软件的精选清单  Ruby  Ruby Lang Ruby官方网站 RubyInstaller for Windows Ruby的Windows安装打包  GCC MinGW  MinGW Distro TDM-GCC Equation Solution MinGW-builds mingw-w64  Tcc  Tiny C Compiler 极简的c语言编译器  经典软件 系统强化  Total Commander Windows下的资源管理工具 Listary Windows下的文件搜索和程序启动工具 Everthing 基于NTFS格式的快速搜索工具 ImDisk 虚拟磁盘工具 SoftPerfect RAM Disk 虚拟磁盘工具  系统美化  MacType Windows下的字体美化工具 Fences Windows下的图标分区优化工具  输入法  rimeime - 中州韻輸入法引擎 很好用的输入法工具，可配置功能较多  编辑器  SciTE 轻量级的程序编辑器 Sublime Text 跨平台、可扩展的程序编辑器 Notepad2 Mod Notepad的替代编辑器 Notepad3 Notepad2不更新后的替代编辑器  网络  shadowsocks-libev shadowsocks的c语言实现的服务器端,可布置在vps上使用 shadowsocks-windows shadowsocks的windows客户端，可自动更新GFWlist的PAC文件  </description>
			<content type="html"><![CDATA[<h2 id="开发工具">开发工具</h2>
<h4 id="python">Python</h4>
<ul>
<li><a href="https://www.python.org/">Python Lang</a> Python官方网站</li>
<li><a href="https://pypi.org/">Python PyPI</a> Python packages的官方下载站点</li>
<li><a href="https://awesome-python.com/">Awesome Python</a> Python框架，库，软件和资源的精选清单</li>
</ul>
<!-- raw HTML omitted -->
<h4 id="golang">Golang</h4>
<ul>
<li><a href="http://golang.org/dl/">Golang Downloads</a> Golang官方网站</li>
<li><a href="https://go.dev/">Golang Dev</a> Golang开发者网站</li>
<li><a href="http://go-lang.cat-v.org/">Go Language Resources</a> 非官方的Golang资源收集</li>
<li><a href="https://awesome-go.com/">Awesome Go</a> Go框架，库和软件的精选清单</li>
</ul>
<h4 id="nim">Nim</h4>
<ul>
<li><a href="https://nim-lang.org/">Nim Language</a> Nim语言官方网站</li>
<li><a href="https://nim-cn.com/">Nim 中文社区</a> Nim语言中文社区</li>
<li><a href="https://nimble.directory/">Nim Package Directory</a> 官方的nimble资源收集</li>
<li><a href="https://github.com/nim-lang-cn/awesome-nim">Awesome Nim</a> 中文社区的Nim框架，库和软件的精选清单</li>
</ul>
<h4 id="ruby">Ruby</h4>
<ul>
<li><a href="https://www.ruby-lang.org/en/">Ruby Lang</a> Ruby官方网站</li>
<li><a href="http://rubyinstaller.org/">RubyInstaller for Windows</a> Ruby的Windows安装打包</li>
</ul>
<h4 id="gcc-mingw">GCC MinGW</h4>
<ul>
<li><a href="http://nuwen.net/mingw.html">MinGW Distro</a></li>
<li><a href="http://tdm-gcc.tdragon.net/">TDM-GCC</a></li>
<li><a href="http://www.equation.com/servlet/equation.cmd?fa=fortran">Equation Solution</a></li>
<li><a href="http://sourceforge.net/projects/mingwbuilds/">MinGW-builds</a></li>
<li><a href="http://mingw-w64.org/doku.php">mingw-w64</a></li>
</ul>
<h4 id="tcc">Tcc</h4>
<ul>
<li><a href="http://bellard.org/tcc/">Tiny C Compiler</a> 极简的c语言编译器</li>
</ul>
<h2 id="经典软件">经典软件</h2>
<h4 id="系统强化">系统强化</h4>
<ul>
<li><a href="http://www.ghisler.com/">Total Commander</a> Windows下的资源管理工具</li>
<li><a href="http://www.listary.com/">Listary</a> Windows下的文件搜索和程序启动工具</li>
<li><a href="http://www.voidtools.com/">Everthing</a> 基于NTFS格式的快速搜索工具</li>
<li><a href="http://www.ltr-data.se/opencode.html/#ImDisk">ImDisk</a> 虚拟磁盘工具</li>
<li><a href="http://www.softperfect.com/">SoftPerfect RAM Disk</a> 虚拟磁盘工具</li>
</ul>
<h4 id="系统美化">系统美化</h4>
<ul>
<li><a href="https://github.com/snowie2000/mactype/">MacType</a> Windows下的字体美化工具</li>
<li><a href="http://www.stardock.com/products/fences/">Fences</a> Windows下的图标分区优化工具</li>
</ul>
<h4 id="输入法">输入法</h4>
<ul>
<li><a href="https://code.google.com/p/rimeime/">rimeime - 中州韻輸入法引擎</a> 很好用的输入法工具，可配置功能较多</li>
</ul>
<h4 id="编辑器">编辑器</h4>
<ul>
<li><a href="http://www.scintilla.org/SciTE.html">SciTE</a> 轻量级的程序编辑器</li>
<li><a href="http://www.sublimetext.com/">Sublime Text</a> 跨平台、可扩展的程序编辑器</li>
<li><a href="https://xhmikosr.github.io/notepad2-mod/">Notepad2 Mod</a> Notepad的替代编辑器</li>
<li><a href="https://github.com/rizonesoft/Notepad3">Notepad3</a> Notepad2不更新后的替代编辑器</li>
</ul>
<h4 id="网络">网络</h4>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a> shadowsocks的c语言实现的服务器端,可布置在vps上使用</li>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows">shadowsocks-windows</a> shadowsocks的windows客户端，可自动更新GFWlist的PAC文件</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Hello GitHub</title>
			<link>http://nivrrex.github.io/posts/hello-github/</link>
			<pubDate>Thu, 12 Jun 2014 19:37:32 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/hello-github/</guid>
			<description>欢迎来到我的GitHub blog！
这是我用Hexo编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。
 Git的一些基本命令 git config --global user.name &amp;#34;nivrrex&amp;#34; git config --global user.email nivrrex@gmail.com ssh-keygen -t rsa -C &amp;#34;nivrrex@gmail.com&amp;#34; ssh -T git@github.com -i ./.ssh/id_rsa 更多命令可以到git - 简明指南去查看
 Hexo的一些基本命令 npm install hexo-cli -g npm install hexo --save npm install hexo-generator-index --save npm install hexo-generator-archive --save npm install hexo-generator-category --save npm install hexo-generator-tag --save npm install hexo-generator-sitemap --save npm install hexo-generator-feed --save npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save npm install hexo-server --save npm install hexo-deployer-git --save hexo init hexo new [post] &amp;#34;My New Post&amp;#34; hexo server hexo generate hexo deploy 更多文档可以到Hexo docs上查看</description>
			<content type="html"><![CDATA[<p>欢迎来到我的<a href="http://nivrrex.github.io/">GitHub blog</a>！</p>
<p>这是我用<a href="http://hexo.io/">Hexo</a>编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。</p>
<hr>
<h4 id="git的一些基本命令">Git的一些基本命令</h4>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="s2">&#34;nivrrex&#34;</span>
<span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span> <span class="nx">nivrrex</span><span class="err">@</span><span class="nx">gmail</span><span class="p">.</span><span class="nx">com</span>

<span class="nx">ssh</span><span class="o">-</span><span class="nx">keygen</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">rsa</span> <span class="o">-</span><span class="nx">C</span> <span class="s2">&#34;nivrrex@gmail.com&#34;</span>
<span class="nx">ssh</span> <span class="o">-</span><span class="nx">T</span> <span class="nx">git</span><span class="err">@</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span> <span class="o">-</span><span class="nx">i</span> <span class="p">.</span><span class="o">/</span><span class="p">.</span><span class="nx">ssh</span><span class="o">/</span><span class="nx">id_rsa</span>
</code></pre></div><p>更多命令可以到<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a>去查看</p>
<hr>
<h4 id="hexo的一些基本命令">Hexo的一些基本命令</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">cli</span> <span class="o">-</span><span class="nx">g</span>

<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">index</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">archive</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">category</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">tag</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">sitemap</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">feed</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">ejs</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">stylus</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">marked</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">server</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">deployer</span><span class="o">-</span><span class="nx">git</span> <span class="o">--</span><span class="nx">save</span>

<span class="nx">hexo</span> <span class="nx">init</span>
<span class="nx">hexo</span> <span class="k">new</span> <span class="p">[</span><span class="nx">post</span><span class="p">]</span> <span class="s2">&#34;My New Post&#34;</span>
<span class="nx">hexo</span> <span class="nx">server</span>
<span class="nx">hexo</span> <span class="nx">generate</span>
<span class="nx">hexo</span> <span class="nx">deploy</span>
</code></pre></div><p>更多文档可以到<a href="http://hexo.io/docs/">Hexo docs</a>上查看</p>
<hr>
<h4 id="markdown语法">Markdown语法</h4>
<p>可以去<a href="http://ibruce.info/">不如</a>的<a href="http://ibruce.info/2013/11/26/markdown/">Markdown简明语法</a>去学习下</p>
]]></content>
		</item>
		
		<item>
			<title>About this blog</title>
			<link>http://nivrrex.github.io/posts/about-me/</link>
			<pubDate>Tue, 10 Jun 2014 13:55:26 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/about-me/</guid>
			<description>欢迎来到Nivrrex的GitHub blog！
本blog将记录我在GitHub和生活中的点点滴滴，主要关注Ruby Python、Golang和Nim。</description>
			<content type="html"><![CDATA[<p>欢迎来到Nivrrex的<a href="http://nivrrex.github.io/">GitHub blog</a>！</p>
<p>本blog将记录我在GitHub和生活中的点点滴滴，主要关注<del>Ruby</del> Python、Golang和Nim。</p>
]]></content>
		</item>
		
	</channel>
</rss>

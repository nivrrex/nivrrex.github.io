<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Nivrrex&#39;s blog</title>
		<link>http://nivrrex.github.io/posts/</link>
		<description>Recent content in Posts on Nivrrex&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 10 Dec 2021 10:15:00 +0800</lastBuildDate>
		<atom:link href="http://nivrrex.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>2021 summary</title>
			<link>http://nivrrex.github.io/posts/2021-summary/</link>
			<pubDate>Fri, 10 Dec 2021 10:15:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/2021-summary/</guid>
			<description>折腾的一年，回归平淡
GFW 这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。
后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。
路由器 这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。
后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。
编程 这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。
关注的 nim / zig / dlang / golang 都没有太折腾。
结 发现这几年来折腾来折腾去，实际意义却不大。
有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。
不过所有能折腾的都有了了解，后边也没太大折腾的想法了。
回归平淡，不再为了折腾而折腾~</description>
			<content type="html"><![CDATA[<p>折腾的一年，回归平淡</p>
<h3 id="gfw">GFW</h3>
<p>这一年里， VPS 换了好几家，科学上网技术也换了好几种：ss / ss+kcptun+udp2raw / trojan / xray(vless) / naiveproxy / hysteria ， bbr 核心也反复调整。</p>
<p>后来，是因为运营商的网络调整，国外 ip 连接不再丢包了，便随意选择了一种，用了下去。线路质量远比技术方案选择重要的多。</p>
<h3 id="heading">路由器</h3>
<p>这一年里，路由器也折腾了不少，常见的固件基本上都用了下，openwrt / padavan / tomato / merlin / dd-wrt / libremesh / aruba / ruckus 。也试着编译几种常见的固件，增补或删减了部分功能。</p>
<p>后来发现还是官方固件更稳定，而科学上网就交给 OrangePi(OpenWrt) 旁路由来解决。大部门之前折腾的路由器也都挂海鲜市场了，目前是使用 tplink-xdr5430 ，不折腾。</p>
<h3 id="heading-1">编程</h3>
<p>这一年里，程序折腾的不太多，主要是用 lua 写了几个 openwrt 的 wifi 方面的小程序， c 完善了几个常用程序的功能。</p>
<p>关注的 nim / zig / dlang / golang 都没有太折腾。</p>
<h3 id="heading-2">结</h3>
<p>发现这几年来折腾来折腾去，实际意义却不大。</p>
<p>有的时候，花点小钱，去解决你需要花大量时间去解决的问题，却是很值得的。</p>
<p>不过所有能折腾的都有了了解，后边也没太大折腾的想法了。</p>
<p>回归平淡，不再为了折腾而折腾~</p>
]]></content>
		</item>
		
		<item>
			<title>dlang with ldc in mipsel</title>
			<link>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</link>
			<pubDate>Sun, 30 Aug 2020 09:19:10 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/dlang-with-ldc-in-mipsel/</guid>
			<description>简介 突然想用dlang语言玩玩，然后又希望能在路由器上使用(openwrt mipsel)，就实验了一下Cross-compiling with LDC，现在将具体过程记录一下。
mipsel gcc 首先需要到openwrt下载路由器对应的gcc的Cross-Compiler，我用的是mt7621的路由器，并将其下载到了 /root/mipsel/ 目录下
cd /root/wget https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xztar xvf openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xzrm openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xzmkdir mipselmv openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/* mipsel/rm -r openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64设置环境变量
cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrcexport PATH=/root/mipsel/staging_dir/toolchain-mipsel_24kc_gcc-7.5.0_musl/bin/:$PATHexport STAGING_DIR=/root/mipsel/staging_dir/:STAGING_DIRalias strip-mipsel=&amp;#39;mipsel-openwrt-linux-strip -s&amp;#39;EOFsource /etc/bash.bashrc如上，mipsel的gcc交叉编译环境就配置好了
ldc 下载 到ldc官网下载最新版本的ldc，将其下载设置到 /root/ldc2/ 目录下，并设置path环境变量
wget https://github.com/ldc-developers/ldc/releases/download/v1.23.0/ldc2-1.23.0-linux-x86_64.tar.xztar xvf ldc2-1.23.0-linux-x86_64.tar.xzrm ldc2-1.23.0-linux-x86_64.tar.xzmv ldc2-1.23.0-linux-x86_64 ldc2cat &amp;lt;&amp;lt; \EOF &amp;gt;&amp;gt; /etc/bash.bashrcexport PATH=$PATH:/root/ldc2/binEOFsource /etc/bash.bashrc编译mipsel的runtime 需要下载 cmake ninja-build 等工具支持编译，并将编译好的 .</description>
			<content type="html"><![CDATA[<h1 id="heading">简介</h1>
<p>突然想用dlang语言玩玩，然后又希望能在路由器上使用(openwrt mipsel)，就实验了一下<a href="https://wiki.dlang.org/Cross-compiling_with_LDC">Cross-compiling with LDC</a>，现在将具体过程记录一下。</p>
<h1 id="mipsel-gcc">mipsel gcc</h1>
<p>首先需要到openwrt下载路由器对应的gcc的Cross-Compiler，我用的是mt7621的路由器，并将其下载到了 /root/mipsel/ 目录下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /root/
wget https://downloads.openwrt.org/releases/19.07.3/targets/ramips/mt7621/openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
tar xvf openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
rm openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64.tar.xz
mkdir mipsel
mv openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64/* mipsel/
rm -r openwrt-sdk-19.07.3-ramips-mt7621_gcc-7.5.0_musl.Linux-x86_64
</code></pre></div><p>设置环境变量</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">export PATH=/root/mipsel/staging_dir/toolchain-mipsel_24kc_gcc-7.5.0_musl/bin/:$PATH
</span><span class="s">export STAGING_DIR=/root/mipsel/staging_dir/:STAGING_DIR
</span><span class="s">alias strip-mipsel=&#39;mipsel-openwrt-linux-strip -s&#39;
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><p>如上，mipsel的gcc交叉编译环境就配置好了</p>
<h1 id="ldc-">ldc 下载</h1>
<p>到ldc官网下载最新版本的ldc，将其下载设置到 /root/ldc2/ 目录下，并设置path环境变量</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">wget https://github.com/ldc-developers/ldc/releases/download/v1.23.0/ldc2-1.23.0-linux-x86_64.tar.xz
tar xvf ldc2-1.23.0-linux-x86_64.tar.xz
rm ldc2-1.23.0-linux-x86_64.tar.xz
mv ldc2-1.23.0-linux-x86_64 ldc2

cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">export PATH=$PATH:/root/ldc2/bin
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><h1 id="mipselruntime">编译mipsel的runtime</h1>
<p>需要下载 cmake ninja-build 等工具支持编译，并将编译好的 .so .a 文件移动到/root/ldc2/ldc-runtime/mipsel目录下</p>
<pre><code>apt install cmake ninja-build -y
cd /root
CC=mipsel-openwrt-linux-gcc ldc-build-runtime --ninja --dFlags=&quot;-w;-mtriple=mipsel-linux;-march=mipsel;-mcpu=mips32;--float-abi=soft&quot; --cFlags=&quot;-march=mips32&quot; --targetSystem=&quot;Linux;UNIX&quot;
mkdir /root/ldc2/ldc-runtime/mipsel -p
mv ldc-build-runtime.tmp/lib/ /root/ldc2/ldc-runtime/mipsel
rm ldc-build-runtime.tmp/ -r
</code></pre><h1 id="libexecinfo">编译下载libexecinfo</h1>
<p>如果此时直接进行编译，会出现 <strong>undefined reference to `backtrace_symbols&rsquo;</strong>  错误，还需要编译libexecinfo库。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /root
wget https://github.com/mikroskeem/libexecinfo/archive/1.1-3.tar.gz
tar xvf 1.1-3.tar.gz
rm 1.1-3.tar.gz
<span class="nb">cd</span> libexecinfo-1.1-3
sed -i <span class="s2">&#34;s%CC=cc%CC=mipsel-openwrt-linux-gcc%g&#34;</span> Makefile 
sed -i <span class="s2">&#34;s%AR=ar%AR=mipsel-openwrt-linux-ar%g&#34;</span> Makefile 
make
</code></pre></div><p>编译后的库文件放置到 /root/ldc2/ldc-runtime/mipsel/lib/ 文件夹下，便于后续使用</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mv libexecinfo.a /root/ldc2/ldc-runtime/mipsel/lib/
mv libexecinfo.so.1 /root/ldc2/ldc-runtime/mipsel/lib/
mv stacktraverse.So /root/ldc2/ldc-runtime/mipsel/lib/
mv execinfo.So /root/ldc2/ldc-runtime/mipsel/lib/
rm /root/libexecinfo-1.1-3/ -r
</code></pre></div><h1 id="d">编译.d代码文件</h1>
<p>简单的hello world代码</p>
<div class="highlight"><pre class="chroma"><code class="language-d" data-lang="d"><span class="kn">import</span> <span class="nn">std.stdio</span><span class="o">;</span>
<span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="o">)</span>
<span class="o">{</span>
    <span class="n">writeln</span><span class="o">(</span><span class="s">&#34;Hello, world! dlang in mipsel!&#34;</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>编译至mipsel环境</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ldc2 -mtriple<span class="o">=</span>mipsel-linux -march<span class="o">=</span>mipsel -mcpu<span class="o">=</span>mips32 --float-abi<span class="o">=</span>soft -gcc<span class="o">=</span>mipsel-openwrt-linux-gcc --linker<span class="o">=</span>bfd -L-L/root/ldc2/ldc-runtime/mipsel/lib -defaultlib<span class="o">=</span>phobos2-ldc,druntime-ldc --platformlib<span class="o">=</span>execinfo hello.d
</code></pre></div><h1 id="alias">设置alias</h1>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cat <span class="s">&lt;&lt; \EOF &gt;&gt; /etc/bash.bashrc
</span><span class="s">alias ldc2-mipsel=&#34;ldc2 -mtriple=mipsel-linux -march=mipsel -mcpu=mips32 --float-abi=soft --release -Os -gcc=mipsel-openwrt-linux-gcc --linker=bfd -L-L/root/ldc2/ldc-runtime/mipsel/lib -defaultlib=phobos2-ldc,druntime-ldc --platformlib=execinfo&#34;
</span><span class="s">EOF</span>
<span class="nb">source</span> /etc/bash.bashrc
</code></pre></div><h1 id="heading-1">结</h1>
<p>至此，dlang在linux环境下，编译mipsel架构的编译环境就搭配好了，平时可以用dlang针对mipsel的openwrt路由器写点小工具啦~</p>
]]></content>
		</item>
		
		<item>
			<title>compile nim with tcc</title>
			<link>http://nivrrex.github.io/posts/compile-nim-with-tcc/</link>
			<pubDate>Sun, 17 Nov 2019 09:09:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/compile-nim-with-tcc/</guid>
			<description>缘来 Nim语言可以转换成C、C++、Objective-C、JavaScript等语言，其中C语言默认是转换成GCC进行编译的，相较于Go语言来说，编译速度还是有点慢的。于是兴起了用Tcc编译器编译Nim语言的想法。
 配置 其实配置很简单，打开nim\config\nim.cfg文件
cc = gcc修改为cc = tcc结 就这样，保存文件配置完成后，就可以用Tcc编译Nim语言啦~</description>
			<content type="html"><![CDATA[<h3 id="heading">缘来</h3>
<p>Nim语言可以转换成C、C++、Objective-C、JavaScript等语言，其中C语言默认是转换成GCC进行编译的，相较于Go语言来说，编译速度还是有点慢的。于是兴起了用Tcc编译器编译Nim语言的想法。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="heading-1">配置</h3>
<p>其实配置很简单，打开nim\config\nim.cfg文件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">cc</span> <span class="o">=</span> gcc
修改为
<span class="nv">cc</span> <span class="o">=</span> tcc
</code></pre></div><h3 id="heading-2">结</h3>
<p>就这样，保存文件配置完成后，就可以用Tcc编译Nim语言啦~</p>
]]></content>
		</item>
		
		<item>
			<title>crosscompiling for openwrt with golang</title>
			<link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</link>
			<pubDate>Fri, 15 Nov 2019 23:29:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-golang/</guid>
			<description>缘来 实验了下nim语言(nimlang)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。
 Golang支持的交叉编译平台 amd64 (also known as x86-64)A mature implementation.386 (x86 or x86-32)Comparable to the amd64 port.arm (ARM)Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports.arm64 (AArch64)Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports.ppc64, ppc64le (64-bit PowerPC big- and little-endian)Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</description>
			<content type="html"><![CDATA[<h3 id="heading">缘来</h3>
<p>实验了下nim语言(<a href="https://nim-lang.org/">nimlang</a>)在OpenWRT系统下可执行程序的交叉编译，也想实验一下Golang的交叉编译，发现更方便。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="golang">Golang支持的交叉编译平台</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">amd64 <span class="o">(</span>also known as x86-64<span class="o">)</span>
A mature implementation.

<span class="m">386</span> <span class="o">(</span>x86 or x86-32<span class="o">)</span>
Comparable to the amd64 port.

arm <span class="o">(</span>ARM<span class="o">)</span>
Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports.

arm64 <span class="o">(</span>AArch64<span class="o">)</span>
Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports.

ppc64, ppc64le <span class="o">(</span>64-bit PowerPC big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.5 and not as well exercised as other ports.

mips, mipsle <span class="o">(</span>32-bit MIPS big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.8 and not as well exercised as other ports.

mips64, mips64le <span class="o">(</span>64-bit MIPS big- and little-endian<span class="o">)</span>
Supports Linux binaries. New in 1.6 and not as well exercised as other ports.

s390x <span class="o">(</span>IBM System z<span class="o">)</span>
Supports Linux binaries. New in 1.7 and not as well exercised as other ports.

wasm <span class="o">(</span>WebAssembly<span class="o">)</span>
Targets the WebAssembly platform. New in 1.11 and not as well exercised as other ports.
</code></pre></div><h3 id="golangmips">Golang针对mips系统的交叉编译</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>mips go build -ldflags<span class="o">=</span><span class="s2">&#34;-s -w&#34;</span> test.go
</code></pre></div><p>直接指定目标系统和CPU架构，就直接可以编译生成对应平台下的可执行文件</p>
<p>在mips架构下，如OpenWRT系统，文件执行时出现&quot;Illegal instruction&quot;错误，注意加上GOMIPS=softfloat变量</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>mips <span class="nv">GOMIPS</span><span class="o">=</span>softfloat go build -ldflags<span class="o">=</span><span class="s2">&#34;-s -w&#34;</span> test.go
</code></pre></div><h3 id="heading-1">结</h3>
<p>就这样，golang可以更简单的直接生成对应系统和CPU架构下的可执行文件~</p>
]]></content>
		</item>
		
		<item>
			<title>crosscompiling for openwrt with nim</title>
			<link>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</link>
			<pubDate>Fri, 15 Nov 2019 23:21:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/crosscompiling-for-openwrt-with-nim/</guid>
			<description>缘来 nim语言(nimlang)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。
 Debian系统下下载nim语言 sh -c &amp;#39;printf &amp;#34;deb http://ftp.cn.debian.org/debian/ sid main&amp;#34; &amp;gt; /etc/apt/sources.list.d/sid.list&amp;#39;apt updateapt -t sid install nim -yDebian系统下安装gcc等编译环境 apt-get install build-essential下载对应架构的OpenWRT编译工具链toolchain wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xztar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xzrm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz设置环境并进行编译 export PATH=/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:$PATHnim -d:release --opt=size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim结 就这样，就可以生成对应路由器下的可执行文件啦~</description>
			<content type="html"><![CDATA[<h3 id="heading">缘来</h3>
<p>nim语言(<a href="https://nim-lang.org/">nimlang</a>)最近更新到1.02版本了，感觉还不错，正好最近在玩OpenWRT，记录一下在Linux下交叉编译mips架构的OpenWRT系统下的可执行程序步骤。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="debiannim">Debian系统下下载nim语言</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sh -c <span class="s1">&#39;printf &#34;deb http://ftp.cn.debian.org/debian/ sid main&#34; &gt; /etc/apt/sources.list.d/sid.list&#39;</span>
apt update
apt -t sid install nim -y
</code></pre></div><h3 id="debiangcc">Debian系统下安装gcc等编译环境</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">apt-get install build-essential
</code></pre></div><h3 id="openwrttoolchain">下载对应架构的OpenWRT编译工具链toolchain</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">wget https://archive.openwrt.org/releases/18.06.4/targets/ramips/mt7621/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
tar xvf openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
rm openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64.tar.xz
</code></pre></div><h3 id="heading-1">设置环境并进行编译</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/root/openwrt-sdk-18.06.4-ramips-mt7621_gcc-7.3.0_musl.Linux-x86_64/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/:<span class="nv">$PATH</span>
nim -d:release --opt<span class="o">=</span>size -d:ssl --cpu:mipsel --os:linux --gcc.exe:mipsel-openwrt-linux-gcc --gcc.linkerexe:mipsel-openwrt-linux-gcc c test.nim
</code></pre></div><h3 id="heading-2">结</h3>
<p>就这样，就可以生成对应路由器下的可执行文件啦~</p>
]]></content>
		</item>
		
		<item>
			<title>ubnt er-x use openwrt</title>
			<link>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</link>
			<pubDate>Mon, 09 Jul 2018 20:12:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/ubnt-erx-use-openwrt/</guid>
			<description>给UBNT的ER-X刷OpenWrt固件
缘 UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。
于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 https://cokebar.info/archives/664 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。
安装 前期问题 刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。
于是到 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=15243 帖子中和国外的一个帖子中提到的 http://s000.tinyupload.com/index.php?file_id=07741512272586742124 ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：
Request timed out而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。
恢复官方固件 后来在 http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;amp;tid=19800 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：
##这一部分不是帖子的内容，是前期准备工作#在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tartar -xf ER-e50.</description>
			<content type="html"><![CDATA[<p>给UBNT的ER-X刷OpenWrt固件</p>
<h3 id="heading">缘</h3>
<p>UBNT 的 ER-X 是个弱电箱的神器，设备很小，用的是 MT7621AT 。虽然没有无线，但是弱电箱里面无线信号本来就屏蔽的厉害，后期加装个 AP 就行了。</p>
<p>于是购置了一台 ER-X ，因为我目前的翻墙方式是 Shadowsocks + ChinaDNS + DNS Forwarder 方式，配置到 OpenWrt 路由器上实现的，具体步骤详见 <a href="https://cokebar.info/archives/664">https://cokebar.info/archives/664</a> 。而UBNT的路由器系统 edgeRouter 还需要对以上的软件进行交叉编译，就不想费功夫了，直接刷成OpenWrt，用之前的方式翻墙就行了。而且 OpenWrt 的 18.06 版本，最新的 4.14 内核的 FLOW OFFLOAD ，也算支持 MT7621 的硬转发了，性能应该问题不大。</p>
<!-- raw HTML omitted -->
<h3 id="heading-1">安装</h3>
<h4 id="heading-2">前期问题</h4>
<p>刚开始安装时，因为 edgeRouter 系统不支持 OpenWrt 官方的 ubnt-erx-initramfs-kernel.bin，校验不通过，必须是类似 factory-initramfs.tar 的固件包才行。</p>
<p>于是到 <a href="http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=15243">http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=15243</a> 帖子中和国外的一个帖子中提到的 <a href="http://s000.tinyupload.com/index.php?file_id=07741512272586742124">http://s000.tinyupload.com/index.php?file_id=07741512272586742124</a> ，分别下载了他们的 factory-initramfs.tar 类的固件，确实可以安装了，但是在用sysupgrade命令更新最新的OpenWrt系统时，出现了下面的问题：</p>
<pre><code>Request timed out
</code></pre><p>而且这两个系统，都无法保存设置，安装新软件。差点以为要买个TTL线救回原先的系统了。</p>
<h4 id="heading-3">恢复官方固件</h4>
<p>后来在 <a href="http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=19800">http://bbs.ubnt.com.cn/forum.php?mod=viewthread&amp;tid=19800</a> 帖子里面，发现“4.刷回官方固件”以后的步骤，直接可以用。就用下边的方式，又还原成1.7系统了。下边记录一下：</p>
<pre><code>##这一部分不是帖子的内容，是前期准备工作
#在PC上下载ER-X的官方固件包，解压上传至路由器 /root 目录下
wget https://dl.ubnt.com/firmwares/edgemax/v1.7.0/ER-e50.v1.7.0.4783374.tar
tar -xf ER-e50.v1.7.0.4783374.tar
rm ER-e50.v1.7.0.4783374.tar
#解压后应该有6个文件 compat  squashfs.tmp  squashfs.tmp.md5  version.tmp  vmlinux.tmp  vmlinux.tmp.md5
scp -P 22 compat squashfs.tmp squashfs.tmp.md5 version.tmp vmlinux.tmp vmlinux.tmp.md5 root@192.168.1.1:/root


##以下是帖子中提到各个步骤
#登录路由器后，还原ubnt系统
cd /root
ubidetach -p /dev/mtd5
ubiformat /dev/mtd5
ubiattach -p /dev/mtd5
ubimkvol /dev/ubi0 --vol_id=0 --lebs=1925 --name=troot
mount -o sync -t ubifs ubi0:troot /mnt/

cp version.tmp /mnt/version 
cp squashfs.tmp /mnt/squashfs.img
cp squashfs.tmp.md5 /mnt/squashfs.img.md5

dd if=vmlinux.tmp of=/dev/mtdblock3
dd if=vmlinux.tmp of=/dev/mtdblock4

reboot
</code></pre><p>正常重启后，应该就恢复成官方1.7系统了，然后注意把网线接入Eth0口，正常配置下 edgeRouter 系统就行了。</p>
<p><strong>注意</strong>：目前实验的，似乎只有上边的两个装不了新软件的 OpenWrt 系统的可以刷回官方系统，OpenWrt 官方的系统刷机时，会出现以下错误（但是应该用TTL线还是可以刷回官方系统的，可以参考上边的帖子的前半部分内容）：</p>
<pre><code>ubidetach: error!: cannot detach &quot;/dev/mtd5&quot;
           error 16 (Resource busy)
</code></pre><h3 id="heading-4">柳暗花明</h3>
<p>刷会官方系统后，本来以为没办法了。后来搜索到一个网站 <a href="https://wiki.opennet-initiative.de/wiki/Ubiquiti_EdgeRouter">https://wiki.opennet-initiative.de/wiki/Ubiquiti_EdgeRouter</a> ,似乎是一个在 OpenWrt 系统上叠加 OpenNet 安全网络的组织。网页上有详细的从官方系统刷新到 OpenWrt系统的说明，而且有对应的固件。</p>
<h4 id="initramfs-factory">安装initramfs-factory</h4>
<p>按该网站的说明，首先从官方系统，刷新成OpenWrt系统，下面记录下具体的步骤</p>
<pre><code>#PC上下载factory固件，并上传
wget http://downloads.opennet-initiative.de/ubnt/edgeos/openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar
scp -P 22 openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar ubnt@192.168.1.1:/tmp

#登录路由器，并添加OpenWrt系统
ssh -p 22 ubnt@192.168.1.1   #密码ubnt
cd /tmp
add system image openwrt-ramips-mt7621-ubnt-erx-initramfs-factory.tar
show system image
reboot 
</code></pre><p>正常情况下，重启后，将进入 OpenNet 的 OpenWrt 系统，然后可以刷新最新的 OpenWrt 系统（应该也可以刷新 OpenWrt 的官方系统，这里是更新成了 OpenNet 的系统）</p>
<h4 id="squashfs-sysupgrade">更新squashfs-sysupgrade</h4>
<pre><code>#PC上下载sysupgrade固件，并上传
wget http://downloads.opennet-initiative.de/openwrt/stable/latest/targets/ramips/mt7621/lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar
scp -P 22 lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar root@192.168.1.1:/tmp

#登录路由器，并更新OpenWrt系统
ssh -p 22 root@192.168.1.1
cd /tmp
sysupgrade lede-0.5.4-2283-ramips-mt7621-ubnt-erx-squashfs-sysupgrade.tar
</code></pre><p>sysupgrade 更新后会自动重启，结束后就是 OpenNet 的最新的 OpenWrt 系统了。我是在这个系统基础上，又更新成官方的 OpenWrt 系统了。</p>
<p><strong>注意</strong>： OpenNet 的 OpenWrt 系统，网段是172.16.0.1/24 , 帐号root , 密码admin</p>
<h3 id="heading-5">结</h3>
<p>至此，ER-X 刷新 OpenWrt 系统成功。（如果此时还想恢复官方系统，就必须通过TTL线了）</p>
<p>虽然 OpenWrt 对比 Ubnt 的 edgeRouter 系统可能性能有点弱势，但是比不了方便啊，而且支持 OpenWrt 的翻墙类软件还是比较丰富和更新及时的，就这样用啦~</p>
]]></content>
		</item>
		
		<item>
			<title>use cmder</title>
			<link>http://nivrrex.github.io/posts/use-cmder/</link>
			<pubDate>Mon, 04 Jun 2018 14:24:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/use-cmder/</guid>
			<description>缘来 Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了cmder这个很方便的替代windows自带命令行的好工具，记录一下。
 介绍 cmder由3部分组成：
ConEmu ConEmu 是一套 Windows 控制台模拟器 (console emulator)
Clink Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力
msysgit 提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &amp;hellip; 等
安装 安裝 cmder
先到 cmder 官网 http://cmder.net/ 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。
外部链接 具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：
  介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 ) https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx
  Win下必备神器之Cmder https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/
  cmder 一个比cmd强n倍的神器 https://www.jianshu.com/p/7a706c0a3411
  配置 注册Cmder，文档的右键菜单添加Cmder here Cmder.</description>
			<content type="html"><![CDATA[<h3 id="heading">缘来</h3>
<p>Windows下的命令行一直没有什么进化，命令不多，处理也很不方便，比较其Linux的shell，差距比较大。所以网上一直也有cygwin和msys这种，将Linux的命令移植到Windows下使用的工具集。但虽然命令有了，但命令行自身的一些劣势，还是没有解决。最近，从网上看到了<a href="http://cmder.net/">cmder</a>这个很方便的替代windows自带命令行的好工具，记录一下。</p>
<!-- raw HTML omitted -->
<hr>
<h3 id="heading-1">介绍</h3>
<p>cmder由3部分组成：</p>
<h5 id="conemuhttpsconemugithubioen"><a href="https://conemu.github.io/en/">ConEmu</a></h5>
<p>ConEmu 是一套 Windows 控制台模拟器 (console emulator)</p>
<h5 id="clinkhttpsgithubcommridgersclink"><a href="https://github.com/mridgers/clink">Clink</a></h5>
<p>Clink将GNU Readline 函数库整合进原生的Windows 命令行控制台，提供命令行模式下强大的编辑和输入能力</p>
<h5 id="msysgithttpsgithubcommsysgitmsysgit"><a href="https://github.com/msysgit/msysgit">msysgit</a></h5>
<p>提供了Git for Windows 相关工具，和Unix/Linux 环境下常用的命令行工具，如 less, ls, tar, unzip, md5sum, grep, sed &hellip; 等</p>
<h3 id="heading-2">安装</h3>
<p>安裝 cmder</p>
<p>先到 cmder 官网 <a href="http://cmder.net/">http://cmder.net/</a> 下载此工具，有两个版本，分別是 mini 和 full 版，区别在于是否内建msysgit工具集。在电脑未安装Git for Windows等工具集的时候，建议可以下载full版使用。</p>
<h3 id="heading-3">外部链接</h3>
<p>具体使用就不想介绍了，网上有详细的使用介绍和说明，这里推荐3篇文章，大家可以看一下：</p>
<ul>
<li>
<p>介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 )
<a href="https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx">https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx</a></p>
</li>
<li>
<p>Win下必备神器之Cmder
<a href="https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/">https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/</a></p>
</li>
<li>
<p>cmder 一个比cmd强n倍的神器
<a href="https://www.jianshu.com/p/7a706c0a3411">https://www.jianshu.com/p/7a706c0a3411</a></p>
</li>
</ul>
<h3 id="heading-4">配置</h3>
<h4 id="cmdercmder-here">注册Cmder，文档的右键菜单添加Cmder here</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Cmder.exe /REGISTER ALL
</code></pre></div><h4 id="cmderls">Cmder使用ls中文显示乱码解决方案</h4>
<h5 id="1">方案1</h5>
<p>默认配置不支持使用ls显示中文命名的文件列表。</p>
<p>解决方法：
按下Win+Alt+P打开设置。
在StartUp - Environment里添加</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">set</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
<span class="nb">set</span> <span class="nv">LANG</span><span class="o">=</span>zh_CN.GBK
<span class="nb">set</span> <span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.utf8
</code></pre></div><p>保存配置</p>
<p>重启Cmder，发现使用ls，中文正确显示了。</p>
<h5 id="heading-5">备注</h5>
<p>因ConEmu的bug，该设置无法保存，可以去
<a href="https://github.com/Maximus5/ConEmu/releases">https://github.com/Maximus5/ConEmu/releases</a>
下载最新或历史版本的ConEmu，替换Cmder自带的版本，则可以解决这个问题</p>
<h5 id="2">方案2</h5>
<p>修改cmder\vendor\conemu-maximus5\ConEmu.xml文件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">&lt;value <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;EnvironmentSet&#34;</span> <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;multi&#34;</span>&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set PATH=%ConEmuBaseDir%\Scripts;%PATH%&#34;</span>/&gt;
&lt;/value&gt;
</code></pre></div><p>修改添加为：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">&lt;value <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;EnvironmentSet&#34;</span> <span class="nv">type</span><span class="o">=</span><span class="s2">&#34;multi&#34;</span>&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set PATH=%ConEmuBaseDir%\Scripts;%PATH%&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LANG=zh_CN.UTF-8&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LANG=zh_CN.gbk&#34;</span>/&gt;
	&lt;line <span class="nv">data</span><span class="o">=</span><span class="s2">&#34;set LC_ALL=zh_CN.utf8&#34;</span>/&gt;
&lt;/value&gt;
</code></pre></div><h3 id="heading-6">结</h3>
<p>就这样，配置完成后，就可以用啦~</p>
]]></content>
		</item>
		
		<item>
			<title>change hexo to hugo</title>
			<link>http://nivrrex.github.io/posts/change-hexo-to-hugo/</link>
			<pubDate>Sun, 23 Apr 2017 11:22:28 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/change-hexo-to-hugo/</guid>
			<description>缘由 好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。 而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。
于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：
hugo 这个go语言写的大杀器。
 A fast and modern static website engine Language:Go License:APL 2.0  目前在StaticGen上排名已经超过Hexo了，仅次于Jekyll，于是兴起了试用的念头。
迁移 因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章从 Hexo 迁移到 Hugo介绍了如何迁移
下载hugo hugo就是一个执行文件，可以直接从官网下载
windows下执行环境可以参考https://gohugo.io/tutorials/installing-on-windows/
生成站点 可以到Hugo - Introduction to Hugo自行学习
Hugo - Hugo Quickstart Guide 快速上手指南
生成站点比较简单：
hugo new site sitename主题 可以到以下站址找自己喜欢的主题，我选择的是 hugo_eiio hermit主题
 Hugo Themes Site hugoThemes: All Themes Hugo  安装比较简单：
cd themesgit clone https://github.com/Track3/hermit.git themes/hermit生成页面 hugo new posts/about.md然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 MarkdownEditor</description>
			<content type="html"><![CDATA[<h4 id="heading">缘由</h4>
<p>好久没有更新blog了，最近在重装系统并转移硬盘数据时，需要移动并删除hexo文件夹下的数据，结果提示“该文件夹包含名称过长且无法放入回收站的项目”，感觉好不爽。
而且重新布置hexo比较麻烦，要装一大堆插件，原先版本插件已经失效了。</p>
<p>于是就随便在网上搜索了一下，看看有什么替代的静态站点生成器，结果发现了：</p>
<p><strong><a href="https://gohugo.io/">hugo</a></strong> 这个go语言写的大杀器。</p>
<ul>
<li>A fast and modern static website engine</li>
<li>Language:Go</li>
<li>License:APL 2.0</li>
</ul>
<p>目前在<a href="https://www.staticgen.com/">StaticGen</a>上排名已经超过<a href="hexo.io">Hexo</a>了，仅次于<a href="jekyllrb.com">Jekyll</a>，于是兴起了试用的念头。</p>
<h4 id="heading-1">迁移</h4>
<p>因为blog上文章不多，迁移比较方便，主要是将Hexo的YAML转换为Hugo的TOML，网上有篇文章<a href="https://github.com/nodejh/nodejh.github.io/issues/11">从 Hexo 迁移到 Hugo</a>介绍了如何迁移</p>
<h4 id="hugo">下载hugo</h4>
<p>hugo就是一个执行文件，可以直接从<a href="https://github.com/spf13/hugo/releases">官网</a>下载</p>
<p>windows下执行环境可以参考<a href="https://gohugo.io/tutorials/installing-on-windows/">https://gohugo.io/tutorials/installing-on-windows/</a></p>
<h4 id="heading-2">生成站点</h4>
<p>可以到<a href="http://gohugo.io/overview/introduction/">Hugo - Introduction to Hugo</a>自行学习</p>
<p><strong><a href="http://gohugo.io/overview/quickstart/">Hugo - Hugo Quickstart Guide</a></strong>  快速上手指南</p>
<p>生成站点比较简单：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new site sitename
</code></pre></div><h4 id="heading-3">主题</h4>
<p>可以到以下站址找自己喜欢的主题，我选择的是 <del><a href="https://themes.gohugo.io/hugo_eiio/">hugo_eiio</a></del> <a href="https://github.com/Track3/hermit">hermit</a>主题</p>
<ul>
<li><a href="https://themes.gohugo.io/">Hugo Themes Site</a></li>
<li><a href="https://github.com/spf13/hugoThemes">hugoThemes: All Themes Hugo</a></li>
</ul>
<p>安装比较简单：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> themes
git clone https://github.com/Track3/hermit.git themes/hermit
</code></pre></div><h4 id="heading-4">生成页面</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/about.md
</code></pre></div><p>然后用自己喜欢的MD编辑器编辑就行啦，我用的是这款 <a href="https://github.com/jijinggang/MarkdownEditor">MarkdownEditor</a></p>
<h4 id="heading-5">本地测试</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo server --buildDrafts --watch --theme themename
</code></pre></div><p>运行后可以在 <a href="http://localhost:1313/">http://localhost:1313/</a> 查看具体效果</p>
<h4 id="heading-6">生成静态页面</h4>
<p>还是一个命令：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><p>基本上页面数量少的话，都是在ms级别，生成文件在public文件夹内</p>
<h4 id="github">发布到github</h4>
<p>将public文件夹中文件和github.io进行同步即可</p>
<hr>
<h4 id="heading-7">结</h4>
<p>至此，新的blog已经搭建完成了，虽然存在现在theme没有之前用hexo的theme好看，但是胜在简单，而且后续还可以自己慢慢调整，整体还是比较喜欢的 ^o^ ~</p>
]]></content>
		</item>
		
		<item>
			<title>start to use python</title>
			<link>http://nivrrex.github.io/posts/start-to-use-python/</link>
			<pubDate>Mon, 04 Apr 2016 09:05:37 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/start-to-use-python/</guid>
			<description>缘来 最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。
 开始 整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。
整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。
Python3 vs Python2 这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。
但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。
print无法输出中文 这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：
import io, syssys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&amp;#39;utf8&amp;#39;)相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。
Python VS Ruby 这个题目比较大，只能简单的就第一感觉来说：
Python的好处就是编码样式比较统一，第三方类库超多。可以关注自己需要解决的问题，不用费心思在语法细节上。Ruby的优势是处理文本效率很高，语法糖很多，用起来很省心。但是第三方类库和Python相比差距还是比较大。结 其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。
最终还是选择了Python，而且可能近期都会使用它。</description>
			<content type="html"><![CDATA[<h4 id="heading">缘来</h4>
<p>最近因为使用Ruby做某个Excel内的数据分析时，写的脚本执行时间过长，考虑进行优化。从网上看到Python的数据分析能力很强，所以试着Ruby换成了Python。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="heading-1">开始</h4>
<p>整体切换还是很顺利的，花了段时间看了下基本的语法，然后就是将Ruby写的脚本，先直接翻译成Python语言实现，然后再用Python特有的第三方库进行优化。</p>
<p>整个切换过程还是比较顺利的，毕竟两个语言有很大的相近的地方。当然也遇到了不少坑，比如Python3和Python2的选择，print输出的坑。</p>
<h4 id="python3-vs-python2">Python3 vs Python2</h4>
<p>这里没有纠结那么多，直接选择了Python3，毕竟是以后的发展方向。</p>
<p>但是也遇到了部分类库不支持，print函数需要括号，中文字符无法输出，没有ruby的#{}字符串变量，这些东东，但还是都过来了。</p>
<h4 id="print">print无法输出中文</h4>
<p>这是比较大的一个坑，找到和解决它花了不少时间，开始以为是其它地方的问题。最后是在网上看到的一个解决方案，因为python3的print不是全编码输出的，必须指定一下，添加以下的代码就OK了：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">io</span><span class="o">,</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">TextIOWrapper</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">buffer</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">utf8</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>相比较而言，不得不说，Python的print没有Ruby的puts和p好用啊。</p>
<h4 id="python-vs-ruby">Python VS Ruby</h4>
<p>这个题目比较大，只能简单的就第一感觉来说：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">Python的好处就是编码样式比较统一</span><span class="err">，</span><span class="err">第</span><span class="err">三</span><span class="err">方</span><span class="err">类</span><span class="err">库</span><span class="err">超</span><span class="err">多</span><span class="err">。</span>
<span class="err">可</span><span class="err">以</span><span class="err">关</span><span class="err">注</span><span class="err">自</span><span class="err">己</span><span class="err">需</span><span class="err">要</span><span class="err">解</span><span class="err">决</span><span class="err">的</span><span class="err">问</span><span class="err">题</span><span class="err">，</span><span class="err">不</span><span class="err">用</span><span class="err">费</span><span class="err">心</span><span class="err">思</span><span class="err">在</span><span class="err">语</span><span class="err">法</span><span class="err">细</span><span class="err">节</span><span class="err">上</span><span class="err">。</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="no">Ruby的优势是处理文本效率很高</span><span class="err">，</span><span class="err">语</span><span class="err">法</span><span class="err">糖</span><span class="err">很</span><span class="err">多</span><span class="err">，</span><span class="err">用</span><span class="err">起</span><span class="err">来</span><span class="err">很</span><span class="err">省</span><span class="err">心</span><span class="err">。</span>
<span class="err">但</span><span class="err">是</span><span class="err">第</span><span class="err">三</span><span class="err">方</span><span class="err">类</span><span class="err">库</span><span class="err">和</span><span class="no">Python相比差距还是比较大</span><span class="err">。</span>
</code></pre></div><h4 id="heading-2">结</h4>
<p>其实后来回顾时，针对我脚本中的部分功能，Ruby的处理文字、正则的效率可能比Python还强，但是由于没有Python那么完善的第三方类库。如NumPy,Pandas这些，所以最终效率还是Python领先了。</p>
<p>最终还是选择了Python，而且可能近期都会使用它。</p>
]]></content>
		</item>
		
		<item>
			<title>change editer with sublime text</title>
			<link>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</link>
			<pubDate>Sat, 01 Aug 2015 15:41:45 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/change-editer-with-sublime-text/</guid>
			<description>来由 本来一直使用的编译器是SciTE，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。 最近看了Golang中国的教学视频，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇Sublime Text 全程指南，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。
Sublime Text安装 首先到Sublime Text的官网下载最新的版本，我下载的是3.3083的portable version版 然后是最重要的事情了，安装Package Control,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。 打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：
import urllib.request,os,hashlib; h = &amp;#39;6f4c264a24d933ce70df5dedcf1dcaee&amp;#39; + &amp;#39;ebe013ee18cced0ef93d5f746d80ef60&amp;#39;; pf = &amp;#39;Package Control.sublime-package&amp;#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &amp;#39;http://packagecontrol.io/&amp;#39; + pf.replace(&amp;#39;&amp;#39;, &amp;#39;%20&amp;#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&amp;#39;Error validating download (got %sinstead of %s), please try manual install&amp;#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &amp;#39;wb&amp;#39; ).</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>本来一直使用的编译器是<a href="http://www.scintilla.org/SciTE.html">SciTE</a>，很轻量级，自己设置了配置文件后，除了没有自动完成的提示，用起来也还可以。
最近看了<a href="http://www.tudou.com/home/golang/item/">Golang中国的教学视频</a>，国内Golang语言框架作者Unknwon使用Sublime Text进行开发Macaron时，感觉自动提示用起来挺舒服的。而且又看到了一篇<a href="http://www.linuxeden.com/html/news/20150730/162107.html">Sublime Text 全程指南</a>，改变了我对很久以前试用Sublime Text的看法。网络上有对它的评价非常非常高，兴起了试试Sublime Text的想法。</p>
<!-- raw HTML omitted -->
<h4 id="sublime-text">Sublime Text安装</h4>
<p>首先到Sublime Text的<a href="http://www.sublimetext.com/">官网</a>下载最新的版本，我下载的是3.3083的portable version版
然后是最重要的事情了，安装<a href="https://packagecontrol.io/installation#st3">Package Control</a>,它的地位相当于Ruby的Gem管理器了，基本上所有的Sublime Text都可以用它来安装管理。
打开 Sublime Text 后，同时按Ctrl+`键，调出控制台，输入以下命令：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">urllib.request</span><span class="o">,</span><span class="nn">os</span><span class="o">,</span><span class="nn">hashlib</span><span class="p">;</span> <span class="n">h</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">6f4c264a24d933ce70df5dedcf1dcaee</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">ebe013ee18cced0ef93d5f746d80ef60</span><span class="s1">&#39;</span><span class="p">;</span> <span class="n">pf</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Package Control.sublime-package</span><span class="s1">&#39;</span><span class="p">;</span> <span class="n">ipp</span> <span class="o">=</span> <span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span><span class="p">)</span><span class="p">)</span> <span class="p">)</span><span class="p">;</span> <span class="n">by</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">http://packagecontrol.io/</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1"> </span><span class="s1">&#39;</span><span class="p">,</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">%</span><span class="s1">20</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="n">dh</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">by</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">Error validating download (got </span><span class="si">%s</span><span class="s1"> instead of </span><span class="si">%s</span><span class="s1">), please try manual install</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">dh</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span><span class="p">)</span> <span class="k">if</span> <span class="n">dh</span> <span class="o">!=</span> <span class="n">h</span> <span class="k">else</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">ipp</span><span class="p">,</span> <span class="n">pf</span><span class="p">)</span><span class="p">,</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">wb</span><span class="s1">&#39;</span> <span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">by</span><span class="p">)</span>
</code></pre></div><h4 id="package-control">Package Control及插件安装</h4>
<p>根据提示，重启Sublime Text即可完成安装。
在Sublime Text中按ctrl+shift+p快捷键，即可调出Package Control控制台，它可以对Packages完成以下操作：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">install
remove
list
<span class="nb">enable</span>
disable
upgrade
</code></pre></div><p>根据我的需求，我安装了以下插件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">GoSublime             <span class="c1">#go语言提示插件</span>
SideBarEnhancements   <span class="c1">#侧边栏增强插件</span>
All Autocomplete      <span class="c1">#自动完成增强插件</span>
ConvertToUTF8         <span class="c1">#GBK等中文文件编码增强插件</span>
Markdown Preview      <span class="c1">#Markdown文件预览插件</span>
Markdown Extended     <span class="c1">#Markdown语法扩展插件，可以对代码区域进行语法高亮</span>
Monokai Extended      <span class="c1">#主题插件，但是可以对Markdown进行语法高亮</span>
JSONLint              <span class="c1">#JSON的智能提示插件，对出错的语法进行实时标注</span>
JSFormat              <span class="c1">#可以对javascript进行格式化输出，同样对JSON也可以格式化</span>
Material Theme        <span class="c1">#语法高亮插件，Material MonoKai</span>
</code></pre></div><h4 id="sublime-text-1">Sublime Text配置</h4>
<p>Sublime Text3的配置，主要采用JSON格式，后缀名是sublime-settings
不知道是不是Bug，其主要配置需要手动创建，菜单无法选择（后来证实是汉化包的Bug），于是根据网上提示，新建
C:\Sublime Text\Data\Packages\User\Preferences.sublime-settings文件，输入以下内容：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;font_face&#34;</span><span class="p">:</span> <span class="s2">&#34;Consolas&#34;</span><span class="p">,</span>                            <span class="err">/</span><span class="err">/</span><span class="err">字</span><span class="err">体</span><span class="err">名</span><span class="err">称</span>
    <span class="nt">&#34;font_size&#34;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>                                    <span class="err">/</span><span class="err">/</span><span class="err">字</span><span class="err">体</span><span class="err">大</span><span class="err">小</span>

    <span class="nt">&#34;caret_style&#34;</span><span class="p">:</span> <span class="s2">&#34;phase&#34;</span><span class="p">,</span>                             <span class="err">/</span><span class="err">/</span><span class="err">光</span><span class="err">标</span><span class="err">闪</span><span class="err">烁</span>
    <span class="nt">&#34;wide_caret&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                                 <span class="err">/</span><span class="err">/</span><span class="err">光</span><span class="err">标</span><span class="err">变</span><span class="err">粗</span>

    <span class="nt">&#34;draw_white_space&#34;</span><span class="p">:</span> <span class="s2">&#34;all&#34;</span><span class="p">,</span>                          <span class="err">/</span><span class="err">/</span><span class="err">显</span><span class="err">示</span><span class="err">所</span><span class="err">有</span><span class="err">空</span><span class="err">白</span><span class="err">符</span><span class="err">号</span>
    <span class="nt">&#34;highlight_line&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                             <span class="err">/</span><span class="err">/</span><span class="err">高</span><span class="err">亮</span><span class="err">当</span><span class="err">前</span><span class="err">行</span>
    <span class="nt">&#34;highlight_modified_tabs&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                    <span class="err">/</span><span class="err">/</span><span class="err">编</span><span class="err">辑</span><span class="err">过</span><span class="err">的</span><span class="err">标</span><span class="err">签</span><span class="err">高</span><span class="err">亮</span><span class="err">显</span><span class="err">示</span>

    <span class="nt">&#34;auto_complete_commit_on_tab&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                <span class="err">/</span><span class="err">/</span><span class="err">t</span><span class="err">a</span><span class="err">b</span><span class="err">键</span><span class="err">自</span><span class="err">动</span><span class="err">完</span><span class="err">成</span>
    <span class="nt">&#34;tab_size&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>                                      <span class="err">/</span><span class="err">/</span><span class="err">t</span><span class="err">a</span><span class="err">b</span><span class="err">键</span><span class="err">长</span><span class="err">度</span>
    <span class="nt">&#34;translate_tabs_to_spaces&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>                   <span class="err">/</span><span class="err">/</span><span class="err">自</span><span class="err">动</span><span class="err">将</span><span class="err">t</span><span class="err">a</span><span class="err">b</span><span class="err">转</span><span class="err">换</span><span class="err">成</span><span class="err">空</span><span class="err">格</span>

    <span class="nt">&#34;spell_check&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>                               <span class="err">/</span><span class="err">/</span><span class="err">语</span><span class="err">法</span><span class="err">检</span><span class="err">查</span>
    <span class="nt">&#34;trim_trailing_white_space_on_save&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>          <span class="err">/</span><span class="err">/</span><span class="err">删</span><span class="err">除</span><span class="err">行</span><span class="err">尾</span><span class="err">的</span><span class="err">空</span><span class="err">格</span>
    <span class="nt">&#34;ensure_newline_at_eof_on_save&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>              <span class="err">/</span><span class="err">/</span><span class="err">文</span><span class="err">件</span><span class="err">结</span><span class="err">束</span><span class="err">后</span><span class="err">保</span><span class="err">存</span><span class="err">加</span><span class="err">入</span><span class="err">新</span><span class="err">行</span>

    <span class="nt">&#34;update_check&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>                              <span class="err">/</span><span class="err">/</span><span class="err">禁</span><span class="err">止</span><span class="err">自</span><span class="err">动</span><span class="err">更</span><span class="err">新</span>

    <span class="nt">&#34;color_scheme&#34;</span><span class="p">:</span> <span class="s2">&#34;Packages/Monokai Extended/Monokai Extended Bright.tmTheme&#34;</span><span class="p">,</span>     <span class="err">/</span><span class="err">/</span><span class="err">主</span><span class="err">题</span><span class="err">包</span><span class="err">M</span><span class="err">o</span><span class="err">n</span><span class="err">o</span><span class="err">k</span><span class="err">a</span><span class="err">i</span>

    <span class="nt">&#34;ignored_packages&#34;</span><span class="p">:</span>                                 <span class="err">/</span><span class="err">/</span><span class="err">忽</span><span class="err">略</span><span class="err">的</span><span class="err">包</span>
    <span class="p">[</span>
        <span class="s2">&#34;Vintage&#34;</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><h4 id="gosublime">GoSublime配置</h4>
<p>因为我用Golang和Ruby比较多，在安装了GoSublime后，还需要配置下GoSublime，以便进行编译
路径如下：&ldquo;Preferences&rdquo; - &ldquo;Package Setting&rdquo; - &ldquo;GoSublime&rdquo; - &ldquo;Settings User&rdquo;</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;env&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;PATH&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\bin&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOPATH&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\import&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOROOT&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOBIN&#34;</span><span class="p">:</span><span class="s2">&#34;C:\\go\\bin&#34;</span><span class="p">,</span>
        <span class="nt">&#34;GOOS&#34;</span><span class="p">:</span><span class="s2">&#34;windows&#34;</span>
    <span class="p">}</span><span class="p">,</span>
    <span class="nt">&#34;build_command&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;go&#34;</span><span class="p">,</span><span class="s2">&#34;run&#34;</span><span class="p">,</span><span class="s2">&#34;$_fn&#34;</span><span class="p">]</span><span class="p">,</span>

    <span class="nt">&#34;fmt_enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;fmt_tab_indent&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nt">&#34;fmt_tab_width&#34;</span><span class="p">:</span> <span class="mi">4</span>
<span class="p">}</span>
</code></pre></div><h4 id="tinycc">TinyCC编译系统</h4>
<p>因为我偶尔用TinyCC编译小的C语言程序，所以自定义了一个编译系统，具体代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;C:\\ Sublime Text\\tcc\\&#34;</span><span class="p">,</span>
  <span class="nt">&#34;file_regex&#34;</span><span class="p">:</span> <span class="s2">&#34;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&#34;</span><span class="p">,</span>
  <span class="nt">&#34;working_dir&#34;</span><span class="p">:</span> <span class="s2">&#34;${file_path}&#34;</span><span class="p">,</span>
  <span class="nt">&#34;selector&#34;</span><span class="p">:</span> <span class="s2">&#34;source.c&#34;</span><span class="p">,</span>

  <span class="nt">&#34;variants&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Run&#34;</span><span class="p">,</span>
      <span class="nt">&#34;cmd&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tcc&#34;</span><span class="p">,</span> <span class="s2">&#34;-run&#34;</span><span class="p">,</span> <span class="s2">&#34;${file}&#34;</span><span class="p">]</span><span class="p">,</span>
      <span class="nt">&#34;working_dir&#34;</span><span class="p">:</span> <span class="s2">&#34;${file_path}&#34;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><h4 id="f5">F5快捷键</h4>
<p>平时喜欢把F5设置成脚本Run的快捷键盘，具体设置路径如下：”Preferences” - “Key Bindings”，在右部的User文件C:\Sublime Text\Data\Packages\User\Default (Windows).sublime-keymap增加如下代码：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">    <span class="p">{</span> <span class="nt">&#34;keys&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;f5&#34;</span><span class="p">]</span><span class="p">,</span> <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;build&#34;</span> <span class="p">}</span><span class="err">,</span>
</code></pre></div><h4 id="heading-1">结</h4>
<p>试用了几天后，Sublime Text是比Scite要强大的多，虽然Scite也可以进行很多的配置，关键是Package Control上现成的插件太多了，有人维护的话，真是太省心了呢，已经将以前针对Scite写的部分脚本转移到Sublime Text上了，开心的编程啦~ ^o^/</p>
]]></content>
		</item>
		
		<item>
			<title>update debian linux image with backports</title>
			<link>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</link>
			<pubDate>Mon, 27 Jul 2015 22:36:17 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/update-debian-linux-image-with-backports/</guid>
			<description>来由 因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。
 如何查看Linux版本 共有5种方式，具体如下
cat /etc/*-release lsb_release -a cat /proc/version uname -a #uname -mrs cat /etc/issue 我的Debian更新过，显示是
Debian GNU/Linux 8.1 (jessie) 但是，内核为什么还是
Linux 2.6.32-042stab093.4 i686 好吧，更新，更新！
使用Backports源 对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目
其官方Wiki上面说
Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。
开始更新 更新软件源 首先在apt的sources.list文件中添加Backports源
vi /etc/apt/sources.list 添加如下内容
deb http://ftp.debian.org/debian/ jessie-backports main deb-src http://ftp.debian.org/debian/ jessie-backports main 更新数据
sudo apt-get update #sudo apt-get -t jessie-backports upgrade 搜索并安装linux-image文件 安装aptitude，以便搜索最新的linux-image文件
apt-get install aptitude aptitude search kernel-image 根据搜索出来的内核文件，进行安装，我的是
sudo apt-get -t jessie-backports install linux-image-3.</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>因为Shadowsocks-libev的部分功能需要linux高版本的内核才能支持。兴致所起，准备更新一下VPS上的Debian内核版本。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="linux">如何查看Linux版本</h4>
<p>共有5种方式，具体如下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cat /etc/*-release
lsb_release -a
cat /proc/version
uname -a  <span class="c1">#uname -mrs</span>
cat /etc/issue
</code></pre></div><p>我的Debian更新过，显示是</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Debian GNU/Linux 8.1 <span class="o">(</span>jessie<span class="o">)</span>
</code></pre></div><p>但是，内核为什么还是</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Linux 2.6.32-042stab093.4 i686
</code></pre></div><p>好吧，更新，更新！</p>
<h4 id="backports">使用Backports源</h4>
<p>对于Debian来说，其稳定版的软件虽然稳定，但是都好OLD啊，但是好在它有个Backports项目</p>
<p>其<a href="https://wiki.debian.org/zh_CN/Backports">官方Wiki</a>上面说</p>
<p>Backports是从testing版本 （大部分）和 unstable版本 (可能性极小,例如：安全更新等)重新编译的软件包,因此他们在稳定的debian发行版中不需要新的库就可以运行（无论如何，这是可能的）。推荐你挑选一个能够满足你需求的单个的backports软件源，不要使用所有可用的backports源。</p>
<h4 id="heading-1">开始更新</h4>
<h6 id="heading-2">更新软件源</h6>
<p>首先在apt的sources.list文件中添加Backports源</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/apt/sources.list
</code></pre></div><p>添加如下内容</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">deb http://ftp.debian.org/debian/ jessie-backports main
deb-src http://ftp.debian.org/debian/ jessie-backports main
</code></pre></div><p>更新数据</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update
<span class="c1">#sudo apt-get -t jessie-backports upgrade</span>
</code></pre></div><h6 id="linux-image">搜索并安装linux-image文件</h6>
<p>安装aptitude，以便搜索最新的linux-image文件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">apt-get install aptitude
aptitude search kernel-image
</code></pre></div><p>根据搜索出来的内核文件，进行安装，我的是</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get -t jessie-backports install linux-image-3.16.0-4-686-pae
<span class="c1">#sudo apt-get -t jessie-backports install linux-image-686-pae</span>
</code></pre></div><h6 id="linux-image-1">显示已安装的linux-image内核版本</h6>
<p>显示已经安装的linux-image内核版本</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">dpkg --get-selections <span class="p">|</span>grep linux-image
</code></pre></div><h6 id="heading-3">删除旧内核</h6>
<p>如果要删除旧内核，运行以下命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get remove linux-image-3.16.0-4-686-pae
</code></pre></div><h6 id="grub">更新grub</h6>
<p>在/boot/grub/grub.cfg中查看是否已经有新内核3.16，有的话，就已经OK。否则，自己手动更新grub。
sudo update-grub</p>
<h4 id="heading-4">安装结果</h4>
<p>我兴高采烈的在我的RamNode的VPS折腾了半天后，重新Reboot后发现，内核为什么还是2.6.32!!!</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Linux 2.6.32-042stab093.4 i686
</code></pre></div><h6 id="google">Google原因</h6>
<p>OpenVZ的内核和 Host的内核是一致的
也就是说，由于我的VPS是OpenVZ的，所以我自己更新linux-image的版本是没有用的。。。</p>
<h4 id="heading-5">结</h4>
<p>伤心了 -__- ，于是写下这篇小结，算是个记录。顺便把家里的Debian主机更新了下内核，3.16更新到3.16，小版本也要更新！。。。</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with dnsmasq</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</link>
			<pubDate>Sun, 26 Jul 2015 17:51:59 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-dnsmasq/</guid>
			<description>来由 本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~
DNSmasq安装 我的系统是Debian，直接运行以下命令
sudo apt-get update sudo apt-get install dnsmasq DNSmasq配置 编辑/etc/dnsmasq.conf文件
vi /etc/dnsmasq.conf 修改以下参数
resolv-file=/etc/resolv.conf strict-order listen-address=xxx.xxx.xxx.xxx,127.0.0.1 port=443 cache-size=1024 log-queries 编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器
nameserver 8.8.8.8 nameserver 208.67.222.222 将服务重启即可
/etc/init.d/dnsmasq restart 将DNSmasq加入启动项
sudo vi /etc/rc.local 将以下命令添加进去即可
/etc/init.d/dnsmasq start DNS污染解决方案 OpenWrt-dist上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。 其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，地址
 结 这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>本来已经翻墙解决的差不多了，但是在下午下载东西时，发现频繁出现域名无法解析现象，最让人愤怒的是，竟然连www.symantec.com都解析不出来了，应该是GFW对DNS污染的封堵升级导致的吧，一直是DNS解析超时。so，兴起了在自己的VPS上架设一个DNS服务器，作为ChinaDNS的备用上游服务器用的念头，说干就干啊~</p>
<!-- raw HTML omitted -->
<h4 id="dnsmasq">DNSmasq安装</h4>
<p>我的系统是Debian，直接运行以下命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get update
sudo apt-get install dnsmasq
</code></pre></div><h4 id="dnsmasq-1">DNSmasq配置</h4>
<p>编辑/etc/dnsmasq.conf文件</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/dnsmasq.conf
</code></pre></div><p>修改以下参数</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">resolv-file<span class="o">=</span>/etc/resolv.conf
strict-order

listen-address<span class="o">=</span>xxx.xxx.xxx.xxx,127.0.0.1
<span class="nv">port</span><span class="o">=</span><span class="m">443</span>

cache-size<span class="o">=</span><span class="m">1024</span>
log-queries
</code></pre></div><p>编辑/etc/resolv.conf文件，添加DNSmasq的上游服务器</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">nameserver 8.8.8.8
nameserver 208.67.222.222
</code></pre></div><p>将服务重启即可</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/dnsmasq restart
</code></pre></div><p>将DNSmasq加入启动项</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo vi /etc/rc.local
</code></pre></div><p>将以下命令添加进去即可</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/dnsmasq start
</code></pre></div><h4 id="dns">DNS污染解决方案</h4>
<p><a href="http://sourceforge.net/projects/openwrt-dist/">OpenWrt-dist</a>上面单门架设了一个页面，针对OpenWrt的fanqiang软件做了很多预编译工作。
其中针对防DNS劫持的解决方案单门有个Wiki页面，共计六种方案，具体可以参考一下，<strong><a href="http://sourceforge.net/p/openwrt-dist/wiki/DNS/">地址</a></strong></p>
<hr>
<h4 id="heading-1">结</h4>
<p>这次终于应该没有问题了，www.symantec.com这些网站也不会出现DNS解析超时的问题，终于可以彻底好好科学上网学习啦~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with chinadns</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</link>
			<pubDate>Sun, 26 Jul 2015 12:54:59 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-chinadns/</guid>
			<description>来由 用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。
 Old解决方案 - FreeRouterV2 以前的解决方案是借用FreeRouterV2的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，如下
安装 首先需要在OpenWRT上安装如下包：
opkg update opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32 配置 然后配置iptables的防火墙策略
vi /etc/firewall.user 添加如下命令
iptables -t mangle -I PREROUTING -p udp --sport 53 -m u32 --u32 &amp;#34;0&amp;amp;0x0F000000=0x05000000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@8&amp;amp;0x810F=0x8000 &amp;amp;&amp;amp; 0&amp;gt;&amp;gt;22&amp;amp;0x3C@12&amp;amp;0xFFFF=0x0000&amp;#34; -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|042442B2|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|0807C62D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|1759053C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|253D369E|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|2E52AE44|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|31027B38|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|364C8701|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|3B1803AD|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|402158A1|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4021632F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4042A3FB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4168CAFC|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|41A0DB71|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|422DFCED|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD63|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|480ECD68|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2766|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D2771|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D7F66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4A7D9B66|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4D04075C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|4E10310F|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|5D2E0859|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|76053106|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|80797E8B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|9F6A794B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|A9840D67|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BC050460|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|BDA31105|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C043C606|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|C504040C|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CA6A0102|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CAB50755|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CB620741|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CBA1E6AB|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|CF0C5862|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D0381F2B|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1244921|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D155E58A|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1913632|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D1DC1EAE|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D35E4293|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D5A9FB23|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8DDBCB6|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|D8EAB30D|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F3B9BB27|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|F9812E30|&amp;#34; --from 60 --to 180 -j DROP iptables -t mangle -I PREROUTING -p udp --sport 53 -m string --algo bm --hex-string &amp;#34;|FD9D0EA5|&amp;#34; --from 60 --to 180 -j DROP 重启防火墙即可</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>用Opera等浏览器时，由于DNS被GFW污染了，所以fanqiang的有些不爽快，像Twitter.com和Facebook.com无法上，虽然IE等借助Shadowsocks可以直接上？所以想在OpenWRT上，把DNS污染问题彻底解决了。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="old---freerouterv2">Old解决方案 - FreeRouterV2</h4>
<p>以前的解决方案是借用<a href="https://github.com/lifetyper/FreeRouter_V2">FreeRouterV2</a>的部分iptables策略，针对被GFW污染的数据包进行丢弃，然后获得正常的数据包，具体原理作者详细的写了PDF文件进行说明，<a href="https://github.com/lifetyper/FreeRouter_V2/blob/master/FreeRouterV2_HandBook.pdf">如下</a></p>
<h6 id="heading-1">安装</h6>
<p>首先需要在OpenWRT上安装如下包：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">opkg update
opkg install iptables-mod-filter iptables-mod-u32 kmod-ipt-filter kmod-ipt-u32
</code></pre></div><h6 id="heading-2">配置</h6>
<p>然后配置iptables的防火墙策略</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/firewall.user
</code></pre></div><p>添加如下命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m u32 --u32 <span class="s2">&#34;0&amp;0x0F000000=0x05000000 &amp;&amp; 0&gt;&gt;22&amp;0x3C@8&amp;0x810F=0x8000 &amp;&amp; 0&gt;&gt;22&amp;0x3C@12&amp;0xFFFF=0x0000&#34;</span> -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|042442B2|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|0807C62D|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|1759053C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|253D369E|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|2E52AE44|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|31027B38|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|364C8701|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|3B1803AD|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|402158A1|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4021632F|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4042A3FB|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4168CAFC|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|41A0DB71|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|422DFCED|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|480ECD63|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|480ECD68|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D2766|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D2771|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D7F66|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4A7D9B66|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4D04075C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|4E10310F|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|5D2E0859|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|76053106|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|80797E8B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|9F6A794B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|A9840D67|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|BC050460|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|BDA31105|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|C043C606|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|C504040C|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CA6A0102|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CAB50755|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CB620741|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CBA1E6AB|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|CF0C5862|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D0381F2B|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1244921|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D155E58A|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1913632|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D1DC1EAE|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D35E4293|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D5A9FB23|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D8DDBCB6|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|D8EAB30D|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|F3B9BB27|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|F9812E30|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
iptables -t mangle -I PREROUTING -p udp --sport <span class="m">53</span> -m string --algo bm --hex-string <span class="s2">&#34;|FD9D0EA5|&#34;</span> --from <span class="m">60</span> --to <span class="m">180</span>  -j DROP
</code></pre></div><p>重启防火墙即可</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/firewall restart
</code></pre></div><h4 id="chinadns">ChinaDNS解决方案</h4>
<p>以上的方案挺好，但是GFW的污染IP似乎有增多现象，所以想省心一点，正好shadowsocks作者<a href="https://github.com/clowwindy">clowwindy</a>有一个针对DNS污染的作品<a href="https://github.com/clowwindy/ChinaDNS">ChinaDNS</a>，就直接拿过来用了。
针对OpenWRT/Gargoyle，作者有直接编译完毕的ipk包，下载后安装到OpenWRT即可，地址<a href="https://github.com/clowwindy/ChinaDNS/releases">如下</a></p>
<h6 id="heading-3">安装</h6>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">opkg install ChinaDNS_1.x.x_ar71xx.ipk
/etc/init.d/chinadns start
/etc/init.d/chinadns <span class="nb">enable</span>
</code></pre></div><h6 id="heading-4">配置</h6>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/dnsmasq.conf
</code></pre></div><p>添加如下内容并保存退出</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">no-resolv
<span class="nv">server</span><span class="o">=</span>127.0.0.1#5353
</code></pre></div><p>重新启动</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/etc/init.d/chinadns restart
/etc/init.d/dnsmasq restart
</code></pre></div><p>此时直接使用路由器IP做DNS服务器即可，也可以对chinadns做更进一步的配置</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/init.d/chinadns
</code></pre></div><p>具体参数如下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">usage: chinadns <span class="o">[</span>-h<span class="o">]</span> <span class="o">[</span>-l IPLIST_FILE<span class="o">]</span> <span class="o">[</span>-b BIND_ADDR<span class="o">]</span> <span class="o">[</span>-p BIND_PORT<span class="o">]</span>
       <span class="o">[</span>-c CHNROUTE_FILE<span class="o">]</span> <span class="o">[</span>-s DNS<span class="o">]</span> <span class="o">[</span>-v<span class="o">]</span>
Forward DNS requests.

-h, --help            show this <span class="nb">help</span> message and <span class="nb">exit</span>
-l IPLIST_FILE        path to ip blacklist file
-c CHNROUTE_FILE      path to china route file
                      <span class="k">if</span> not specified, CHNRoute will be turned off
-d                    <span class="nb">enable</span> bi-directional CHNRoute filter
-y                    delay <span class="nb">time</span> <span class="k">for</span> suspects, default: 0.3
-b BIND_ADDR          address that listens, default: 127.0.0.1
-p BIND_PORT          port that listens, default: <span class="m">53</span>
-s DNS                DNS servers to use, default:
                      114.114.114.114,208.67.222.222:443,8.8.8.8
-m                    Using DNS compression pointer mutation
                      <span class="o">(</span>backlist and delaying would be disabled<span class="o">)</span>
-v                    verbose logging
</code></pre></div><h4 id="sftp">SFTP登录</h4>
<p>在将ipx文件上传到OpenWRT路由器上时，刚开始没有使用WinSCP，而且OpenWRT上也没有SFTP服务，所以是用Everything的HTTP服务器功能，然后在OpenWRT上用wget下载的。后来知道可以直接通过SFTP上传、下载文件后，就开始在OpenWRT上折腾了。</p>
<h6 id="openwrtsftp">OpenWRT安装SFTP</h6>
<p>安装及配置命令如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">opkg update
opkg install vsftpd openssh-sftp-server
/etc/init.d/vsftpd <span class="nb">enable</span>
/etc/init.d/vsftpd start
</code></pre></div><h6 id="md5sum-mismatch-">md5sum mismatch 错误</h6>
<p>其中opkg在线安装openssh-sftp-server时出现了md5sum mismatch，无法安装，网上Google了一下，表示可能是linux内核不匹配导致的，解决方法是下载到本地，直接安装即可
好吧，打开Everything的HTTP服务器，先下载到OpenWRT路由器上，然后手动安装成功。</p>
<hr>
<h4 id="heading-5">结</h4>
<p>没有了DNS污染，所有被屏蔽的网站也可以通过Shadowsocks+GFWList PAC绕过去科学上网了，自由遨游Internet的感觉真好啊~ ^O^/</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with shadowsocks</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-shadowsocks/</link>
			<pubDate>Fri, 24 Jul 2015 12:57:00 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-shadowsocks/</guid>
			<description>来由 已经一年多没有更新这个blog了，现在来写点什么吧。 这一年来，没怎么做这方面的东西，fanqiang也主要是用VPS架设的PPTP VPN，速度一般，但是可以上很多网站啦。前一阵子，把RamNode上的VPS重新续费，然后购入了NETGEAR的WNDR4300路由器，刷了最新版本的14.07的OpenWRT在用。中间没有怎么折腾，基本够用。
最近突然想折腾了下，发现用Shadowsocks进行fanqiang比较快，下边就把经过写写吧：
 VPS架设Shadowsocks 选择Shadowsocks版本 Showsocks有好几种版本，Python, Golang, Nodejs, libev等，具体可以去官网看一下 因为说libev版本的占用内存较小，方便在我的VPS上部署，所以我选择了shadowsocks-libev
编译Shadowsocks 我是直接通过git在官网上下载最新的包在Debian的VPS上进行编译的，具体如下：
git clone https://github.com/shadowsocks/shadowsocks-libev.git cd shadowsocks-libev sudo apt-get install build-essential autoconf libtool libssl-dev ./configure &amp;amp;&amp;amp; make make install 配置Shadowsocks服务器端 vi /etc/shadowsocks-libev/config.json 具体格式如下：
{ &amp;#34;server&amp;#34;:&amp;#34;my_server_ip&amp;#34;, &amp;#34;server_port&amp;#34;:8388, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;barfoo!&amp;#34;, &amp;#34;timeout&amp;#34;:600, &amp;#34;method&amp;#34;:&amp;#34;table&amp;#34; }  server: 你的Shadowsocks服务器的IP地址 (IPv4/IPv6). server_port: 你的Shadowsocks服务器端口. local_port: 本地端口. password: 你的Shadowsocks服务器的账号密码. method: 你的Shadowsocks服务器采用的加密方式, &amp;ldquo;bf-cfb&amp;rdquo; , &amp;ldquo;aes-256-cfb&amp;rdquo; , &amp;ldquo;des-cfb&amp;rdquo; ,&amp;ldquo;rc4&amp;rdquo; , &amp;ldquo;table&amp;rdquo; 等等，建议使用&amp;quot;aes-256-cfb&amp;rdquo;  vi /etc/rc.local 添加以下自启动命令
/usr/bin/ss-server -c /etc/shadowsocks-libev/config.</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>已经一年多没有更新这个blog了，现在来写点什么吧。
这一年来，没怎么做这方面的东西，fanqiang也主要是用VPS架设的PPTP VPN，速度一般，但是可以上很多网站啦。前一阵子，把RamNode上的VPS重新续费，然后购入了NETGEAR的WNDR4300路由器，刷了最新版本的14.07的OpenWRT在用。中间没有怎么折腾，基本够用。</p>
<p>最近突然想折腾了下，发现用Shadowsocks进行fanqiang比较快，下边就把经过写写吧：</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="vpsshadowsocks">VPS架设Shadowsocks</h4>
<h6 id="shadowsocks">选择Shadowsocks版本</h6>
<p>Showsocks有好几种版本，Python, Golang, Nodejs, libev等，具体可以去<a href="http://shadowsocks.org/en/download/servers.html">官网</a>看一下
因为说libev版本的占用内存较小，方便在我的VPS上部署，所以我选择了<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a></p>
<h6 id="shadowsocks-1">编译Shadowsocks</h6>
<p>我是直接通过git在官网上下载最新的包在Debian的VPS上进行编译的，具体如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/shadowsocks/shadowsocks-libev.git
<span class="nb">cd</span> shadowsocks-libev
sudo apt-get install build-essential autoconf libtool libssl-dev
./configure <span class="o">&amp;&amp;</span> make
make install
</code></pre></div><h6 id="shadowsocks-2">配置Shadowsocks服务器端</h6>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/shadowsocks-libev/config.json
</code></pre></div><p>具体格式如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">{</span>
    <span class="s2">&#34;server&#34;</span>:<span class="s2">&#34;my_server_ip&#34;</span>,
    <span class="s2">&#34;server_port&#34;</span>:8388,
    <span class="s2">&#34;local_port&#34;</span>:1080,
    <span class="s2">&#34;password&#34;</span>:<span class="s2">&#34;barfoo!&#34;</span>,
    <span class="s2">&#34;timeout&#34;</span>:600,
    <span class="s2">&#34;method&#34;</span>:<span class="s2">&#34;table&#34;</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>server: 你的Shadowsocks服务器的IP地址 (IPv4/IPv6).</li>
<li>server_port: 你的Shadowsocks服务器端口.</li>
<li>local_port: 本地端口.</li>
<li>password: 你的Shadowsocks服务器的账号密码.</li>
<li>method: 你的Shadowsocks服务器采用的加密方式, &ldquo;bf-cfb&rdquo; , &ldquo;aes-256-cfb&rdquo; , &ldquo;des-cfb&rdquo; ,&ldquo;rc4&rdquo; , &ldquo;table&rdquo; 等等，建议使用&quot;aes-256-cfb&rdquo;</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi /etc/rc.local
</code></pre></div><p>添加以下自启动命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json
</code></pre></div><p>保存退出即可</p>
<p>如果希望加入udp转发功能(enable udprelay mode)，用以搭建DNS转发线路，启动时需要加上-u参数，似乎目前只有shadowsocks-libev有该功能
即添加以下自启动命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -u
</code></pre></div><p>保存退出即可</p>
<p>由于shadowsocks-libev不支持多端口，多用户，如果多人使用的话，需开多个实例，每一个config.json使用不同端口、密码即可
官方示例如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ss-server -c config1.json -f pid1
ss-server -c config2.json -f pid2
ss-server -c config3.json -f pid3
</code></pre></div><h6 id="shadowsocks-3">配置Shadowsocks客户端</h6>
<p>可以直接从官网上推荐的各平台<a href="http://shadowsocks.org/en/download/clients.html">clients</a>选择自己需要的客户端
我选择的是<a href="https://github.com/shadowsocks/shadowsocks-csharp">shadowsocks-csharp</a>
最新的release可以在<a href="https://github.com/shadowsocks/shadowsocks-csharp/releases">这里</a>下载
最新的客户端可以通过PAC文件，对GFWList里面的域名进行自动代理，OYE~</p>
<h4 id="shadowsocksfanqiang">路由器折腾Shadowsocks及自动fanqiang</h4>
<p>好吧，本来希望在OpenWRT上折腾好，所有PC、手机可以直接自动科学上网的，但是一直没有试验成功。</p>
<ul>
<li>一是：对iptables一直心怀敬意，但是折腾的太少，很多东西还不了解</li>
<li>二是：中国电信和GFW的合作(原谅我用这个词吧)太好了－<em>－||, 电信的宽带，一个IP地址连接我的VPS PPTP时间长了后，丢包就开始严重起来了，不得已需要重新PPPOE拨号连接，结果是换了一个地址，就没有丢包了呢－</em>－||。</li>
<li>三是：网上有说路由器的性能和内存受限，大流量后，SS有可能会崩溃，这样还要做个守护进程一直看着，随时重新启动，有点麻烦</li>
<li>四是：我确实没有折腾成功－_－||。。而且还把路由器折腾快瘫了
所以不想在路由器上折腾过多了，太麻烦了。。。</li>
</ul>
<h6 id="ps"><strong>PS:</strong></h6>
<ul>
<li>1、目前我的WNDR4300刷新的是Gargoyle(石像鬼)1.7.2固件，是恩山论坛的大拿编译的，<a href="http://www.right.com.cn/forum/thread-157953-1-2.html">自译4300/3700/AR石像鬼+luci面板+over&gt;90+ss+多拨+迅雷+脱机+广告+13信道+vpn集成</a>，我没有用他的集成包，而是用了精简版（支持overylay大于90M，集成石像鬼全部官方插件）（PS：换了这个固件后，感觉到VPS的丢包少了一些呢，不知道是不是只是感觉原因－_－||。。）</li>
<li>2、原先的华为HG255D刷新的是PandoraBox，<a href="http://www.right.com.cn/forum/thread-169216-1-3.html">PandoraBox HG255D更新支持HWNAT硬件转发 最后的疯狂</a>，主要是解决了长期以来flash读写出错的问题和增加了硬件转发HWNAT功能，最新版本可以在<a href="http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/firmware/stable/">这里</a>下载</li>
<li>3、有想继续折腾OpenWRT+Shadowsocks的，可以自行下载SS的OpenWRT预编译包折腾，在<a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/">这里</a>下载</li>
</ul>
<h4 id="heading-1">最终解决方案</h4>
<p>就是简单的VPS+Shadowsocks桌面客户端，随时更新GFWList的PAC文件，出问题也就是一台机子的事情。手机想科学上网时，通过原先的PPTP VPN即可</p>
<hr>
<h4 id="heading-2">总结</h4>
<p>目前的方案是简单为主，不折腾，合适的设备做合适的事情，半自动也有半自动的好处。折腾的时间去做点其它事情好了~</p>
]]></content>
		</item>
		
		<item>
			<title>build openwrt with image builder</title>
			<link>http://nivrrex.github.io/posts/build-openwrt-with-image-builder/</link>
			<pubDate>Thu, 17 Jul 2014 22:17:11 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/build-openwrt-with-image-builder/</guid>
			<description>来由 这几天在折腾OpenWrt，前文fanqiang with openwrt+vps里说过，	我用的是PandoraBox最新编译的版本，但是其内置的packages里面很多软件没有编译，如Python等。而直接换用官方的packages，会提示兼容性问题，无法直接使用。 从网络Google了一下，可以两个同时使用。
src/gz attitude_adjustment http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages src/gz pandorabox http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages dest root / dest ram /tmp lists_dir ext /var/opkg-lists option overlay_root /overlay arch all 100 arch ralink 200 arch ramips 300 arch ramips_24kec 400 这样就解决了软件兼容性的问题，但是前文fanqiang with openwrt+vps里面提到的&amp;quot;input/output error&amp;quot;问题仍然没有解决。遂升起了自己编译的念头。
源代码编译 要从源代码编译OpenWrt，需要有Linux环境，主要好像是因为Windows下大小写不区分，可能导致异常问题。 于是选了Debian系统，主要是玩OpenWrt时，又淘了一个树莓派（Raspberry Pi）玩，而它的默认系统就是基于Debian，同时最早玩的Ubuntu也是基于Debian的，买的VPS也是基于Debian系统的，so&amp;hellip; 于是到达官网选择i386架构、xfce界面的debian-7.6.0-i386-xfce-CD-1.iso。 通过UltraISO写入到U盘，然后安装到硬盘上，OK。
编译源代码 这个痛苦的过程不想说了 主要是下载Debian上的编译支撑工具，然后通过以下说明进行编译
 OpenWrt Buildroot - 安装 OpenWrt Buildroot - 使用说明 最终结果是，我从下午编译到晚上，还没有编译完成，于是让其继续。第二天起来后，发现网络断了，编译失败。  Image Builder编译 从头开始的自行编译实在hold不住，于是就考虑其它方式，由于OpenWrt的编译选项中，可以将结果进行打包给其它人使用，官网上也有相应的打包的tar.gz2文件可以下载，也就是Image Builder的形式。考虑用它实现，说明如下：
*Image Generator (Image Builder) 下载、解压缩，然后看需要的包，我是将PandoraBox里面所有的包都包含了，然后加上了Python、DNS工具包等。 命令如下：</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>这几天在折腾OpenWrt，前文<a href="http://nivrrex.github.io/2014/07/08/fanqiang-with-openwrt+vps/">fanqiang with openwrt+vps</a>里说过，	我用的是PandoraBox最新编译的版本，但是其内置的<a href="http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages/">packages</a>里面很多软件没有编译，如Python等。而直接换用官方的<a href="http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages/">packages</a>，会提示兼容性问题，无法直接使用。
从网络Google了一下，可以两个同时使用。</p>
<!-- raw HTML omitted -->
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">src/gz attitude_adjustment http://downloads.openwrt.org/attitude_adjustment/12.09/ramips/rt305x/packages
src/gz pandorabox http://downloads.openwrt.org.cn/PandoraBox/ralink/rt305x/packages

dest root /
dest ram /tmp
lists_dir ext /var/opkg-lists
option overlay_root /overlay

arch all <span class="m">100</span>
arch ralink <span class="m">200</span>
arch ramips <span class="m">300</span>
arch ramips_24kec <span class="m">400</span>
</code></pre></div><p>这样就解决了软件兼容性的问题，但是前文<a href="http://nivrrex.github.io/2014/07/08/fanqiang-with-openwrt+vps/">fanqiang with openwrt+vps</a>里面提到的&quot;input/output error&quot;问题仍然没有解决。遂升起了自己编译的念头。</p>
<h4 id="heading-1">源代码编译</h4>
<p>要从源代码编译OpenWrt，需要有Linux环境，主要好像是因为Windows下大小写不区分，可能导致异常问题。
于是选了Debian系统，主要是玩OpenWrt时，又淘了一个树莓派（Raspberry Pi）玩，而它的默认系统就是基于Debian，同时最早玩的Ubuntu也是基于Debian的，买的VPS也是基于Debian系统的，so&hellip;
于是到达<a href="https://www.debian.org/CD/torrent-cd/">官网</a>选择i386架构、xfce界面的debian-7.6.0-i386-xfce-CD-1.iso。
通过UltraISO写入到U盘，然后安装到硬盘上，OK。</p>
<h6 id="heading-2">编译源代码</h6>
<p>这个痛苦的过程不想说了
主要是下载Debian上的编译支撑工具，然后通过以下说明进行编译</p>
<ul>
<li><a href="http://wiki.openwrt.org/zh-cn/doc/howto/buildroot.exigence">OpenWrt Buildroot - 安装</a></li>
<li><a href="http://wiki.openwrt.org/zh-cn/doc/howto/build">OpenWrt Buildroot - 使用说明</a>
最终结果是，我从下午编译到晚上，还没有编译完成，于是让其继续。第二天起来后，发现网络断了，编译失败。</li>
</ul>
<h4 id="image-builder">Image Builder编译</h4>
<p>从头开始的自行编译实在hold不住，于是就考虑其它方式，由于OpenWrt的编译选项中，可以将结果进行打包给其它人使用，官网上也有相应的打包的tar.gz2文件可以下载，也就是Image Builder的形式。考虑用它实现，说明如下：</p>
<p>*<a href="http://wiki.openwrt.org/zh-cn/doc/howto/obtain.firmware.generate">Image Generator (Image Builder)</a>
下载、解压缩，然后看需要的包，我是将PandoraBox里面所有的包都包含了，然后加上了Python、DNS工具包等。
命令如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">make image <span class="nv">PROFILE</span><span class="o">=</span>HG255D <span class="nv">PACKAGES</span><span class="o">=</span><span class="s2">&#34;6in4 6rd 6to4 aria2 arptables badblocks base-files bind-dig bind-libs blkid block-mount busybox cfdisk chat comgt coreutils curl ddns-scripts dnsmasq dnsmasq-full dropbear e2fsprogs ebtables ebtables-utils etherwake fdisk firewall hd-idle ip iptables iptables-mod-account iptables-mod-chaos iptables-mod-condition iptables-mod-conntrack-extra iptables-mod-extra iptables-mod-filter iptables-mod-geoip iptables-mod-hashlimit iptables-mod-ipmark iptables-mod-ipopt iptables-mod-ipp2p iptables-mod-iprange iptables-mod-led iptables-mod-length2 iptables-mod-logmark iptables-mod-nat-extra iptables-mod-sysrq iptables-mod-tee iptables-mod-u32 iptables-mod-ulog iwinfo jshn kernel kmod-arptables kmod-button-hotplug kmod-crypto-arc4 kmod-crypto-ecb kmod-crypto-hash kmod-crypto-sha1 kmod-ebtables kmod-fs-exportfs kmod-fs-ext4 kmod-fs-nfs kmod-fs-nfs-common kmod-fs-ntfs kmod-fs-vfat kmod-fs-xfs kmod-fuse kmod-gpio-dev kmod-gre kmod-ifb kmod-input-core kmod-input-gpio-keys-polled kmod-input-polldev kmod-ipt-account kmod-ipt-chaos kmod-ipt-compat-xtables kmod-ipt-condition kmod-ipt-conntrack kmod-ipt-conntrack-extra kmod-ipt-core kmod-ipt-delude kmod-ipt-filter kmod-ipt-geoip kmod-ipt-hashlimit kmod-ipt-ipmark kmod-ipt-ipopt kmod-ipt-ipp2p kmod-ipt-iprange kmod-ipt-led kmod-ipt-length2 kmod-ipt-logmark kmod-ipt-nat kmod-ipt-nat-extra kmod-ipt-nathelper kmod-ipt-nathelper-extra kmod-ipt-sysrq kmod-ipt-tarpit kmod-ipt-tee kmod-ipt-u32 kmod-ipt-ulog kmod-iptunnel4 kmod-iptunnel6 kmod-ipv6 kmod-l2tp kmod-leds-gpio kmod-ledtrig-default-on kmod-ledtrig-gpio kmod-ledtrig-heartbeat kmod-ledtrig-morse kmod-ledtrig-netdev kmod-ledtrig-netfilter kmod-ledtrig-timer kmod-ledtrig-usbdev kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-textsearch kmod-macvlan kmod-mppe kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 kmod-ppp kmod-pppoe kmod-pppol2tp kmod-pppox kmod-pptp kmod-sched kmod-sched-core kmod-scsi-core kmod-scsi-generic kmod-sit kmod-tun kmod-usb-acm kmod-usb-core kmod-usb-ohci kmod-usb-printer kmod-usb-rt305x-dwc_otg kmod-usb-serial kmod-usb-serial-ftdi kmod-usb-serial-option kmod-usb-serial-pl2303 kmod-usb-serial-qualcomm kmod-usb-serial-wwan kmod-usb-storage kmod-usb-storage-extras kmod-usb-uhci libblkid libblobmsg-json libc libcurl libdaemon libext2fs libffi libgcc libgd libip4tc libip6tc libiwinfo libiwinfo-lua libjpeg libjson-c liblua libncurses libnfnetlink libnl-tiny libopenssl libpcap libpng libpthread librt libstdcpp libubox libubus libubus-lua libuci libuci-lua libuuid libxml2 libxtables lua luci luci-app-commands luci-app-ddns luci-app-firewall luci-app-hd-idle luci-app-ntpc luci-app-p910nd luci-app-qos luci-app-radvd luci-app-samba luci-app-upnp luci-app-vnstat luci-app-wol luci-i18n-chinese luci-i18n-english luci-lib-nixio luci-proto-3g luci-proto-ppp mjpg-streamer ntpclient pdnsd ppp ppp-mod-pppoe ppp-mod-pptp python python-mini resolveip restorefactory ser2net transmission-daemon transmission-remote transmission-web uci uhttpd unbound vsftpd wget wireless-tools zlib&#34;</span>
</code></pre></div><p>结果提示出错，原因是，官网的打包是64bit的，而我安装的是i386架构的Debian。
OK，重新下载后安装，结果老版本的UltraISO无法读入AMD64的ISO包，仅有一个目录，400多KB大小，更新UltraISO到较新的9.5版本，问题解决。
重新安装Debian，配置编译工具，下载Image Builder包，重新编译，结果没有bin文件，Google后晓得，原来需要更改以下Image文件中的内容:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">../OpenWrt-ImageBuilder-ramips_rt305x-for-linux-x86_64/target/linux/ramips/imag/Makefile
</code></pre></div><p>查找HG255D字符串，把对应的注释#符号删除，重新编译</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#Image/Build/Profile/HG255D=$(call BuildFirmware/Default16M/$(1),$(1),hg255d,HG255D)</span>
<span class="c1">#	$(call Image/Build/Profile/HG255D,$(1))</span>
</code></pre></div><p>OK，固件“.bin”文件产生了
写入到路由器中，可以正常的拨号上网了~</p>
<h6 id="heading-3">遗留问题</h6>
<p>trunk版本和RC1版本的OpenWrt预编译包，PPTP VPN无法正常拨通，提示错误，暂时解决不了，于是又退回PandoraBox版本了，而PandoraBox版本无法安装比较大的软件包，还是出现&quot;input/output error&quot;错误，使用jsff2make也没有用。
也不知道到底是HG255D的原因，还是OpenWrt的原因，不准备折腾这个了，计划在LAN中加入一个树莓派，然后用树莓派搞定我的特殊需求，HG255D只做路由器使用。先这样吧~
PS:最终方案是，HG255D解决DNS污染问题，本地电脑进行静态路由和VPN拨号。
折腾来折腾去啊~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with openwrt&#43;vps</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-openwrt&#43;vps/</link>
			<pubDate>Tue, 08 Jul 2014 21:27:40 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-openwrt&#43;vps/</guid>
			<description>来由 在上一篇《fanqiang with vpn+chnroutes》中，通过免费的vpn和chnroutes，已经可以成功的翻墙了，后来觉得免费VPN不稳定，又买了一个月的付费vpn；再后来，觉得付费vpn不是共享，服务器上的多了，就又要换服务器，不爽；于是就决定，找个国外的vps主机，自己独享fq带宽！
 找合适的VPS 由于一个人用，不需要太好的，稳定，延时一般就OK，最好比较实惠。 开始时选择了年付$3.99的搬瓦工bandwagonhost（太便宜了啊），但是ping包时，发现丢包不是一般的多，遂放弃 又找到了RamNode，有个年付$12的套餐，而且，然后用5.8折的优惠码，一年不到100￥，还是可以接受的，遂成交。 它最大的好处就是，丢包低于1%，而且有西雅图这种西海岸的机房，对于大陆来说，延时200ms左右，感觉还不错。 由于RamNode只支持PayPal，所以最终也了解了PayPal支持信用卡或者62开头的银联卡（开通网上银行），即可以支付了~
使用VPS架设VPN 这个就不赘述了，网上一搜一大堆，我选择的操作系统是Debian：
  乔大海的《BuyVM OpenVZ VPS Debian安装PPTP VPN》
  郭高兴的《VPS上安装PPTP（Xen+OpenVZ）完整教程》
  howtogeek的《How to Setup a VPN (PPTP) Server on Debian Linux》
  波斯马的《Linux（VPS+Debian）搭建配置VPN（PPTP）服务》 在设置完VPN后，要注意MTU值的问题，否则部分网页打开的很慢或有问题：
  永远的UNIX的《Fedora core 2下建立Poptop服务器以及常见问题》
  路由器+VPN 淘OpenWrt路由器 可以独享VPN上网后，还是不满足啊，因为家里2台电脑，手机还想无线上网，一台一台指定好费事啊 上一篇《fanqiang with vpn+chnroutes》，最后提到，可以用开源的路由器固件，搞定路由器上VPN的问题。 Google了很长时间，锁定了OpenWrt，路由器选择淘宝上别人刷好的Huawei HG255d，基本在￥40-￥60之间。CPU为Ralink RT3052，FLASH容量为16MB，内存容量为32MB DDR。我淘的是硬改内存64MB+散热片，刷了不死uboot的，毕竟没那么多精力折腾。
刷新最新OpenWrt固件 买回来后，淘宝店主刷新的是比较老的OpenWrt-DreamBox 20120828版本，对应的OpenWrt-DreamBox的源软件包地址已经改变，没法下载新软件，就开始折腾，找了半天，由于DreamBox版本比较老，所以换成了比较新的PandoraBox版本，可以到http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/ 下载编译的最新固件，我选择的是最新的20140505版。 不得不说，有了uboot，可以一键刷机，还是比较放心的进行折腾的。在找到目前的固件前，刷新了不少版本，但都没啥问题。
设置路由器+VPN+chnroutes静态路由 这个根据各人情况都不相同，总而言之，最终搞定。
存在问题 一个是VPN拨号后，需要手动添加一下静态路由，不过是自己的VPS架设的VPN，想待多久就待多久，除了掉线，一般也不会下线滴。 另一个是，可能淘的Huawei HG255d有问题，路由器在对文件进行操作时，折腾一段时间后，会出现&amp;quot;input/output error&amp;quot;问题，怀疑是硬改导致的？ 解决方案就是路由器关电重启解决，不过除了装软件，折腾东东，一般不影响使用，所以也不准备找淘宝店主问这个问题了。
 总之，可以开始开心快乐的自由、随意的访问Internet了，so happy~</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>在上一篇<a href="http://nivrrex.github.io/2014/06/28/fanqiang-with-vpn+chnroutes">《fanqiang with vpn+chnroutes》</a>中，通过免费的vpn和chnroutes，已经可以成功的翻墙了，后来觉得免费VPN不稳定，又买了一个月的付费vpn；再后来，觉得付费vpn不是共享，服务器上的多了，就又要换服务器，不爽；于是就决定，找个国外的vps主机，自己独享fq带宽！</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="vps">找合适的VPS</h4>
<p>由于一个人用，不需要太好的，稳定，延时一般就OK，最好比较实惠。
开始时选择了年付$3.99的搬瓦工bandwagonhost（太便宜了啊），但是ping包时，发现丢包不是一般的多，遂放弃
又找到了<a href="http://www.ramnode.com">RamNode</a>，有个年付$12的套餐，而且，然后用5.8折的优惠码，一年不到100￥，还是可以接受的，遂成交。
它最大的好处就是，丢包低于1%，而且有西雅图这种西海岸的机房，对于大陆来说，延时200ms左右，感觉还不错。
由于RamNode只支持PayPal，所以最终也了解了PayPal支持信用卡或者62开头的银联卡（开通网上银行），即可以支付了~</p>
<h4 id="vpsvpn">使用VPS架设VPN</h4>
<p>这个就不赘述了，网上一搜一大堆，我选择的操作系统是Debian：</p>
<ul>
<li>
<p><a href="http://qiaodahai.com/buyvm-openvz-vps-debian-pptp-vpn.html">乔大海的《BuyVM OpenVZ VPS Debian安装PPTP VPN》</a></p>
</li>
<li>
<p><a href="http://hello.guo.biz/story/install-pptp-on-vps">郭高兴的《VPS上安装PPTP（Xen+OpenVZ）完整教程》</a></p>
</li>
<li>
<p><a href="http://www.howtogeek.com/51237/setting-up-a-vpn-pptp-server-on-debian/">howtogeek的《How to Setup a VPN (PPTP) Server on Debian Linux》</a></p>
</li>
<li>
<p><a href="http://blog.bossma.cn/server/linux-vps-debian-vpn-server-pptp/">波斯马的《Linux（VPS+Debian）搭建配置VPN（PPTP）服务》</a>
在设置完VPN后，要注意MTU值的问题，否则部分网页打开的很慢或有问题：</p>
</li>
<li>
<p><a href="http://fanqiang.chinaunix.net/app/other/2005-09-13/3655.shtml">永远的UNIX的《Fedora core 2下建立Poptop服务器以及常见问题》</a></p>
</li>
</ul>
<h4 id="vpn">路由器+VPN</h4>
<h6 id="openwrt">淘OpenWrt路由器</h6>
<p>可以独享VPN上网后，还是不满足啊，因为家里2台电脑，手机还想无线上网，一台一台指定好费事啊
上一篇<a href="http://nivrrex.github.io/2014/06/28/fanqiang-with-vpn+chnroutes">《fanqiang with vpn+chnroutes》</a>，最后提到，可以用开源的路由器固件，搞定路由器上VPN的问题。
Google了很长时间，锁定了OpenWrt，路由器选择淘宝上别人刷好的<a href="http://s8.taobao.com/search?spm=a230z.1.0.0.NCbfUi&amp;promote=0&amp;sort=sale-desc&amp;initiative_id=staobaoz_20140708&amp;q=hg255d&amp;pid=mm_10062864_0_0&amp;mode=63#J_relative">Huawei HG255d</a>，基本在￥40-￥60之间。CPU为Ralink RT3052，FLASH容量为16MB，内存容量为32MB DDR。我淘的是硬改内存64MB+散热片，刷了不死uboot的，毕竟没那么多精力折腾。</p>
<h6 id="openwrt-1">刷新最新OpenWrt固件</h6>
<p>买回来后，淘宝店主刷新的是比较老的OpenWrt-DreamBox 20120828版本，对应的OpenWrt-DreamBox的源软件包地址已经改变，没法下载新软件，就开始折腾，找了半天，由于DreamBox版本比较老，所以换成了比较新的PandoraBox版本，可以到http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/ 下载编译的最新固件，我选择的是最新的20140505版。
不得不说，有了uboot，可以一键刷机，还是比较放心的进行折腾的。在找到目前的固件前，刷新了不少版本，但都没啥问题。</p>
<h4 id="vpnchnroutes">设置路由器+VPN+chnroutes静态路由</h4>
<p>这个根据各人情况都不相同，总而言之，最终搞定。</p>
<h6 id="heading-1">存在问题</h6>
<p>一个是VPN拨号后，需要手动添加一下静态路由，不过是自己的VPS架设的VPN，想待多久就待多久，除了掉线，一般也不会下线滴。
另一个是，可能淘的Huawei HG255d有问题，路由器在对文件进行操作时，折腾一段时间后，会出现&quot;input/output error&quot;问题，怀疑是硬改导致的？
解决方案就是路由器关电重启解决，不过除了装软件，折腾东东，一般不影响使用，所以也不准备找淘宝店主问这个问题了。</p>
<hr>
<p>总之，可以开始开心快乐的自由、随意的访问Internet了，so happy~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with vpn&#43;chnroutes</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-vpn&#43;chnroutes/</link>
			<pubDate>Sat, 28 Jun 2014 10:48:47 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-vpn&#43;chnroutes/</guid>
			<description>来由 用goagent这个FQ方案，终于可以上google了，但是因为gfw这个家伙封锁的太厉害的缘故，会出现可用IP为0的现象，结果又断网了。 翻来覆去的太麻烦。只好换招了。
 VPN 这两天主要做的就是先找到一些免费的VPN，然后通过VPN直接翻墙。不用再去设置goagent的代理了。缺点是所有流量通过VPN走，国内网站访问慢，但是可以通过路由表调整，下面会介绍。 随便搜索了下，免费的VPN还是很多的，但是免费的午餐，延时、流量等需要能忍受啊。幸好需要访问的国外网站不是很多~
VPN推荐网站:
 免费VPN推荐网 免费VPN资源网  网友推荐:
 rsouls《国内最给力五大免费VPN商家》 oovpn的《十大免费翻墙VPN代理软件推荐》 zq530885040的《八个提供免费VPN账号的网站》   chnroutes 但是VPN的最大缺点是，所有流量全部从VPN走了，这样访问国内网站也从国外绕一圈，自找不自在啊。 幸好，网上的大拿们，开发了一个针对国内IP地址段的路由更新表，通过批处理配置路由表等方式，将国内IP指向本机网关，避免VPN绕行，具体项目在：
 chnroutes 每日更新路由下载  网上其他人的使用  MacTalk的《VPN – 长城内外，惟余莽莽》 markzhang的《Chnroutes的使用（Mac OS X Mavericks）》 ratazzi的《优化 VPN 和 chnroutes》   路由器自动配置 为了避免家里每台电脑都要设置，又有人考虑，直接设置路由器，然后自动fq。 只能说，人的懒惰是天生的啊。 主要思想是将路由器固件更新为开源固件
 DD-WRT OpenWrt Tomato  然后通过
 autoddvpn 进行自动的VPN的FQ方案实施。  具体参考的有：
 北落师门的《在wr841n上刷openwrt并使用openvpn自动VPN》 错乱の年轮的《DD-WRT+Autoddvpn+OpenVPN=智能翻墙路由》 hauy的《配置DD-WRT通过autoddvpn的graceMode自动翻墙(PPTP)》 ntcn的《DD-WRT搭配autoddvpn全自动FQ配置精简教程》 因为我的路由器不匹配，所以没有实验。   通过VPN+chnroutes，目前已经可以轻松的上Goolge、Twitter、Facebook等网站了，挺好的~</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>用goagent这个FQ方案，终于可以上google了，但是因为gfw这个家伙封锁的太厉害的缘故，会出现可用IP为0的现象，结果又断网了。
翻来覆去的太麻烦。<strong>只好换招了</strong>。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="vpn">VPN</h4>
<p>这两天主要做的就是先找到一些免费的VPN，然后通过VPN直接翻墙。不用再去设置goagent的代理了。缺点是所有流量通过VPN走，国内网站访问慢，但是可以通过路由表调整，下面会介绍。
随便搜索了下，免费的VPN还是很多的，但是免费的午餐，延时、流量等需要能忍受啊。幸好需要访问的国外网站不是很多~</p>
<p><strong>VPN推荐网站:</strong></p>
<ul>
<li><a href="http://www.srkoo.com/">免费VPN推荐网</a></li>
<li><a href="http://ilvpn.com/free-vpn/">免费VPN资源网</a></li>
</ul>
<p><strong>网友推荐:</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/rsouls/p/3364506.html">rsouls《国内最给力五大免费VPN商家》</a></li>
<li><a href="http://oovpn.com/">oovpn的《十大免费翻墙VPN代理软件推荐》</a></li>
<li><a href="http://blog.csdn.net/zq530885040/article/details/10247903">zq530885040的《八个提供免费VPN账号的网站》</a></li>
</ul>
<hr>
<h4 id="chnroutes">chnroutes</h4>
<p>但是VPN的最大缺点是，所有流量全部从VPN走了，这样访问国内网站也从国外绕一圈，自找不自在啊。
幸好，网上的大拿们，开发了一个针对国内IP地址段的路由更新表，通过批处理配置路由表等方式，将国内IP指向本机网关，避免VPN绕行，具体项目在：</p>
<ul>
<li><a href="http://code.google.com/p/chnroutes/">chnroutes</a></li>
<li><a href="http://chnroutes-dl.appspot.com/">每日更新路由下载</a></li>
</ul>
<h6 id="heading-1">网上其他人的使用</h6>
<ul>
<li><a href="http://macshuo.com/?tag=chnroutes">MacTalk的《VPN – 长城内外，惟余莽莽》</a></li>
<li><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">markzhang的《Chnroutes的使用（Mac OS X Mavericks）》</a></li>
<li><a href="http://ratazzi.org/2012/06/17/optmize-openvpn-and-chanroutes/">ratazzi的《优化 VPN 和 chnroutes》</a></li>
</ul>
<hr>
<h4 id="heading-2">路由器自动配置</h4>
<p>为了避免家里每台电脑都要设置，又有人考虑，直接设置路由器，然后自动fq。
只能说，人的懒惰是天生的啊。
主要思想是将路由器固件更新为开源固件</p>
<ul>
<li><a href="http://www.dd-wrt.com/site/index">DD-WRT</a></li>
<li><a href="https://openwrt.org/">OpenWrt</a></li>
<li><a href="http://www.polarcloud.com/tomato">Tomato</a></li>
</ul>
<p>然后通过</p>
<ul>
<li><a href="http://code.google.com/p/autoddvpn/">autoddvpn</a>
进行自动的VPN的FQ方案实施。</li>
</ul>
<p>具体参考的有：</p>
<ul>
<li><a href="http://hong.im/2012/11/03/openvpn-on-wr841n-with-openwrt/">北落师门的《在wr841n上刷openwrt并使用openvpn自动VPN》</a></li>
<li><a href="http://www.wpaengd.com/archives/723">错乱の年轮的《DD-WRT+Autoddvpn+OpenVPN=智能翻墙路由》</a></li>
<li><a href="http://hauy.net/2013/08/dd-wrt-autoddvpn-through-wall/">hauy的《配置DD-WRT通过autoddvpn的graceMode自动翻墙(PPTP)》</a></li>
<li><a href="http://ntcn.net/blog/?p=379">ntcn的《DD-WRT搭配autoddvpn全自动FQ配置精简教程》</a>
因为我的路由器不匹配，所以没有实验。</li>
</ul>
<hr>
<p>通过VPN+chnroutes，目前已经可以轻松的上Goolge、Twitter、Facebook等网站了，挺好的~</p>
]]></content>
		</item>
		
		<item>
			<title>fanqiang with goagent</title>
			<link>http://nivrrex.github.io/posts/fanqiang-with-goagent/</link>
			<pubDate>Wed, 25 Jun 2014 21:45:26 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/fanqiang-with-goagent/</guid>
			<description>来由 最近Google被屏蔽的很厉害，想查个东西都要翻来覆去的，灰常麻烦。 刚开始以为一段时间就OK了，就用了临时性的解决方案。
比如：
 使用Bing代替。 搜索效果相比Google还有差距 使用StartPage代替。 相比原版，存在部分结果搜索不到的问题 直接用Google IP进行搜索。 可以使用的IP被飞快的封锁 使用网上的免翻墙镜像网站greatfire。 是个不错的解决方案，但是怕被封锁后还要重新设置 使用网上的免费VPN免费VPN资源。 免费的要么限制流量，要么限制时间，而且免费的基本上速度比较慢 使用google的GAE平台的goagent。 强烈推荐   goagent设置 这个网上教程很多，随便搜索都有好几个，如：
 猫理会的goagent教程详细版 软矿的GoAgent图文设置教程 海盗船博客的2014最新翻墙方法之goagent翻墙教程   软件设置 在搭建好goagent后，就是如何使用它配合浏览器上网了 我常用的浏览器有IE、猎豹、Opera 为统一解决，我的方法是：
 1、猎豹浏览器中安装插件SwitchySharp。然后建立规则，默认直接连接，然后设置需要翻墙的网站清单。设置成功后，导出PAC文件。 2、IE中设置代理服务器，勾选代理服务器，“127.0.0.1 8087”。将“使用自动配置脚本”勾选，然后按格式填入“file://C:\GoAgent\SwitchyPac.pac”。如果有代理后出问题的网站，选“高级”，将对应网站填入“例外”区域内。 3、Opera浏览器：Tools -&amp;gt; Preferences -&amp;gt; Advanced -&amp;gt; Network -&amp;gt; Proxy Servers -&amp;gt; &amp;ldquo;Use automatic proxy configuration&amp;rdquo;，填写“file://C:\GoAgent\SwitchyPac.pac”。 4、IE和Opera都需要安装goagent的证书，否则访问时会出错。 5、可以在这里订阅部分数据。   结 堵不如疏，闭关锁国只能让自己更落伍。 人民总有办法得到自己想知道的东西的，而且通过这种方式得到的信息，反而会倾向于相信。 大多数人使用Google只是想查找自己想要的知识。</description>
			<content type="html"><![CDATA[<h4 id="heading">来由</h4>
<p>最近Google被屏蔽的很厉害，想查个东西都要翻来覆去的，灰常麻烦。
刚开始以为一段时间就OK了，就用了临时性的解决方案。</p>
<!-- raw HTML omitted -->
<p>比如：</p>
<ul>
<li>使用<a href="http://www.bing.com/?mkt=zh-CN">Bing</a>代替。 <em>搜索效果相比Google还有差距</em></li>
<li>使用<a href="https://www.startpage.com/">StartPage</a>代替。 <em>相比原版，存在部分结果搜索不到的问题</em></li>
<li>直接用<a href="https://github.com/justjavac/Google-IPs/blob/master/README.md">Google IP</a>进行搜索。 <em>可以使用的IP被飞快的封锁</em></li>
<li>使用网上的免翻墙镜像网站<a href="https://github.com/greatfire/wiki">greatfire</a>。 <em>是个不错的解决方案，但是怕被封锁后还要重新设置</em></li>
<li>使用网上的免费VPN<a href="http://ilvpn.com/free-vpn/">免费VPN资源</a>。 <em>免费的要么限制流量，要么限制时间，而且免费的基本上速度比较慢</em></li>
<li>使用google的GAE平台的<a href="https://code.google.com/p/goagent/">goagent</a>。 <em>强烈推荐</em></li>
</ul>
<hr>
<h4 id="goagent">goagent设置</h4>
<p>这个网上教程很多，随便搜索都有好几个，如：</p>
<ul>
<li><a href="http://maolihui.com/goagent-detail.html">猫理会的goagent教程详细版</a></li>
<li><a href="https://www.x-berry.com/goagent/">软矿的GoAgent图文设置教程</a></li>
<li><a href="http://blog.4a8a.com/post-133.html">海盗船博客的2014最新翻墙方法之goagent翻墙教程</a></li>
</ul>
<hr>
<h4 id="heading-1">软件设置</h4>
<p>在搭建好goagent后，就是如何使用它配合浏览器上网了
我常用的浏览器有IE、猎豹、Opera
为统一解决，我的方法是：</p>
<ul>
<li>1、猎豹浏览器中安装插件SwitchySharp。然后建立规则，默认直接连接，然后设置需要翻墙的网站清单。设置成功后，导出PAC文件。</li>
<li>2、IE中设置代理服务器，勾选代理服务器，“127.0.0.1 8087”。将“使用自动配置脚本”勾选，然后按格式填入“file://C:\GoAgent\SwitchyPac.pac”。如果有代理后出问题的网站，选“高级”，将对应网站填入“例外”区域内。</li>
<li>3、Opera浏览器：Tools -&gt; Preferences -&gt; Advanced -&gt; Network -&gt; Proxy Servers -&gt; &ldquo;Use automatic proxy configuration&rdquo;，填写“file://C:\GoAgent\SwitchyPac.pac”。</li>
<li>4、IE和Opera都需要安装goagent的证书，否则访问时会出错。</li>
<li>5、可以在<a href="https://code.google.com/p/autoproxy-gfwlist/">这里</a>订阅部分数据。</li>
</ul>
<hr>
<h4 id="heading-2">结</h4>
<p>堵不如疏，闭关锁国只能让自己更落伍。
人民总有办法得到自己想知道的东西的，而且通过这种方式得到的信息，反而会倾向于相信。
大多数人使用Google只是想查找自己想要的知识。</p>
]]></content>
		</item>
		
		<item>
			<title>some problems for golang excel update</title>
			<link>http://nivrrex.github.io/posts/some-problems-for-golang-excel-update/</link>
			<pubDate>Sun, 15 Jun 2014 17:24:30 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/some-problems-for-golang-excel-update/</guid>
			<description>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见这里 由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。
 首字母大小写导致无法外部调用 Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。
 GOPATH设置 golang有几个关键环境变量，需要进行设置
 GOROOT : Golang的安装目录，默认为C:\Go GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录 GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows） GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）  我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^
mkdir C:\Go\import mkdir C:\Go\import\src mkdir C:\Go\import\pkg set GOPATH=C:\go\import  Go build无法生成文件 这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^
 小结 归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。 Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。 日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</description>
			<content type="html"><![CDATA[<p>趁着周末，用golang把以前写的excel操作的简单包装库又修改了一下，具体详见<a href="https://github.com/nivrrex/excel">这里</a>
由于对golang的语法和工具链不怎么熟悉，反复了好几次，下边简单记录下。</p>
<!-- raw HTML omitted -->
<hr>
<h4 id="heading">首字母大小写导致无法外部调用</h4>
<p>Golang的package中的函数或者，首字母大写是Public，外部可见的。首字母小写是Private，仅限内部访问。写的package里的struct的内部属性就是因为这个原因，无法被外部调用。这是Golang为了简化关键字，做的一项规定。</p>
<hr>
<h4 id="gopath">GOPATH设置</h4>
<p>golang有几个关键环境变量，需要进行设置</p>
<ul>
<li>GOROOT : Golang的安装目录，默认为C:\Go</li>
<li>GOPATH : 用来指定在$GOROOT之外的各种外部package，包含src和pkg文件的源目录</li>
<li>GOBIN : Golang安装目录下的bin目录，默认为C:\Go\bin</li>
<li>GOOS : 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows）</li>
<li>GOARCH : 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）</li>
</ul>
<p>我就是没有好好设置GOPATH环境变量，结果默认为GOROOT，下载的package，在go build和go install后，无法被找到，还需要手动复制到GOROOT对应的目录下，结果我认为是Golang工具链的BUG －_－^</p>
<div class="highlight"><pre class="chroma"><code class="language-Batch" data-lang="Batch"><span class="k">mkdir</span> C:\Go\import
<span class="k">mkdir</span> C:\Go\import\src
<span class="k">mkdir</span> C:\Go\import\pkg
<span class="k">set</span> <span class="k"></span><span class="nv">GOPATH</span><span class="p">=</span>C:\go\import
</code></pre></div><hr>
<h4 id="go-build">Go build无法生成文件</h4>
<p>这个属于我对Go工具链的不了解，Go build就是无法生成.a文件的，生成.a文件的是Go install－_－^</p>
<hr>
<h4 id="heading-1">小结</h4>
<p>归根结底，还都是自己对Golang相关语法及工具链不熟悉的问题。
Golang是个好东西，就是太年轻，好多东西需要自己重新造轮子，而且它有着自己的适用范围。
日常的自动化工作等问题的解决，还是用Ruby等成熟的脚本语言比较效率。</p>
]]></content>
		</item>
		
		<item>
			<title>commonly used software</title>
			<link>http://nivrrex.github.io/posts/commonly-used-software/</link>
			<pubDate>Thu, 12 Jun 2014 22:32:51 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/commonly-used-software/</guid>
			<description>开发工具 Python  Python Lang Python官方网站 Python PyPI Python packages的官方下载站点 Awesome Python Python框架，库，软件和资源的精选清单  Golang  Golang Downloads Golang官方网站 Golang Dev Golang开发者网站 Go Language Resources 非官方的Golang资源收集 Awesome Go Go框架，库和软件的精选清单  Nim  Nim Language Nim语言官方网站 Nim 中文社区 Nim语言中文社区 Nim Package Directory 官方的nimble资源收集 Awesome Nim 中文社区的Nim框架，库和软件的精选清单  Ruby  Ruby Lang Ruby官方网站 RubyInstaller for Windows Ruby的Windows安装打包  GCC MinGW  MinGW Distro TDM-GCC Equation Solution MinGW-builds mingw-w64  Tcc  Tiny C Compiler 极简的c语言编译器  经典软件 系统强化  Total Commander Windows下的资源管理工具 Listary Windows下的文件搜索和程序启动工具 Everthing 基于NTFS格式的快速搜索工具 ImDisk 虚拟磁盘工具 SoftPerfect RAM Disk 虚拟磁盘工具  系统美化  MacType Windows下的字体美化工具 Fences Windows下的图标分区优化工具  输入法  rimeime - 中州韻輸入法引擎 很好用的输入法工具，可配置功能较多  编辑器  SciTE 轻量级的程序编辑器 Sublime Text 跨平台、可扩展的程序编辑器 Notepad2 Mod Notepad的替代编辑器 Notepad3 Notepad2不更新后的替代编辑器  网络  shadowsocks-libev shadowsocks的c语言实现的服务器端,可布置在vps上使用 shadowsocks-windows shadowsocks的windows客户端，可自动更新GFWlist的PAC文件  </description>
			<content type="html"><![CDATA[<h2 id="heading">开发工具</h2>
<h4 id="python">Python</h4>
<ul>
<li><a href="https://www.python.org/">Python Lang</a> Python官方网站</li>
<li><a href="https://pypi.org/">Python PyPI</a> Python packages的官方下载站点</li>
<li><a href="https://awesome-python.com/">Awesome Python</a> Python框架，库，软件和资源的精选清单</li>
</ul>
<!-- raw HTML omitted -->
<h4 id="golang">Golang</h4>
<ul>
<li><a href="http://golang.org/dl/">Golang Downloads</a> Golang官方网站</li>
<li><a href="https://go.dev/">Golang Dev</a> Golang开发者网站</li>
<li><a href="http://go-lang.cat-v.org/">Go Language Resources</a> 非官方的Golang资源收集</li>
<li><a href="https://awesome-go.com/">Awesome Go</a> Go框架，库和软件的精选清单</li>
</ul>
<h4 id="nim">Nim</h4>
<ul>
<li><a href="https://nim-lang.org/">Nim Language</a> Nim语言官方网站</li>
<li><a href="https://nim-cn.com/">Nim 中文社区</a> Nim语言中文社区</li>
<li><a href="https://nimble.directory/">Nim Package Directory</a> 官方的nimble资源收集</li>
<li><a href="https://github.com/nim-lang-cn/awesome-nim">Awesome Nim</a> 中文社区的Nim框架，库和软件的精选清单</li>
</ul>
<h4 id="ruby">Ruby</h4>
<ul>
<li><a href="https://www.ruby-lang.org/en/">Ruby Lang</a> Ruby官方网站</li>
<li><a href="http://rubyinstaller.org/">RubyInstaller for Windows</a> Ruby的Windows安装打包</li>
</ul>
<h4 id="gcc-mingw">GCC MinGW</h4>
<ul>
<li><a href="http://nuwen.net/mingw.html">MinGW Distro</a></li>
<li><a href="http://tdm-gcc.tdragon.net/">TDM-GCC</a></li>
<li><a href="http://www.equation.com/servlet/equation.cmd?fa=fortran">Equation Solution</a></li>
<li><a href="http://sourceforge.net/projects/mingwbuilds/">MinGW-builds</a></li>
<li><a href="http://mingw-w64.org/doku.php">mingw-w64</a></li>
</ul>
<h4 id="tcc">Tcc</h4>
<ul>
<li><a href="http://bellard.org/tcc/">Tiny C Compiler</a> 极简的c语言编译器</li>
</ul>
<h2 id="heading-1">经典软件</h2>
<h4 id="heading-2">系统强化</h4>
<ul>
<li><a href="http://www.ghisler.com/">Total Commander</a> Windows下的资源管理工具</li>
<li><a href="http://www.listary.com/">Listary</a> Windows下的文件搜索和程序启动工具</li>
<li><a href="http://www.voidtools.com/">Everthing</a> 基于NTFS格式的快速搜索工具</li>
<li><a href="http://www.ltr-data.se/opencode.html/#ImDisk">ImDisk</a> 虚拟磁盘工具</li>
<li><a href="http://www.softperfect.com/">SoftPerfect RAM Disk</a> 虚拟磁盘工具</li>
</ul>
<h4 id="heading-3">系统美化</h4>
<ul>
<li><a href="https://github.com/snowie2000/mactype/">MacType</a> Windows下的字体美化工具</li>
<li><a href="http://www.stardock.com/products/fences/">Fences</a> Windows下的图标分区优化工具</li>
</ul>
<h4 id="heading-4">输入法</h4>
<ul>
<li><a href="https://code.google.com/p/rimeime/">rimeime - 中州韻輸入法引擎</a> 很好用的输入法工具，可配置功能较多</li>
</ul>
<h4 id="heading-5">编辑器</h4>
<ul>
<li><a href="http://www.scintilla.org/SciTE.html">SciTE</a> 轻量级的程序编辑器</li>
<li><a href="http://www.sublimetext.com/">Sublime Text</a> 跨平台、可扩展的程序编辑器</li>
<li><a href="https://xhmikosr.github.io/notepad2-mod/">Notepad2 Mod</a> Notepad的替代编辑器</li>
<li><a href="https://github.com/rizonesoft/Notepad3">Notepad3</a> Notepad2不更新后的替代编辑器</li>
</ul>
<h4 id="heading-6">网络</h4>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libev</a> shadowsocks的c语言实现的服务器端,可布置在vps上使用</li>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows">shadowsocks-windows</a> shadowsocks的windows客户端，可自动更新GFWlist的PAC文件</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Hello GitHub</title>
			<link>http://nivrrex.github.io/posts/hello-github/</link>
			<pubDate>Thu, 12 Jun 2014 19:37:32 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/hello-github/</guid>
			<description>欢迎来到我的GitHub blog！
这是我用Hexo编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。
 Git的一些基本命令 git config --global user.name &amp;#34;nivrrex&amp;#34;git config --global user.email nivrrex@gmail.comssh-keygen -t rsa -C &amp;#34;nivrrex@gmail.com&amp;#34;ssh -T git@github.com -i ./.ssh/id_rsa更多命令可以到git - 简明指南去查看
 Hexo的一些基本命令 npm install hexo-cli -gnpm install hexo --savenpm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-feed --savenpm install hexo-renderer-ejs --savenpm install hexo-renderer-stylus --savenpm install hexo-renderer-marked --savenpm install hexo-server --savenpm install hexo-deployer-git --savehexo inithexo new [post] &amp;#34;My New Post&amp;#34;hexo serverhexo generatehexo deploy更多文档可以到Hexo docs上查看</description>
			<content type="html"><![CDATA[<p>欢迎来到我的<a href="http://nivrrex.github.io/">GitHub blog</a>！</p>
<p>这是我用<a href="http://hexo.io/">Hexo</a>编写的一个简易blog，将记录我在GitHub和生活中的点点滴滴，主要关注Ruby和Golang。</p>
<hr>
<h4 id="git">Git的一些基本命令</h4>
<!-- raw HTML omitted -->
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="s2">&#34;nivrrex&#34;</span>
<span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span> <span class="nx">nivrrex</span><span class="err">@</span><span class="nx">gmail</span><span class="p">.</span><span class="nx">com</span>

<span class="nx">ssh</span><span class="o">-</span><span class="nx">keygen</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">rsa</span> <span class="o">-</span><span class="nx">C</span> <span class="s2">&#34;nivrrex@gmail.com&#34;</span>
<span class="nx">ssh</span> <span class="o">-</span><span class="nx">T</span> <span class="nx">git</span><span class="err">@</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span> <span class="o">-</span><span class="nx">i</span> <span class="p">.</span><span class="o">/</span><span class="p">.</span><span class="nx">ssh</span><span class="o">/</span><span class="nx">id_rsa</span>
</code></pre></div><p>更多命令可以到<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a>去查看</p>
<hr>
<h4 id="hexo">Hexo的一些基本命令</h4>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">cli</span> <span class="o">-</span><span class="nx">g</span>

<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">index</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">archive</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">category</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">tag</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">sitemap</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">generator</span><span class="o">-</span><span class="nx">feed</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">ejs</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">stylus</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">renderer</span><span class="o">-</span><span class="nx">marked</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">server</span> <span class="o">--</span><span class="nx">save</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">hexo</span><span class="o">-</span><span class="nx">deployer</span><span class="o">-</span><span class="nx">git</span> <span class="o">--</span><span class="nx">save</span>

<span class="nx">hexo</span> <span class="nx">init</span>
<span class="nx">hexo</span> <span class="k">new</span> <span class="p">[</span><span class="nx">post</span><span class="p">]</span> <span class="s2">&#34;My New Post&#34;</span>
<span class="nx">hexo</span> <span class="nx">server</span>
<span class="nx">hexo</span> <span class="nx">generate</span>
<span class="nx">hexo</span> <span class="nx">deploy</span>
</code></pre></div><p>更多文档可以到<a href="http://hexo.io/docs/">Hexo docs</a>上查看</p>
<hr>
<h4 id="markdown">Markdown语法</h4>
<p>可以去<a href="http://ibruce.info/">不如</a>的<a href="http://ibruce.info/2013/11/26/markdown/">Markdown简明语法</a>去学习下</p>
]]></content>
		</item>
		
		<item>
			<title>About this blog</title>
			<link>http://nivrrex.github.io/posts/about-me/</link>
			<pubDate>Tue, 10 Jun 2014 13:55:26 +0800</pubDate>
			
			<guid>http://nivrrex.github.io/posts/about-me/</guid>
			<description>欢迎来到Nivrrex的GitHub blog！
本blog将记录我在GitHub和生活中的点点滴滴，主要关注Ruby Python、Golang和Nim。</description>
			<content type="html"><![CDATA[<p>欢迎来到Nivrrex的<a href="http://nivrrex.github.io/">GitHub blog</a>！</p>
<p>本blog将记录我在GitHub和生活中的点点滴滴，主要关注<del>Ruby</del> Python、Golang和Nim。</p>
]]></content>
		</item>
		
	</channel>
</rss>
